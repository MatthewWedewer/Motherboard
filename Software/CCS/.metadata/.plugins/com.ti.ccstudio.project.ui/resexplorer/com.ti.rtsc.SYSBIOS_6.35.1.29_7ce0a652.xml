<?xml version="1.0" encoding="UTF-8"?>

<resource.explorer version="1.0" name="SYS/BIOS" dir="" href="http://processors.wiki.ti.com">



	<content name="Release Notes" href="c:/ti/bios_6_35_01_29/Bios_6_35_01_29_release_notes.html">
		<type>weblink</type>
	</content>
	<content name="Getting Started Guide" href="c:/ti/bios_6_35_01_29/docs/Bios_Getting_Started_Guide.pdf">
		<type>weblink</type>
	</content>
	<content name="Users Guide" href="c:/ti/bios_6_35_01_29/docs/Bios_User_Guide.pdf">
		<type>weblink</type>
	</content>
	<content name="Legacy Applications note" href="c:/ti/bios_6_35_01_29/docs/Bios_Legacy_App_Note.pdf">
		<type>weblink</type>
	</content>
	<contents name="ARM" desc="ARM" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="Custom ARM Device" desc="Custom ARM Device" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419575370069">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Custom ARM Device</tag>
					<tag>ARM</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<filter.ref ref.id="filter_1721419575370069"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_CustomARMDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.TMS470.CustomTMS470Device"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<filter.ref ref.id="filter_1721419575370069"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_CustomARMDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.TMS470.CustomTMS470Device"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<filter.ref ref.id="filter_1721419575370069"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_CustomARMDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.TMS470.CustomTMS470Device"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419579759077">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Custom ARM Device</tag>
					<tag>ARM</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<filter.ref ref.id="filter_1721419579759077"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_CustomARMDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.TMS470.CustomTMS470Device"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<filter.ref ref.id="filter_1721419579759077"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_CustomARMDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.TMS470.CustomTMS470Device"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<filter.ref ref.id="filter_1721419579759077"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_CustomARMDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.TMS470.CustomTMS470Device"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<filter.ref ref.id="filter_1721419579759077"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_CustomARMDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.TMS470.CustomTMS470Device"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<filter.ref ref.id="filter_1721419579759077"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_CustomARMDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.TMS470.CustomTMS470Device"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<filter.ref ref.id="filter_1721419579759077"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_CustomARMDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.TMS470.CustomTMS470Device"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<filter.ref ref.id="filter_1721419579759077"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_CustomARMDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.TMS470.CustomTMS470Device"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<filter.ref ref.id="filter_1721419579759077"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_CustomARMDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.TMS470.CustomTMS470Device"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<filter.ref ref.id="filter_1721419579759077"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_CustomARMDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.TMS470.CustomTMS470Device"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<filter.ref ref.id="filter_1721419579759077"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_CustomARMDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.TMS470.CustomTMS470Device"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<filter.ref ref.id="filter_1721419579759077"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_CustomARMDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.TMS470.CustomTMS470Device"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<filter.ref ref.id="filter_1721419579759077"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_CustomARMDevice"/>
							<attribute key="device.variant" value="com.ti.ccstudio.deviceModel.TMS470.CustomTMS470Device"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>
	<contents name="Cortex R" desc="Cortex R" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="RM57L8xx" desc="RM57L8xx" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419629448558">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>RM57L8xx</tag>
					<tag>Cortex R</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<filter.ref ref.id="filter_1721419629448558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_RM57L8xx"/>
							<attribute key="device.variant" value="Cortex R.RM57L8xx"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<filter.ref ref.id="filter_1721419629448558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_RM57L8xx"/>
							<attribute key="device.variant" value="Cortex R.RM57L8xx"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<filter.ref ref.id="filter_1721419629448558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_RM57L8xx"/>
							<attribute key="device.variant" value="Cortex R.RM57L8xx"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419630360742">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>RM57L8xx</tag>
					<tag>Cortex R</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<filter.ref ref.id="filter_1721419630360742"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_RM57L8xx"/>
							<attribute key="device.variant" value="Cortex R.RM57L8xx"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<filter.ref ref.id="filter_1721419630360742"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_RM57L8xx"/>
							<attribute key="device.variant" value="Cortex R.RM57L8xx"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<filter.ref ref.id="filter_1721419630360742"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_RM57L8xx"/>
							<attribute key="device.variant" value="Cortex R.RM57L8xx"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<filter.ref ref.id="filter_1721419630360742"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_RM57L8xx"/>
							<attribute key="device.variant" value="Cortex R.RM57L8xx"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<filter.ref ref.id="filter_1721419630360742"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_RM57L8xx"/>
							<attribute key="device.variant" value="Cortex R.RM57L8xx"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<filter.ref ref.id="filter_1721419630360742"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_RM57L8xx"/>
							<attribute key="device.variant" value="Cortex R.RM57L8xx"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<filter.ref ref.id="filter_1721419630360742"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_RM57L8xx"/>
							<attribute key="device.variant" value="Cortex R.RM57L8xx"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<filter.ref ref.id="filter_1721419630360742"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_RM57L8xx"/>
							<attribute key="device.variant" value="Cortex R.RM57L8xx"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<filter.ref ref.id="filter_1721419630360742"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_RM57L8xx"/>
							<attribute key="device.variant" value="Cortex R.RM57L8xx"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<filter.ref ref.id="filter_1721419630360742"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_RM57L8xx"/>
							<attribute key="device.variant" value="Cortex R.RM57L8xx"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<filter.ref ref.id="filter_1721419630360742"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_RM57L8xx"/>
							<attribute key="device.variant" value="Cortex R.RM57L8xx"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<filter.ref ref.id="filter_1721419630360742"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_RM57L8xx"/>
							<attribute key="device.variant" value="Cortex R.RM57L8xx"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="TMS570LC43xx" desc="TMS570LC43xx" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419631758314">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>TMS570LC43xx</tag>
					<tag>Cortex R</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<filter.ref ref.id="filter_1721419631758314"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TMS570LC43xx"/>
							<attribute key="device.variant" value="Cortex R.TMS570LC43xx"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<filter.ref ref.id="filter_1721419631758314"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TMS570LC43xx"/>
							<attribute key="device.variant" value="Cortex R.TMS570LC43xx"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<filter.ref ref.id="filter_1721419631758314"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TMS570LC43xx"/>
							<attribute key="device.variant" value="Cortex R.TMS570LC43xx"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419632064514">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>TMS570LC43xx</tag>
					<tag>Cortex R</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<filter.ref ref.id="filter_1721419632064514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TMS570LC43xx"/>
							<attribute key="device.variant" value="Cortex R.TMS570LC43xx"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<filter.ref ref.id="filter_1721419632064514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TMS570LC43xx"/>
							<attribute key="device.variant" value="Cortex R.TMS570LC43xx"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<filter.ref ref.id="filter_1721419632064514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TMS570LC43xx"/>
							<attribute key="device.variant" value="Cortex R.TMS570LC43xx"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<filter.ref ref.id="filter_1721419632064514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TMS570LC43xx"/>
							<attribute key="device.variant" value="Cortex R.TMS570LC43xx"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<filter.ref ref.id="filter_1721419632064514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TMS570LC43xx"/>
							<attribute key="device.variant" value="Cortex R.TMS570LC43xx"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<filter.ref ref.id="filter_1721419632064514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TMS570LC43xx"/>
							<attribute key="device.variant" value="Cortex R.TMS570LC43xx"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<filter.ref ref.id="filter_1721419632064514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TMS570LC43xx"/>
							<attribute key="device.variant" value="Cortex R.TMS570LC43xx"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<filter.ref ref.id="filter_1721419632064514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TMS570LC43xx"/>
							<attribute key="device.variant" value="Cortex R.TMS570LC43xx"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<filter.ref ref.id="filter_1721419632064514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TMS570LC43xx"/>
							<attribute key="device.variant" value="Cortex R.TMS570LC43xx"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<filter.ref ref.id="filter_1721419632064514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TMS570LC43xx"/>
							<attribute key="device.variant" value="Cortex R.TMS570LC43xx"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<filter.ref ref.id="filter_1721419632064514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TMS570LC43xx"/>
							<attribute key="device.variant" value="Cortex R.TMS570LC43xx"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<filter.ref ref.id="filter_1721419632064514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TMS570LC43xx"/>
							<attribute key="device.variant" value="Cortex R.TMS570LC43xx"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>
	<contents name="Stellaris Cortex LM3S1xxx" desc="Stellaris Cortex LM3S1xxx" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="Stellaris LM3S1110" desc="Stellaris LM3S1110" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419664587558">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1110</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419664587558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1110"/>
							<attribute key="device.variant" value="Cortex M.LM3S1110"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419664587558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1110"/>
							<attribute key="device.variant" value="Cortex M.LM3S1110"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419664587558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1110"/>
							<attribute key="device.variant" value="Cortex M.LM3S1110"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419664891619">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1110</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419664891619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1110"/>
							<attribute key="device.variant" value="Cortex M.LM3S1110"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419664891619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1110"/>
							<attribute key="device.variant" value="Cortex M.LM3S1110"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419664891619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1110"/>
							<attribute key="device.variant" value="Cortex M.LM3S1110"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419664891619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1110"/>
							<attribute key="device.variant" value="Cortex M.LM3S1110"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419664891619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1110"/>
							<attribute key="device.variant" value="Cortex M.LM3S1110"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419664891619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1110"/>
							<attribute key="device.variant" value="Cortex M.LM3S1110"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419664891619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1110"/>
							<attribute key="device.variant" value="Cortex M.LM3S1110"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419664891619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1110"/>
							<attribute key="device.variant" value="Cortex M.LM3S1110"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419664891619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1110"/>
							<attribute key="device.variant" value="Cortex M.LM3S1110"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419664891619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1110"/>
							<attribute key="device.variant" value="Cortex M.LM3S1110"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419664891619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1110"/>
							<attribute key="device.variant" value="Cortex M.LM3S1110"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419664891619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1110"/>
							<attribute key="device.variant" value="Cortex M.LM3S1110"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1133" desc="Stellaris LM3S1133" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419666045428">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1133</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419666045428"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1133"/>
							<attribute key="device.variant" value="Cortex M.LM3S1133"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419666045428"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1133"/>
							<attribute key="device.variant" value="Cortex M.LM3S1133"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419666045428"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1133"/>
							<attribute key="device.variant" value="Cortex M.LM3S1133"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419666326397">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1133</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419666326397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1133"/>
							<attribute key="device.variant" value="Cortex M.LM3S1133"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419666326397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1133"/>
							<attribute key="device.variant" value="Cortex M.LM3S1133"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419666326397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1133"/>
							<attribute key="device.variant" value="Cortex M.LM3S1133"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419666326397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1133"/>
							<attribute key="device.variant" value="Cortex M.LM3S1133"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419666326397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1133"/>
							<attribute key="device.variant" value="Cortex M.LM3S1133"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419666326397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1133"/>
							<attribute key="device.variant" value="Cortex M.LM3S1133"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419666326397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1133"/>
							<attribute key="device.variant" value="Cortex M.LM3S1133"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419666326397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1133"/>
							<attribute key="device.variant" value="Cortex M.LM3S1133"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419666326397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1133"/>
							<attribute key="device.variant" value="Cortex M.LM3S1133"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419666326397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1133"/>
							<attribute key="device.variant" value="Cortex M.LM3S1133"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419666326397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1133"/>
							<attribute key="device.variant" value="Cortex M.LM3S1133"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419666326397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1133"/>
							<attribute key="device.variant" value="Cortex M.LM3S1133"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1138" desc="Stellaris LM3S1138" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419667456685">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1138</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419667456685"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1138"/>
							<attribute key="device.variant" value="Cortex M.LM3S1138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419667456685"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1138"/>
							<attribute key="device.variant" value="Cortex M.LM3S1138"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419667456685"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1138"/>
							<attribute key="device.variant" value="Cortex M.LM3S1138"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419667794531">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1138</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419667794531"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1138"/>
							<attribute key="device.variant" value="Cortex M.LM3S1138"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419667794531"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1138"/>
							<attribute key="device.variant" value="Cortex M.LM3S1138"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419667794531"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1138"/>
							<attribute key="device.variant" value="Cortex M.LM3S1138"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419667794531"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1138"/>
							<attribute key="device.variant" value="Cortex M.LM3S1138"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419667794531"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1138"/>
							<attribute key="device.variant" value="Cortex M.LM3S1138"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419667794531"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1138"/>
							<attribute key="device.variant" value="Cortex M.LM3S1138"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419667794531"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1138"/>
							<attribute key="device.variant" value="Cortex M.LM3S1138"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419667794531"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1138"/>
							<attribute key="device.variant" value="Cortex M.LM3S1138"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419667794531"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1138"/>
							<attribute key="device.variant" value="Cortex M.LM3S1138"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419667794531"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1138"/>
							<attribute key="device.variant" value="Cortex M.LM3S1138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419667794531"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1138"/>
							<attribute key="device.variant" value="Cortex M.LM3S1138"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419667794531"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1138"/>
							<attribute key="device.variant" value="Cortex M.LM3S1138"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1150" desc="Stellaris LM3S1150" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419672666787">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1150</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419672666787"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1150"/>
							<attribute key="device.variant" value="Cortex M.LM3S1150"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419672666787"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1150"/>
							<attribute key="device.variant" value="Cortex M.LM3S1150"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419672666787"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1150"/>
							<attribute key="device.variant" value="Cortex M.LM3S1150"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419672949038">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1150</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419672949038"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1150"/>
							<attribute key="device.variant" value="Cortex M.LM3S1150"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419672949038"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1150"/>
							<attribute key="device.variant" value="Cortex M.LM3S1150"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419672949038"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1150"/>
							<attribute key="device.variant" value="Cortex M.LM3S1150"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419672949038"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1150"/>
							<attribute key="device.variant" value="Cortex M.LM3S1150"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419672949038"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1150"/>
							<attribute key="device.variant" value="Cortex M.LM3S1150"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419672949038"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1150"/>
							<attribute key="device.variant" value="Cortex M.LM3S1150"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419672949038"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1150"/>
							<attribute key="device.variant" value="Cortex M.LM3S1150"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419672949038"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1150"/>
							<attribute key="device.variant" value="Cortex M.LM3S1150"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419672949038"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1150"/>
							<attribute key="device.variant" value="Cortex M.LM3S1150"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419672949038"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1150"/>
							<attribute key="device.variant" value="Cortex M.LM3S1150"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419672949038"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1150"/>
							<attribute key="device.variant" value="Cortex M.LM3S1150"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419672949038"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1150"/>
							<attribute key="device.variant" value="Cortex M.LM3S1150"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1162" desc="Stellaris LM3S1162" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419674126795">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1162</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419674126795"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1162"/>
							<attribute key="device.variant" value="Cortex M.LM3S1162"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419674126795"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1162"/>
							<attribute key="device.variant" value="Cortex M.LM3S1162"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419674126795"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1162"/>
							<attribute key="device.variant" value="Cortex M.LM3S1162"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419674393223">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1162</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419674393223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1162"/>
							<attribute key="device.variant" value="Cortex M.LM3S1162"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419674393223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1162"/>
							<attribute key="device.variant" value="Cortex M.LM3S1162"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419674393223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1162"/>
							<attribute key="device.variant" value="Cortex M.LM3S1162"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419674393223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1162"/>
							<attribute key="device.variant" value="Cortex M.LM3S1162"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419674393223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1162"/>
							<attribute key="device.variant" value="Cortex M.LM3S1162"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419674393223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1162"/>
							<attribute key="device.variant" value="Cortex M.LM3S1162"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419674393223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1162"/>
							<attribute key="device.variant" value="Cortex M.LM3S1162"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419674393223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1162"/>
							<attribute key="device.variant" value="Cortex M.LM3S1162"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419674393223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1162"/>
							<attribute key="device.variant" value="Cortex M.LM3S1162"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419674393223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1162"/>
							<attribute key="device.variant" value="Cortex M.LM3S1162"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419674393223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1162"/>
							<attribute key="device.variant" value="Cortex M.LM3S1162"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419674393223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1162"/>
							<attribute key="device.variant" value="Cortex M.LM3S1162"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1165" desc="Stellaris LM3S1165" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419675465778">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1165</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419675465778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1165"/>
							<attribute key="device.variant" value="Cortex M.LM3S1165"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419675465778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1165"/>
							<attribute key="device.variant" value="Cortex M.LM3S1165"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419675465778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1165"/>
							<attribute key="device.variant" value="Cortex M.LM3S1165"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419675850666">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1165</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419675850666"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1165"/>
							<attribute key="device.variant" value="Cortex M.LM3S1165"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419675850666"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1165"/>
							<attribute key="device.variant" value="Cortex M.LM3S1165"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419675850666"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1165"/>
							<attribute key="device.variant" value="Cortex M.LM3S1165"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419675850666"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1165"/>
							<attribute key="device.variant" value="Cortex M.LM3S1165"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419675850666"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1165"/>
							<attribute key="device.variant" value="Cortex M.LM3S1165"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419675850666"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1165"/>
							<attribute key="device.variant" value="Cortex M.LM3S1165"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419675850666"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1165"/>
							<attribute key="device.variant" value="Cortex M.LM3S1165"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419675850666"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1165"/>
							<attribute key="device.variant" value="Cortex M.LM3S1165"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419675850666"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1165"/>
							<attribute key="device.variant" value="Cortex M.LM3S1165"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419675850666"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1165"/>
							<attribute key="device.variant" value="Cortex M.LM3S1165"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419675850666"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1165"/>
							<attribute key="device.variant" value="Cortex M.LM3S1165"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419675850666"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1165"/>
							<attribute key="device.variant" value="Cortex M.LM3S1165"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1166" desc="Stellaris LM3S1166" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419676992074">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1166</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419676992074"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1166"/>
							<attribute key="device.variant" value="Cortex M.LM3S1166"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419676992074"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1166"/>
							<attribute key="device.variant" value="Cortex M.LM3S1166"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419676992074"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1166"/>
							<attribute key="device.variant" value="Cortex M.LM3S1166"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419677261495">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1166</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419677261495"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1166"/>
							<attribute key="device.variant" value="Cortex M.LM3S1166"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419677261495"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1166"/>
							<attribute key="device.variant" value="Cortex M.LM3S1166"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419677261495"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1166"/>
							<attribute key="device.variant" value="Cortex M.LM3S1166"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419677261495"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1166"/>
							<attribute key="device.variant" value="Cortex M.LM3S1166"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419677261495"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1166"/>
							<attribute key="device.variant" value="Cortex M.LM3S1166"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419677261495"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1166"/>
							<attribute key="device.variant" value="Cortex M.LM3S1166"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419677261495"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1166"/>
							<attribute key="device.variant" value="Cortex M.LM3S1166"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419677261495"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1166"/>
							<attribute key="device.variant" value="Cortex M.LM3S1166"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419677261495"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1166"/>
							<attribute key="device.variant" value="Cortex M.LM3S1166"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419677261495"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1166"/>
							<attribute key="device.variant" value="Cortex M.LM3S1166"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419677261495"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1166"/>
							<attribute key="device.variant" value="Cortex M.LM3S1166"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419677261495"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1166"/>
							<attribute key="device.variant" value="Cortex M.LM3S1166"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1332" desc="Stellaris LM3S1332" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419678384513">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1332</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419678384513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1332"/>
							<attribute key="device.variant" value="Cortex M.LM3S1332"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419678384513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1332"/>
							<attribute key="device.variant" value="Cortex M.LM3S1332"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419678384513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1332"/>
							<attribute key="device.variant" value="Cortex M.LM3S1332"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419678641533">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1332</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419678641533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1332"/>
							<attribute key="device.variant" value="Cortex M.LM3S1332"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419678641533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1332"/>
							<attribute key="device.variant" value="Cortex M.LM3S1332"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419678641533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1332"/>
							<attribute key="device.variant" value="Cortex M.LM3S1332"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419678641533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1332"/>
							<attribute key="device.variant" value="Cortex M.LM3S1332"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419678641533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1332"/>
							<attribute key="device.variant" value="Cortex M.LM3S1332"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419678641533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1332"/>
							<attribute key="device.variant" value="Cortex M.LM3S1332"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419678641533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1332"/>
							<attribute key="device.variant" value="Cortex M.LM3S1332"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419678641533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1332"/>
							<attribute key="device.variant" value="Cortex M.LM3S1332"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419678641533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1332"/>
							<attribute key="device.variant" value="Cortex M.LM3S1332"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419678641533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1332"/>
							<attribute key="device.variant" value="Cortex M.LM3S1332"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419678641533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1332"/>
							<attribute key="device.variant" value="Cortex M.LM3S1332"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419678641533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1332"/>
							<attribute key="device.variant" value="Cortex M.LM3S1332"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1435" desc="Stellaris LM3S1435" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419679838962">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1435</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419679838962"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1435"/>
							<attribute key="device.variant" value="Cortex M.LM3S1435"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419679838962"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1435"/>
							<attribute key="device.variant" value="Cortex M.LM3S1435"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419679838962"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1435"/>
							<attribute key="device.variant" value="Cortex M.LM3S1435"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419680109240">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1435</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419680109240"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1435"/>
							<attribute key="device.variant" value="Cortex M.LM3S1435"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419680109240"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1435"/>
							<attribute key="device.variant" value="Cortex M.LM3S1435"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419680109240"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1435"/>
							<attribute key="device.variant" value="Cortex M.LM3S1435"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419680109240"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1435"/>
							<attribute key="device.variant" value="Cortex M.LM3S1435"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419680109240"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1435"/>
							<attribute key="device.variant" value="Cortex M.LM3S1435"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419680109240"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1435"/>
							<attribute key="device.variant" value="Cortex M.LM3S1435"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419680109240"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1435"/>
							<attribute key="device.variant" value="Cortex M.LM3S1435"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419680109240"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1435"/>
							<attribute key="device.variant" value="Cortex M.LM3S1435"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419680109240"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1435"/>
							<attribute key="device.variant" value="Cortex M.LM3S1435"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419680109240"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1435"/>
							<attribute key="device.variant" value="Cortex M.LM3S1435"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419680109240"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1435"/>
							<attribute key="device.variant" value="Cortex M.LM3S1435"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419680109240"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1435"/>
							<attribute key="device.variant" value="Cortex M.LM3S1435"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1439" desc="Stellaris LM3S1439" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419681235251">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1439</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419681235251"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1439"/>
							<attribute key="device.variant" value="Cortex M.LM3S1439"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419681235251"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1439"/>
							<attribute key="device.variant" value="Cortex M.LM3S1439"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419681235251"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1439"/>
							<attribute key="device.variant" value="Cortex M.LM3S1439"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419681480724">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1439</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419681480724"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1439"/>
							<attribute key="device.variant" value="Cortex M.LM3S1439"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419681480724"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1439"/>
							<attribute key="device.variant" value="Cortex M.LM3S1439"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419681480724"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1439"/>
							<attribute key="device.variant" value="Cortex M.LM3S1439"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419681480724"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1439"/>
							<attribute key="device.variant" value="Cortex M.LM3S1439"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419681480724"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1439"/>
							<attribute key="device.variant" value="Cortex M.LM3S1439"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419681480724"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1439"/>
							<attribute key="device.variant" value="Cortex M.LM3S1439"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419681480724"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1439"/>
							<attribute key="device.variant" value="Cortex M.LM3S1439"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419681480724"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1439"/>
							<attribute key="device.variant" value="Cortex M.LM3S1439"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419681480724"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1439"/>
							<attribute key="device.variant" value="Cortex M.LM3S1439"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419681480724"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1439"/>
							<attribute key="device.variant" value="Cortex M.LM3S1439"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419681480724"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1439"/>
							<attribute key="device.variant" value="Cortex M.LM3S1439"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419681480724"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1439"/>
							<attribute key="device.variant" value="Cortex M.LM3S1439"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1512" desc="Stellaris LM3S1512" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419682554989">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1512</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419682554989"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1512"/>
							<attribute key="device.variant" value="Cortex M.LM3S1512"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419682554989"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1512"/>
							<attribute key="device.variant" value="Cortex M.LM3S1512"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419682554989"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1512"/>
							<attribute key="device.variant" value="Cortex M.LM3S1512"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419682786778">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1512</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419682786778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1512"/>
							<attribute key="device.variant" value="Cortex M.LM3S1512"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419682786778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1512"/>
							<attribute key="device.variant" value="Cortex M.LM3S1512"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419682786778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1512"/>
							<attribute key="device.variant" value="Cortex M.LM3S1512"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419682786778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1512"/>
							<attribute key="device.variant" value="Cortex M.LM3S1512"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419682786778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1512"/>
							<attribute key="device.variant" value="Cortex M.LM3S1512"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419682786778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1512"/>
							<attribute key="device.variant" value="Cortex M.LM3S1512"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419682786778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1512"/>
							<attribute key="device.variant" value="Cortex M.LM3S1512"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419682786778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1512"/>
							<attribute key="device.variant" value="Cortex M.LM3S1512"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419682786778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1512"/>
							<attribute key="device.variant" value="Cortex M.LM3S1512"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419682786778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1512"/>
							<attribute key="device.variant" value="Cortex M.LM3S1512"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419682786778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1512"/>
							<attribute key="device.variant" value="Cortex M.LM3S1512"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419682786778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1512"/>
							<attribute key="device.variant" value="Cortex M.LM3S1512"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1538" desc="Stellaris LM3S1538" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419687313917">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1538</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419687313917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1538"/>
							<attribute key="device.variant" value="Cortex M.LM3S1538"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419687313917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1538"/>
							<attribute key="device.variant" value="Cortex M.LM3S1538"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419687313917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1538"/>
							<attribute key="device.variant" value="Cortex M.LM3S1538"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419687570509">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1538</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419687570509"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1538"/>
							<attribute key="device.variant" value="Cortex M.LM3S1538"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419687570509"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1538"/>
							<attribute key="device.variant" value="Cortex M.LM3S1538"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419687570509"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1538"/>
							<attribute key="device.variant" value="Cortex M.LM3S1538"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419687570509"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1538"/>
							<attribute key="device.variant" value="Cortex M.LM3S1538"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419687570509"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1538"/>
							<attribute key="device.variant" value="Cortex M.LM3S1538"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419687570509"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1538"/>
							<attribute key="device.variant" value="Cortex M.LM3S1538"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419687570509"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1538"/>
							<attribute key="device.variant" value="Cortex M.LM3S1538"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419687570509"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1538"/>
							<attribute key="device.variant" value="Cortex M.LM3S1538"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419687570509"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1538"/>
							<attribute key="device.variant" value="Cortex M.LM3S1538"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419687570509"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1538"/>
							<attribute key="device.variant" value="Cortex M.LM3S1538"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419687570509"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1538"/>
							<attribute key="device.variant" value="Cortex M.LM3S1538"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419687570509"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1538"/>
							<attribute key="device.variant" value="Cortex M.LM3S1538"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1601" desc="Stellaris LM3S1601" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419688547270">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1601</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419688547270"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1601"/>
							<attribute key="device.variant" value="Cortex M.LM3S1601"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419688547270"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1601"/>
							<attribute key="device.variant" value="Cortex M.LM3S1601"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419688547270"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1601"/>
							<attribute key="device.variant" value="Cortex M.LM3S1601"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419688781624">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1601</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419688781624"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1601"/>
							<attribute key="device.variant" value="Cortex M.LM3S1601"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419688781624"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1601"/>
							<attribute key="device.variant" value="Cortex M.LM3S1601"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419688781624"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1601"/>
							<attribute key="device.variant" value="Cortex M.LM3S1601"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419688781624"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1601"/>
							<attribute key="device.variant" value="Cortex M.LM3S1601"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419688781624"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1601"/>
							<attribute key="device.variant" value="Cortex M.LM3S1601"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419688781624"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1601"/>
							<attribute key="device.variant" value="Cortex M.LM3S1601"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419688781624"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1601"/>
							<attribute key="device.variant" value="Cortex M.LM3S1601"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419688781624"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1601"/>
							<attribute key="device.variant" value="Cortex M.LM3S1601"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419688781624"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1601"/>
							<attribute key="device.variant" value="Cortex M.LM3S1601"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419688781624"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1601"/>
							<attribute key="device.variant" value="Cortex M.LM3S1601"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419688781624"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1601"/>
							<attribute key="device.variant" value="Cortex M.LM3S1601"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419688781624"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1601"/>
							<attribute key="device.variant" value="Cortex M.LM3S1601"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1607" desc="Stellaris LM3S1607" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419689707493">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1607</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419689707493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1607"/>
							<attribute key="device.variant" value="Cortex M.LM3S1607"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419689707493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1607"/>
							<attribute key="device.variant" value="Cortex M.LM3S1607"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419689707493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1607"/>
							<attribute key="device.variant" value="Cortex M.LM3S1607"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419689939281">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1607</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419689939281"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1607"/>
							<attribute key="device.variant" value="Cortex M.LM3S1607"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419689939281"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1607"/>
							<attribute key="device.variant" value="Cortex M.LM3S1607"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419689939281"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1607"/>
							<attribute key="device.variant" value="Cortex M.LM3S1607"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419689939281"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1607"/>
							<attribute key="device.variant" value="Cortex M.LM3S1607"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419689939281"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1607"/>
							<attribute key="device.variant" value="Cortex M.LM3S1607"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419689939281"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1607"/>
							<attribute key="device.variant" value="Cortex M.LM3S1607"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419689939281"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1607"/>
							<attribute key="device.variant" value="Cortex M.LM3S1607"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419689939281"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1607"/>
							<attribute key="device.variant" value="Cortex M.LM3S1607"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419689939281"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1607"/>
							<attribute key="device.variant" value="Cortex M.LM3S1607"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419689939281"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1607"/>
							<attribute key="device.variant" value="Cortex M.LM3S1607"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419689939281"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1607"/>
							<attribute key="device.variant" value="Cortex M.LM3S1607"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419689939281"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1607"/>
							<attribute key="device.variant" value="Cortex M.LM3S1607"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1608" desc="Stellaris LM3S1608" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419690856598">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1608</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419690856598"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1608"/>
							<attribute key="device.variant" value="Cortex M.LM3S1608"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419690856598"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1608"/>
							<attribute key="device.variant" value="Cortex M.LM3S1608"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419690856598"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1608"/>
							<attribute key="device.variant" value="Cortex M.LM3S1608"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419691128158">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1608</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419691128158"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1608"/>
							<attribute key="device.variant" value="Cortex M.LM3S1608"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419691128158"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1608"/>
							<attribute key="device.variant" value="Cortex M.LM3S1608"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419691128158"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1608"/>
							<attribute key="device.variant" value="Cortex M.LM3S1608"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419691128158"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1608"/>
							<attribute key="device.variant" value="Cortex M.LM3S1608"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419691128158"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1608"/>
							<attribute key="device.variant" value="Cortex M.LM3S1608"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419691128158"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1608"/>
							<attribute key="device.variant" value="Cortex M.LM3S1608"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419691128158"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1608"/>
							<attribute key="device.variant" value="Cortex M.LM3S1608"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419691128158"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1608"/>
							<attribute key="device.variant" value="Cortex M.LM3S1608"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419691128158"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1608"/>
							<attribute key="device.variant" value="Cortex M.LM3S1608"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419691128158"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1608"/>
							<attribute key="device.variant" value="Cortex M.LM3S1608"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419691128158"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1608"/>
							<attribute key="device.variant" value="Cortex M.LM3S1608"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419691128158"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1608"/>
							<attribute key="device.variant" value="Cortex M.LM3S1608"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1620" desc="Stellaris LM3S1620" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419692127156">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1620</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419692127156"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1620"/>
							<attribute key="device.variant" value="Cortex M.LM3S1620"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419692127156"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1620"/>
							<attribute key="device.variant" value="Cortex M.LM3S1620"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419692127156"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1620"/>
							<attribute key="device.variant" value="Cortex M.LM3S1620"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419692347826">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1620</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419692347826"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1620"/>
							<attribute key="device.variant" value="Cortex M.LM3S1620"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419692347826"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1620"/>
							<attribute key="device.variant" value="Cortex M.LM3S1620"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419692347826"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1620"/>
							<attribute key="device.variant" value="Cortex M.LM3S1620"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419692347826"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1620"/>
							<attribute key="device.variant" value="Cortex M.LM3S1620"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419692347826"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1620"/>
							<attribute key="device.variant" value="Cortex M.LM3S1620"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419692347826"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1620"/>
							<attribute key="device.variant" value="Cortex M.LM3S1620"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419692347826"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1620"/>
							<attribute key="device.variant" value="Cortex M.LM3S1620"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419692347826"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1620"/>
							<attribute key="device.variant" value="Cortex M.LM3S1620"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419692347826"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1620"/>
							<attribute key="device.variant" value="Cortex M.LM3S1620"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419692347826"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1620"/>
							<attribute key="device.variant" value="Cortex M.LM3S1620"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419692347826"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1620"/>
							<attribute key="device.variant" value="Cortex M.LM3S1620"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419692347826"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1620"/>
							<attribute key="device.variant" value="Cortex M.LM3S1620"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1621" desc="Stellaris LM3S1621" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419693398142">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1621</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419693398142"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1621"/>
							<attribute key="device.variant" value="Cortex M.LM3S1621"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419693398142"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1621"/>
							<attribute key="device.variant" value="Cortex M.LM3S1621"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419693398142"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1621"/>
							<attribute key="device.variant" value="Cortex M.LM3S1621"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419693640194">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1621</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419693640194"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1621"/>
							<attribute key="device.variant" value="Cortex M.LM3S1621"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419693640194"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1621"/>
							<attribute key="device.variant" value="Cortex M.LM3S1621"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419693640194"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1621"/>
							<attribute key="device.variant" value="Cortex M.LM3S1621"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419693640194"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1621"/>
							<attribute key="device.variant" value="Cortex M.LM3S1621"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419693640194"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1621"/>
							<attribute key="device.variant" value="Cortex M.LM3S1621"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419693640194"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1621"/>
							<attribute key="device.variant" value="Cortex M.LM3S1621"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419693640194"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1621"/>
							<attribute key="device.variant" value="Cortex M.LM3S1621"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419693640194"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1621"/>
							<attribute key="device.variant" value="Cortex M.LM3S1621"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419693640194"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1621"/>
							<attribute key="device.variant" value="Cortex M.LM3S1621"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419693640194"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1621"/>
							<attribute key="device.variant" value="Cortex M.LM3S1621"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419693640194"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1621"/>
							<attribute key="device.variant" value="Cortex M.LM3S1621"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419693640194"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1621"/>
							<attribute key="device.variant" value="Cortex M.LM3S1621"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1625" desc="Stellaris LM3S1625" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419694558794">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1625</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419694558794"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1625"/>
							<attribute key="device.variant" value="Cortex M.LM3S1625"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419694558794"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1625"/>
							<attribute key="device.variant" value="Cortex M.LM3S1625"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419694558794"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1625"/>
							<attribute key="device.variant" value="Cortex M.LM3S1625"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419694773476">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1625</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419694773476"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1625"/>
							<attribute key="device.variant" value="Cortex M.LM3S1625"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419694773476"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1625"/>
							<attribute key="device.variant" value="Cortex M.LM3S1625"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419694773476"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1625"/>
							<attribute key="device.variant" value="Cortex M.LM3S1625"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419694773476"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1625"/>
							<attribute key="device.variant" value="Cortex M.LM3S1625"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419694773476"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1625"/>
							<attribute key="device.variant" value="Cortex M.LM3S1625"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419694773476"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1625"/>
							<attribute key="device.variant" value="Cortex M.LM3S1625"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419694773476"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1625"/>
							<attribute key="device.variant" value="Cortex M.LM3S1625"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419694773476"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1625"/>
							<attribute key="device.variant" value="Cortex M.LM3S1625"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419694773476"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1625"/>
							<attribute key="device.variant" value="Cortex M.LM3S1625"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419694773476"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1625"/>
							<attribute key="device.variant" value="Cortex M.LM3S1625"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419694773476"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1625"/>
							<attribute key="device.variant" value="Cortex M.LM3S1625"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419694773476"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1625"/>
							<attribute key="device.variant" value="Cortex M.LM3S1625"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1626" desc="Stellaris LM3S1626" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419695669410">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1626</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419695669410"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1626"/>
							<attribute key="device.variant" value="Cortex M.LM3S1626"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419695669410"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1626"/>
							<attribute key="device.variant" value="Cortex M.LM3S1626"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419695669410"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1626"/>
							<attribute key="device.variant" value="Cortex M.LM3S1626"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419695883236">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1626</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419695883236"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1626"/>
							<attribute key="device.variant" value="Cortex M.LM3S1626"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419695883236"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1626"/>
							<attribute key="device.variant" value="Cortex M.LM3S1626"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419695883236"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1626"/>
							<attribute key="device.variant" value="Cortex M.LM3S1626"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419695883236"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1626"/>
							<attribute key="device.variant" value="Cortex M.LM3S1626"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419695883236"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1626"/>
							<attribute key="device.variant" value="Cortex M.LM3S1626"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419695883236"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1626"/>
							<attribute key="device.variant" value="Cortex M.LM3S1626"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419695883236"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1626"/>
							<attribute key="device.variant" value="Cortex M.LM3S1626"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419695883236"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1626"/>
							<attribute key="device.variant" value="Cortex M.LM3S1626"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419695883236"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1626"/>
							<attribute key="device.variant" value="Cortex M.LM3S1626"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419695883236"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1626"/>
							<attribute key="device.variant" value="Cortex M.LM3S1626"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419695883236"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1626"/>
							<attribute key="device.variant" value="Cortex M.LM3S1626"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419695883236"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1626"/>
							<attribute key="device.variant" value="Cortex M.LM3S1626"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1627" desc="Stellaris LM3S1627" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419696764630">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1627</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419696764630"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1627"/>
							<attribute key="device.variant" value="Cortex M.LM3S1627"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419696764630"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1627"/>
							<attribute key="device.variant" value="Cortex M.LM3S1627"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419696764630"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1627"/>
							<attribute key="device.variant" value="Cortex M.LM3S1627"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419696974608">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1627</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419696974608"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1627"/>
							<attribute key="device.variant" value="Cortex M.LM3S1627"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419696974608"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1627"/>
							<attribute key="device.variant" value="Cortex M.LM3S1627"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419696974608"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1627"/>
							<attribute key="device.variant" value="Cortex M.LM3S1627"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419696974608"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1627"/>
							<attribute key="device.variant" value="Cortex M.LM3S1627"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419696974608"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1627"/>
							<attribute key="device.variant" value="Cortex M.LM3S1627"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419696974608"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1627"/>
							<attribute key="device.variant" value="Cortex M.LM3S1627"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419696974608"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1627"/>
							<attribute key="device.variant" value="Cortex M.LM3S1627"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419696974608"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1627"/>
							<attribute key="device.variant" value="Cortex M.LM3S1627"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419696974608"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1627"/>
							<attribute key="device.variant" value="Cortex M.LM3S1627"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419696974608"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1627"/>
							<attribute key="device.variant" value="Cortex M.LM3S1627"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419696974608"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1627"/>
							<attribute key="device.variant" value="Cortex M.LM3S1627"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419696974608"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1627"/>
							<attribute key="device.variant" value="Cortex M.LM3S1627"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1635" desc="Stellaris LM3S1635" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419697862844">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1635</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419697862844"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1635"/>
							<attribute key="device.variant" value="Cortex M.LM3S1635"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419697862844"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1635"/>
							<attribute key="device.variant" value="Cortex M.LM3S1635"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419697862844"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1635"/>
							<attribute key="device.variant" value="Cortex M.LM3S1635"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419698075388">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1635</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419698075388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1635"/>
							<attribute key="device.variant" value="Cortex M.LM3S1635"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419698075388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1635"/>
							<attribute key="device.variant" value="Cortex M.LM3S1635"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419698075388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1635"/>
							<attribute key="device.variant" value="Cortex M.LM3S1635"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419698075388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1635"/>
							<attribute key="device.variant" value="Cortex M.LM3S1635"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419698075388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1635"/>
							<attribute key="device.variant" value="Cortex M.LM3S1635"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419698075388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1635"/>
							<attribute key="device.variant" value="Cortex M.LM3S1635"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419698075388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1635"/>
							<attribute key="device.variant" value="Cortex M.LM3S1635"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419698075388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1635"/>
							<attribute key="device.variant" value="Cortex M.LM3S1635"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419698075388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1635"/>
							<attribute key="device.variant" value="Cortex M.LM3S1635"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419698075388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1635"/>
							<attribute key="device.variant" value="Cortex M.LM3S1635"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419698075388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1635"/>
							<attribute key="device.variant" value="Cortex M.LM3S1635"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419698075388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1635"/>
							<attribute key="device.variant" value="Cortex M.LM3S1635"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1636" desc="Stellaris LM3S1636" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419702672235">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1636</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419702672235"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1636"/>
							<attribute key="device.variant" value="Cortex M.LM3S1636"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419702672235"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1636"/>
							<attribute key="device.variant" value="Cortex M.LM3S1636"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419702672235"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1636"/>
							<attribute key="device.variant" value="Cortex M.LM3S1636"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419702895898">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1636</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419702895898"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1636"/>
							<attribute key="device.variant" value="Cortex M.LM3S1636"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419702895898"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1636"/>
							<attribute key="device.variant" value="Cortex M.LM3S1636"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419702895898"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1636"/>
							<attribute key="device.variant" value="Cortex M.LM3S1636"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419702895898"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1636"/>
							<attribute key="device.variant" value="Cortex M.LM3S1636"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419702895898"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1636"/>
							<attribute key="device.variant" value="Cortex M.LM3S1636"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419702895898"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1636"/>
							<attribute key="device.variant" value="Cortex M.LM3S1636"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419702895898"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1636"/>
							<attribute key="device.variant" value="Cortex M.LM3S1636"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419702895898"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1636"/>
							<attribute key="device.variant" value="Cortex M.LM3S1636"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419702895898"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1636"/>
							<attribute key="device.variant" value="Cortex M.LM3S1636"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419702895898"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1636"/>
							<attribute key="device.variant" value="Cortex M.LM3S1636"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419702895898"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1636"/>
							<attribute key="device.variant" value="Cortex M.LM3S1636"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419702895898"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1636"/>
							<attribute key="device.variant" value="Cortex M.LM3S1636"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1637" desc="Stellaris LM3S1637" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419703779430">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1637</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419703779430"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1637"/>
							<attribute key="device.variant" value="Cortex M.LM3S1637"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419703779430"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1637"/>
							<attribute key="device.variant" value="Cortex M.LM3S1637"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419703779430"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1637"/>
							<attribute key="device.variant" value="Cortex M.LM3S1637"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419703989408">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1637</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419703989408"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1637"/>
							<attribute key="device.variant" value="Cortex M.LM3S1637"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419703989408"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1637"/>
							<attribute key="device.variant" value="Cortex M.LM3S1637"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419703989408"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1637"/>
							<attribute key="device.variant" value="Cortex M.LM3S1637"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419703989408"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1637"/>
							<attribute key="device.variant" value="Cortex M.LM3S1637"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419703989408"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1637"/>
							<attribute key="device.variant" value="Cortex M.LM3S1637"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419703989408"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1637"/>
							<attribute key="device.variant" value="Cortex M.LM3S1637"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419703989408"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1637"/>
							<attribute key="device.variant" value="Cortex M.LM3S1637"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419703989408"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1637"/>
							<attribute key="device.variant" value="Cortex M.LM3S1637"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419703989408"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1637"/>
							<attribute key="device.variant" value="Cortex M.LM3S1637"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419703989408"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1637"/>
							<attribute key="device.variant" value="Cortex M.LM3S1637"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419703989408"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1637"/>
							<attribute key="device.variant" value="Cortex M.LM3S1637"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419703989408"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1637"/>
							<attribute key="device.variant" value="Cortex M.LM3S1637"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1651" desc="Stellaris LM3S1651" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419704890046">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1651</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419704890046"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1651"/>
							<attribute key="device.variant" value="Cortex M.LM3S1651"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419704890046"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1651"/>
							<attribute key="device.variant" value="Cortex M.LM3S1651"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419704890046"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1651"/>
							<attribute key="device.variant" value="Cortex M.LM3S1651"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419705112425">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1651</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419705112425"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1651"/>
							<attribute key="device.variant" value="Cortex M.LM3S1651"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419705112425"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1651"/>
							<attribute key="device.variant" value="Cortex M.LM3S1651"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419705112425"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1651"/>
							<attribute key="device.variant" value="Cortex M.LM3S1651"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419705112425"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1651"/>
							<attribute key="device.variant" value="Cortex M.LM3S1651"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419705112425"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1651"/>
							<attribute key="device.variant" value="Cortex M.LM3S1651"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419705112425"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1651"/>
							<attribute key="device.variant" value="Cortex M.LM3S1651"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419705112425"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1651"/>
							<attribute key="device.variant" value="Cortex M.LM3S1651"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419705112425"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1651"/>
							<attribute key="device.variant" value="Cortex M.LM3S1651"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419705112425"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1651"/>
							<attribute key="device.variant" value="Cortex M.LM3S1651"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419705112425"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1651"/>
							<attribute key="device.variant" value="Cortex M.LM3S1651"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419705112425"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1651"/>
							<attribute key="device.variant" value="Cortex M.LM3S1651"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419705112425"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1651"/>
							<attribute key="device.variant" value="Cortex M.LM3S1651"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1751" desc="Stellaris LM3S1751" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419706007932">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1751</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419706007932"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1751"/>
							<attribute key="device.variant" value="Cortex M.LM3S1751"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419706007932"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1751"/>
							<attribute key="device.variant" value="Cortex M.LM3S1751"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419706007932"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1751"/>
							<attribute key="device.variant" value="Cortex M.LM3S1751"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419706226035">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1751</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419706226035"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1751"/>
							<attribute key="device.variant" value="Cortex M.LM3S1751"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419706226035"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1751"/>
							<attribute key="device.variant" value="Cortex M.LM3S1751"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419706226035"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1751"/>
							<attribute key="device.variant" value="Cortex M.LM3S1751"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419706226035"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1751"/>
							<attribute key="device.variant" value="Cortex M.LM3S1751"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419706226035"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1751"/>
							<attribute key="device.variant" value="Cortex M.LM3S1751"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419706226035"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1751"/>
							<attribute key="device.variant" value="Cortex M.LM3S1751"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419706226035"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1751"/>
							<attribute key="device.variant" value="Cortex M.LM3S1751"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419706226035"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1751"/>
							<attribute key="device.variant" value="Cortex M.LM3S1751"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419706226035"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1751"/>
							<attribute key="device.variant" value="Cortex M.LM3S1751"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419706226035"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1751"/>
							<attribute key="device.variant" value="Cortex M.LM3S1751"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419706226035"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1751"/>
							<attribute key="device.variant" value="Cortex M.LM3S1751"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419706226035"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1751"/>
							<attribute key="device.variant" value="Cortex M.LM3S1751"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1776" desc="Stellaris LM3S1776" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419707117692">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1776</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419707117692"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1776"/>
							<attribute key="device.variant" value="Cortex M.LM3S1776"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419707117692"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1776"/>
							<attribute key="device.variant" value="Cortex M.LM3S1776"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419707117692"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1776"/>
							<attribute key="device.variant" value="Cortex M.LM3S1776"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419707332374">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1776</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419707332374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1776"/>
							<attribute key="device.variant" value="Cortex M.LM3S1776"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419707332374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1776"/>
							<attribute key="device.variant" value="Cortex M.LM3S1776"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419707332374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1776"/>
							<attribute key="device.variant" value="Cortex M.LM3S1776"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419707332374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1776"/>
							<attribute key="device.variant" value="Cortex M.LM3S1776"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419707332374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1776"/>
							<attribute key="device.variant" value="Cortex M.LM3S1776"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419707332374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1776"/>
							<attribute key="device.variant" value="Cortex M.LM3S1776"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419707332374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1776"/>
							<attribute key="device.variant" value="Cortex M.LM3S1776"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419707332374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1776"/>
							<attribute key="device.variant" value="Cortex M.LM3S1776"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419707332374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1776"/>
							<attribute key="device.variant" value="Cortex M.LM3S1776"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419707332374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1776"/>
							<attribute key="device.variant" value="Cortex M.LM3S1776"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419707332374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1776"/>
							<attribute key="device.variant" value="Cortex M.LM3S1776"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419707332374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1776"/>
							<attribute key="device.variant" value="Cortex M.LM3S1776"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1811" desc="Stellaris LM3S1811" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419708304858">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1811</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419708304858"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1811"/>
							<attribute key="device.variant" value="Cortex M.LM3S1811"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419708304858"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1811"/>
							<attribute key="device.variant" value="Cortex M.LM3S1811"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419708304858"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1811"/>
							<attribute key="device.variant" value="Cortex M.LM3S1811"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419708527238">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1811</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419708527238"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1811"/>
							<attribute key="device.variant" value="Cortex M.LM3S1811"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419708527238"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1811"/>
							<attribute key="device.variant" value="Cortex M.LM3S1811"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419708527238"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1811"/>
							<attribute key="device.variant" value="Cortex M.LM3S1811"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419708527238"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1811"/>
							<attribute key="device.variant" value="Cortex M.LM3S1811"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419708527238"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1811"/>
							<attribute key="device.variant" value="Cortex M.LM3S1811"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419708527238"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1811"/>
							<attribute key="device.variant" value="Cortex M.LM3S1811"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419708527238"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1811"/>
							<attribute key="device.variant" value="Cortex M.LM3S1811"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419708527238"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1811"/>
							<attribute key="device.variant" value="Cortex M.LM3S1811"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419708527238"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1811"/>
							<attribute key="device.variant" value="Cortex M.LM3S1811"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419708527238"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1811"/>
							<attribute key="device.variant" value="Cortex M.LM3S1811"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419708527238"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1811"/>
							<attribute key="device.variant" value="Cortex M.LM3S1811"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419708527238"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1811"/>
							<attribute key="device.variant" value="Cortex M.LM3S1811"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1816" desc="Stellaris LM3S1816" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419709693449">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1816</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419709693449"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1816"/>
							<attribute key="device.variant" value="Cortex M.LM3S1816"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419709693449"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1816"/>
							<attribute key="device.variant" value="Cortex M.LM3S1816"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419709693449"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1816"/>
							<attribute key="device.variant" value="Cortex M.LM3S1816"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419709918822">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1816</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419709918822"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1816"/>
							<attribute key="device.variant" value="Cortex M.LM3S1816"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419709918822"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1816"/>
							<attribute key="device.variant" value="Cortex M.LM3S1816"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419709918822"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1816"/>
							<attribute key="device.variant" value="Cortex M.LM3S1816"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419709918822"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1816"/>
							<attribute key="device.variant" value="Cortex M.LM3S1816"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419709918822"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1816"/>
							<attribute key="device.variant" value="Cortex M.LM3S1816"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419709918822"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1816"/>
							<attribute key="device.variant" value="Cortex M.LM3S1816"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419709918822"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1816"/>
							<attribute key="device.variant" value="Cortex M.LM3S1816"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419709918822"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1816"/>
							<attribute key="device.variant" value="Cortex M.LM3S1816"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419709918822"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1816"/>
							<attribute key="device.variant" value="Cortex M.LM3S1816"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419709918822"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1816"/>
							<attribute key="device.variant" value="Cortex M.LM3S1816"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419709918822"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1816"/>
							<attribute key="device.variant" value="Cortex M.LM3S1816"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419709918822"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1816"/>
							<attribute key="device.variant" value="Cortex M.LM3S1816"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1850" desc="Stellaris LM3S1850" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419710908840">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1850</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419710908840"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1850"/>
							<attribute key="device.variant" value="Cortex M.LM3S1850"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419710908840"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1850"/>
							<attribute key="device.variant" value="Cortex M.LM3S1850"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419710908840"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1850"/>
							<attribute key="device.variant" value="Cortex M.LM3S1850"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419711118818">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1850</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419711118818"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1850"/>
							<attribute key="device.variant" value="Cortex M.LM3S1850"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419711118818"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1850"/>
							<attribute key="device.variant" value="Cortex M.LM3S1850"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419711118818"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1850"/>
							<attribute key="device.variant" value="Cortex M.LM3S1850"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419711118818"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1850"/>
							<attribute key="device.variant" value="Cortex M.LM3S1850"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419711118818"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1850"/>
							<attribute key="device.variant" value="Cortex M.LM3S1850"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419711118818"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1850"/>
							<attribute key="device.variant" value="Cortex M.LM3S1850"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419711118818"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1850"/>
							<attribute key="device.variant" value="Cortex M.LM3S1850"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419711118818"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1850"/>
							<attribute key="device.variant" value="Cortex M.LM3S1850"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419711118818"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1850"/>
							<attribute key="device.variant" value="Cortex M.LM3S1850"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419711118818"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1850"/>
							<attribute key="device.variant" value="Cortex M.LM3S1850"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419711118818"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1850"/>
							<attribute key="device.variant" value="Cortex M.LM3S1850"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419711118818"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1850"/>
							<attribute key="device.variant" value="Cortex M.LM3S1850"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1911" desc="Stellaris LM3S1911" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419711972414">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1911</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419711972414"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1911"/>
							<attribute key="device.variant" value="Cortex M.LM3S1911"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419711972414"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1911"/>
							<attribute key="device.variant" value="Cortex M.LM3S1911"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419711972414"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1911"/>
							<attribute key="device.variant" value="Cortex M.LM3S1911"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419712174694">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1911</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419712174694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1911"/>
							<attribute key="device.variant" value="Cortex M.LM3S1911"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419712174694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1911"/>
							<attribute key="device.variant" value="Cortex M.LM3S1911"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419712174694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1911"/>
							<attribute key="device.variant" value="Cortex M.LM3S1911"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419712174694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1911"/>
							<attribute key="device.variant" value="Cortex M.LM3S1911"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419712174694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1911"/>
							<attribute key="device.variant" value="Cortex M.LM3S1911"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419712174694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1911"/>
							<attribute key="device.variant" value="Cortex M.LM3S1911"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419712174694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1911"/>
							<attribute key="device.variant" value="Cortex M.LM3S1911"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419712174694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1911"/>
							<attribute key="device.variant" value="Cortex M.LM3S1911"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419712174694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1911"/>
							<attribute key="device.variant" value="Cortex M.LM3S1911"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419712174694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1911"/>
							<attribute key="device.variant" value="Cortex M.LM3S1911"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419712174694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1911"/>
							<attribute key="device.variant" value="Cortex M.LM3S1911"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419712174694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1911"/>
							<attribute key="device.variant" value="Cortex M.LM3S1911"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1918" desc="Stellaris LM3S1918" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419713008619">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1918</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419713008619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1918"/>
							<attribute key="device.variant" value="Cortex M.LM3S1918"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419713008619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1918"/>
							<attribute key="device.variant" value="Cortex M.LM3S1918"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419713008619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1918"/>
							<attribute key="device.variant" value="Cortex M.LM3S1918"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419713209616">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1918</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419713209616"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1918"/>
							<attribute key="device.variant" value="Cortex M.LM3S1918"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419713209616"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1918"/>
							<attribute key="device.variant" value="Cortex M.LM3S1918"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419713209616"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1918"/>
							<attribute key="device.variant" value="Cortex M.LM3S1918"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419713209616"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1918"/>
							<attribute key="device.variant" value="Cortex M.LM3S1918"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419713209616"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1918"/>
							<attribute key="device.variant" value="Cortex M.LM3S1918"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419713209616"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1918"/>
							<attribute key="device.variant" value="Cortex M.LM3S1918"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419713209616"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1918"/>
							<attribute key="device.variant" value="Cortex M.LM3S1918"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419713209616"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1918"/>
							<attribute key="device.variant" value="Cortex M.LM3S1918"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419713209616"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1918"/>
							<attribute key="device.variant" value="Cortex M.LM3S1918"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419713209616"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1918"/>
							<attribute key="device.variant" value="Cortex M.LM3S1918"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419713209616"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1918"/>
							<attribute key="device.variant" value="Cortex M.LM3S1918"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419713209616"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1918"/>
							<attribute key="device.variant" value="Cortex M.LM3S1918"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1937" desc="Stellaris LM3S1937" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419714032848">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1937</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419714032848"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1937"/>
							<attribute key="device.variant" value="Cortex M.LM3S1937"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419714032848"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1937"/>
							<attribute key="device.variant" value="Cortex M.LM3S1937"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419714032848"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1937"/>
							<attribute key="device.variant" value="Cortex M.LM3S1937"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419714230852">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1937</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419714230852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1937"/>
							<attribute key="device.variant" value="Cortex M.LM3S1937"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419714230852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1937"/>
							<attribute key="device.variant" value="Cortex M.LM3S1937"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419714230852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1937"/>
							<attribute key="device.variant" value="Cortex M.LM3S1937"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419714230852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1937"/>
							<attribute key="device.variant" value="Cortex M.LM3S1937"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419714230852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1937"/>
							<attribute key="device.variant" value="Cortex M.LM3S1937"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419714230852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1937"/>
							<attribute key="device.variant" value="Cortex M.LM3S1937"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419714230852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1937"/>
							<attribute key="device.variant" value="Cortex M.LM3S1937"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419714230852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1937"/>
							<attribute key="device.variant" value="Cortex M.LM3S1937"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419714230852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1937"/>
							<attribute key="device.variant" value="Cortex M.LM3S1937"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419714230852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1937"/>
							<attribute key="device.variant" value="Cortex M.LM3S1937"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419714230852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1937"/>
							<attribute key="device.variant" value="Cortex M.LM3S1937"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419714230852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1937"/>
							<attribute key="device.variant" value="Cortex M.LM3S1937"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1958" desc="Stellaris LM3S1958" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419718812731">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1958</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419718812731"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1958"/>
							<attribute key="device.variant" value="Cortex M.LM3S1958"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419718812731"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1958"/>
							<attribute key="device.variant" value="Cortex M.LM3S1958"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419718812731"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1958"/>
							<attribute key="device.variant" value="Cortex M.LM3S1958"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419719051789">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1958</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419719051789"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1958"/>
							<attribute key="device.variant" value="Cortex M.LM3S1958"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419719051789"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1958"/>
							<attribute key="device.variant" value="Cortex M.LM3S1958"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419719051789"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1958"/>
							<attribute key="device.variant" value="Cortex M.LM3S1958"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419719051789"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1958"/>
							<attribute key="device.variant" value="Cortex M.LM3S1958"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419719051789"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1958"/>
							<attribute key="device.variant" value="Cortex M.LM3S1958"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419719051789"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1958"/>
							<attribute key="device.variant" value="Cortex M.LM3S1958"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419719051789"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1958"/>
							<attribute key="device.variant" value="Cortex M.LM3S1958"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419719051789"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1958"/>
							<attribute key="device.variant" value="Cortex M.LM3S1958"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419719051789"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1958"/>
							<attribute key="device.variant" value="Cortex M.LM3S1958"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419719051789"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1958"/>
							<attribute key="device.variant" value="Cortex M.LM3S1958"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419719051789"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1958"/>
							<attribute key="device.variant" value="Cortex M.LM3S1958"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419719051789"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1958"/>
							<attribute key="device.variant" value="Cortex M.LM3S1958"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1960" desc="Stellaris LM3S1960" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419719912228">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1960</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419719912228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1960"/>
							<attribute key="device.variant" value="Cortex M.LM3S1960"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419719912228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1960"/>
							<attribute key="device.variant" value="Cortex M.LM3S1960"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419719912228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1960"/>
							<attribute key="device.variant" value="Cortex M.LM3S1960"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419720121778">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1960</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419720121778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1960"/>
							<attribute key="device.variant" value="Cortex M.LM3S1960"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419720121778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1960"/>
							<attribute key="device.variant" value="Cortex M.LM3S1960"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419720121778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1960"/>
							<attribute key="device.variant" value="Cortex M.LM3S1960"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419720121778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1960"/>
							<attribute key="device.variant" value="Cortex M.LM3S1960"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419720121778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1960"/>
							<attribute key="device.variant" value="Cortex M.LM3S1960"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419720121778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1960"/>
							<attribute key="device.variant" value="Cortex M.LM3S1960"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419720121778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1960"/>
							<attribute key="device.variant" value="Cortex M.LM3S1960"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419720121778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1960"/>
							<attribute key="device.variant" value="Cortex M.LM3S1960"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419720121778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1960"/>
							<attribute key="device.variant" value="Cortex M.LM3S1960"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419720121778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1960"/>
							<attribute key="device.variant" value="Cortex M.LM3S1960"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419720121778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1960"/>
							<attribute key="device.variant" value="Cortex M.LM3S1960"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419720121778"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1960"/>
							<attribute key="device.variant" value="Cortex M.LM3S1960"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1968" desc="Stellaris LM3S1968" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419720948860">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1968</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419720948860"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1968"/>
							<attribute key="device.variant" value="Cortex M.LM3S1968"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419720948860"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1968"/>
							<attribute key="device.variant" value="Cortex M.LM3S1968"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419720948860"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1968"/>
							<attribute key="device.variant" value="Cortex M.LM3S1968"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419721152851">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1968</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419721152851"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1968"/>
							<attribute key="device.variant" value="Cortex M.LM3S1968"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419721152851"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1968"/>
							<attribute key="device.variant" value="Cortex M.LM3S1968"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419721152851"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1968"/>
							<attribute key="device.variant" value="Cortex M.LM3S1968"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419721152851"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1968"/>
							<attribute key="device.variant" value="Cortex M.LM3S1968"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419721152851"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1968"/>
							<attribute key="device.variant" value="Cortex M.LM3S1968"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419721152851"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1968"/>
							<attribute key="device.variant" value="Cortex M.LM3S1968"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419721152851"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1968"/>
							<attribute key="device.variant" value="Cortex M.LM3S1968"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419721152851"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1968"/>
							<attribute key="device.variant" value="Cortex M.LM3S1968"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419721152851"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1968"/>
							<attribute key="device.variant" value="Cortex M.LM3S1968"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419721152851"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1968"/>
							<attribute key="device.variant" value="Cortex M.LM3S1968"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419721152851"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1968"/>
							<attribute key="device.variant" value="Cortex M.LM3S1968"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419721152851"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1968"/>
							<attribute key="device.variant" value="Cortex M.LM3S1968"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1969" desc="Stellaris LM3S1969" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419721961971">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1969</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419721961971"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1969"/>
							<attribute key="device.variant" value="Cortex M.LM3S1969"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419721961971"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1969"/>
							<attribute key="device.variant" value="Cortex M.LM3S1969"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419721961971"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1969"/>
							<attribute key="device.variant" value="Cortex M.LM3S1969"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419722165534">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1969</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419722165534"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1969"/>
							<attribute key="device.variant" value="Cortex M.LM3S1969"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419722165534"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1969"/>
							<attribute key="device.variant" value="Cortex M.LM3S1969"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419722165534"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1969"/>
							<attribute key="device.variant" value="Cortex M.LM3S1969"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419722165534"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1969"/>
							<attribute key="device.variant" value="Cortex M.LM3S1969"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419722165534"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1969"/>
							<attribute key="device.variant" value="Cortex M.LM3S1969"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419722165534"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1969"/>
							<attribute key="device.variant" value="Cortex M.LM3S1969"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419722165534"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1969"/>
							<attribute key="device.variant" value="Cortex M.LM3S1969"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419722165534"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1969"/>
							<attribute key="device.variant" value="Cortex M.LM3S1969"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419722165534"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1969"/>
							<attribute key="device.variant" value="Cortex M.LM3S1969"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419722165534"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1969"/>
							<attribute key="device.variant" value="Cortex M.LM3S1969"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419722165534"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1969"/>
							<attribute key="device.variant" value="Cortex M.LM3S1969"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419722165534"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1969"/>
							<attribute key="device.variant" value="Cortex M.LM3S1969"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1B21" desc="Stellaris LM3S1B21" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419722990478">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1B21</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419722990478"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1B21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1B21"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419722990478"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1B21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1B21"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419722990478"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1B21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1B21"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419723194468">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1B21</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419723194468"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1B21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1B21"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419723194468"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1B21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1B21"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419723194468"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1B21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1B21"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419723194468"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1B21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1B21"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419723194468"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1B21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1B21"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419723194468"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1B21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1B21"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419723194468"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1B21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1B21"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419723194468"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1B21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1B21"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419723194468"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1B21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1B21"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419723194468"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1B21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1B21"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419723194468"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1B21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1B21"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419723194468"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1B21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1B21"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1C21" desc="Stellaris LM3S1C21" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419724482133">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1C21</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419724482133"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1C21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C21"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419724482133"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1C21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C21"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419724482133"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1C21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C21"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419724698525">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1C21</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419724698525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1C21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C21"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419724698525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1C21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C21"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419724698525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1C21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C21"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419724698525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1C21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C21"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419724698525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1C21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C21"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419724698525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1C21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C21"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419724698525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1C21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C21"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419724698525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1C21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C21"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419724698525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1C21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C21"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419724698525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1C21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C21"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419724698525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1C21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C21"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419724698525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1C21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C21"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1C26" desc="Stellaris LM3S1C26" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419725732591">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1C26</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419725732591"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1C26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C26"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419725732591"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1C26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C26"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419725732591"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1C26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C26"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419725942141">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1C26</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419725942141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1C26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C26"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419725942141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1C26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C26"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419725942141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1C26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C26"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419725942141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1C26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C26"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419725942141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1C26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C26"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419725942141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1C26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C26"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419725942141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1C26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C26"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419725942141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1C26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C26"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419725942141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1C26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C26"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419725942141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1C26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C26"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419725942141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1C26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C26"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419725942141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1C26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C26"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1C58" desc="Stellaris LM3S1C58" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419726786757">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1C58</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419726786757"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1C58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C58"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419726786757"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1C58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C58"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419726786757"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1C58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C58"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419726996735">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1C58</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419726996735"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1C58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C58"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419726996735"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1C58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C58"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419726996735"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1C58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C58"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419726996735"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1C58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C58"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419726996735"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1C58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C58"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419726996735"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1C58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C58"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419726996735"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1C58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C58"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419726996735"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1C58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C58"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419726996735"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1C58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C58"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419726996735"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1C58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C58"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419726996735"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1C58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C58"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419726996735"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1C58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1C58"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1D21" desc="Stellaris LM3S1D21" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419727834080">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1D21</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419727834080"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1D21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D21"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419727834080"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1D21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D21"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419727834080"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1D21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D21"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419732430927">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1D21</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419732430927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1D21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D21"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419732430927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1D21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D21"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419732430927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1D21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D21"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419732430927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1D21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D21"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419732430927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1D21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D21"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419732430927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1D21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D21"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419732430927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1D21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D21"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419732430927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1D21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D21"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419732430927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1D21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D21"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419732430927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1D21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D21"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419732430927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1D21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D21"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419732430927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1D21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D21"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1D26" desc="Stellaris LM3S1D26" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419733394430">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1D26</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419733394430"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1D26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D26"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419733394430"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1D26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D26"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419733394430"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1D26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D26"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419733763923">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1D26</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419733763923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1D26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D26"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419733763923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1D26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D26"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419733763923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1D26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D26"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419733763923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1D26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D26"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419733763923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1D26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D26"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419733763923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1D26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D26"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419733763923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1D26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D26"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419733763923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1D26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D26"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419733763923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1D26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D26"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419733763923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1D26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D26"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419733763923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1D26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D26"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419733763923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1D26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1D26"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1F11" desc="Stellaris LM3S1F11" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419734705188">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1F11</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419734705188"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1F11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F11"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419734705188"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1F11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F11"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419734705188"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1F11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F11"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419734922008">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1F11</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419734922008"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1F11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F11"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419734922008"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1F11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F11"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419734922008"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1F11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F11"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419734922008"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1F11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F11"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419734922008"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1F11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F11"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419734922008"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1F11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F11"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419734922008"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1F11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F11"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419734922008"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1F11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F11"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419734922008"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1F11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F11"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419734922008"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1F11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F11"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419734922008"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1F11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F11"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419734922008"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1F11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F11"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1F16" desc="Stellaris LM3S1F16" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419735869261">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1F16</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419735869261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1F16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F16"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419735869261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1F16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F16"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419735869261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1F16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F16"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419736070258">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1F16</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419736070258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1F16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F16"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419736070258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1F16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F16"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419736070258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1F16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F16"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419736070258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1F16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F16"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419736070258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1F16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F16"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419736070258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1F16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F16"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419736070258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1F16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F16"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419736070258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1F16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F16"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419736070258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1F16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F16"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419736070258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1F16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F16"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419736070258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1F16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F16"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419736070258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1F16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1F16"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1G21" desc="Stellaris LM3S1G21" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419736890497">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1G21</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419736890497"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1G21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G21"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419736890497"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1G21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G21"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419736890497"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1G21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G21"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419737095343">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1G21</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419737095343"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1G21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G21"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419737095343"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1G21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G21"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419737095343"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1G21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G21"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419737095343"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1G21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G21"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419737095343"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1G21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G21"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419737095343"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1G21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G21"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419737095343"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1G21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G21"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419737095343"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1G21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G21"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419737095343"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1G21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G21"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419737095343"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1G21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G21"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419737095343"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1G21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G21"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419737095343"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1G21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G21"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1G58" desc="Stellaris LM3S1G58" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419737911734">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1G58</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419737911734"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1G58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G58"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419737911734"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1G58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G58"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419737911734"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1G58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G58"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419738102895">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1G58</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419738102895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1G58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G58"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419738102895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1G58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G58"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419738102895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1G58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G58"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419738102895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1G58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G58"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419738102895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1G58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G58"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419738102895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1G58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G58"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419738102895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1G58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G58"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419738102895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1G58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G58"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419738102895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1G58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G58"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419738102895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1G58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G58"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419738102895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1G58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G58"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419738102895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1G58"/>
							<attribute key="device.variant" value="Cortex M.LM3S1G58"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1H11" desc="Stellaris LM3S1H11" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419738911160">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1H11</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419738911160"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1H11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H11"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419738911160"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1H11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H11"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419738911160"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1H11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H11"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419739110446">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1H11</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419739110446"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1H11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H11"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419739110446"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1H11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H11"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419739110446"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1H11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H11"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419739110446"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1H11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H11"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419739110446"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1H11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H11"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419739110446"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1H11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H11"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419739110446"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1H11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H11"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419739110446"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1H11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H11"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419739110446"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1H11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H11"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419739110446"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1H11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H11"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419739110446"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1H11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H11"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419739110446"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1H11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H11"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1H16" desc="Stellaris LM3S1H16" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419740129544">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1H16</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419740129544"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1H16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H16"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419740129544"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1H16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H16"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419740129544"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1H16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H16"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419740340378">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1H16</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419740340378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1H16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H16"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419740340378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1H16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H16"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419740340378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1H16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H16"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419740340378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1H16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H16"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419740340378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1H16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H16"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419740340378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1H16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H16"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419740340378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1H16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H16"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419740340378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1H16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H16"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419740340378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1H16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H16"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419740340378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1H16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H16"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419740340378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1H16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H16"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419740340378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1H16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1H16"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1J11" desc="Stellaris LM3S1J11" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419741182427">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1J11</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419741182427"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1J11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J11"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419741182427"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1J11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J11"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419741182427"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1J11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J11"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419741382141">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1J11</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419741382141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1J11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J11"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419741382141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1J11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J11"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419741382141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1J11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J11"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419741382141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1J11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J11"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419741382141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1J11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J11"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419741382141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1J11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J11"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419741382141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1J11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J11"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419741382141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1J11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J11"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419741382141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1J11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J11"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419741382141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1J11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J11"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419741382141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1J11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J11"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419741382141"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1J11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J11"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1J16" desc="Stellaris LM3S1J16" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419742214355">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1J16</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419742214355"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1J16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J16"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419742214355"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1J16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J16"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419742214355"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1J16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J16"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419742417063">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1J16</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419742417063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1J16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J16"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419742417063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1J16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J16"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419742417063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1J16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J16"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419742417063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1J16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J16"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419742417063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1J16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J16"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419742417063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1J16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J16"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419742417063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1J16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J16"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419742417063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1J16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J16"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419742417063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1J16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J16"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419742417063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1J16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J16"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419742417063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1J16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J16"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419742417063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1J16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1J16"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1N11" desc="Stellaris LM3S1N11" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419743242006">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1N11</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419743242006"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1N11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N11"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419743242006"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1N11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N11"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419743242006"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1N11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N11"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419743447707">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1N11</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419743447707"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1N11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N11"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419743447707"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1N11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N11"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419743447707"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1N11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N11"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419743447707"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1N11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N11"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419743447707"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1N11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N11"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419743447707"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1N11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N11"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419743447707"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1N11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N11"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419743447707"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1N11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N11"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419743447707"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1N11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N11"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419743447707"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1N11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N11"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419743447707"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1N11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N11"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419743447707"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1N11"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N11"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1N16" desc="Stellaris LM3S1N16" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419748079622">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1N16</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419748079622"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1N16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N16"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419748079622"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1N16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N16"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419748079622"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1N16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N16"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419748327661">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1N16</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419748327661"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1N16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N16"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419748327661"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1N16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N16"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419748327661"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1N16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N16"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419748327661"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1N16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N16"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419748327661"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1N16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N16"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419748327661"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1N16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N16"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419748327661"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1N16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N16"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419748327661"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1N16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N16"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419748327661"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1N16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N16"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419748327661"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1N16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N16"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419748327661"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1N16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N16"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419748327661"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1N16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1N16"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1P51" desc="Stellaris LM3S1P51" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419749316823">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1P51</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419749316823"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S1P51"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419749316823"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S1P51"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419749316823"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S1P51"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419749537492">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1P51</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419749537492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S1P51"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419749537492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S1P51"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419749537492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S1P51"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419749537492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S1P51"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419749537492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S1P51"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419749537492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S1P51"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419749537492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S1P51"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419749537492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S1P51"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419749537492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S1P51"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419749537492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S1P51"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419749537492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S1P51"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419749537492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S1P51"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1R21" desc="Stellaris LM3S1R21" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419750377404">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1R21</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419750377404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1R21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R21"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419750377404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1R21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R21"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419750377404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1R21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R21"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419750588665">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1R21</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419750588665"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1R21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R21"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419750588665"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1R21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R21"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419750588665"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1R21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R21"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419750588665"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1R21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R21"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419750588665"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1R21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R21"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419750588665"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1R21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R21"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419750588665"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1R21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R21"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419750588665"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1R21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R21"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419750588665"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1R21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R21"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419750588665"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1R21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R21"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419750588665"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1R21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R21"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419750588665"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1R21"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R21"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1R26" desc="Stellaris LM3S1R26" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419751450814">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1R26</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419751450814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1R26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R26"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419751450814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1R26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R26"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419751450814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1R26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R26"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419751659936">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1R26</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419751659936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1R26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R26"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419751659936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1R26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R26"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419751659936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1R26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R26"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419751659936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1R26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R26"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419751659936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1R26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R26"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419751659936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1R26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R26"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419751659936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1R26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R26"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419751659936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1R26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R26"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419751659936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1R26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R26"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419751659936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1R26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R26"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419751659936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1R26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R26"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419751659936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1R26"/>
							<attribute key="device.variant" value="Cortex M.LM3S1R26"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1W16" desc="Stellaris LM3S1W16" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419752517809">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1W16</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419752517809"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1W16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1W16"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419752517809"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1W16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1W16"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419752517809"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1W16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1W16"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419752722228">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1W16</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419752722228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1W16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1W16"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419752722228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1W16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1W16"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419752722228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1W16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1W16"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419752722228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1W16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1W16"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419752722228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1W16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1W16"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419752722228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1W16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1W16"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419752722228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1W16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1W16"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419752722228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1W16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1W16"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419752722228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1W16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1W16"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419752722228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1W16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1W16"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419752722228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1W16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1W16"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419752722228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1W16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1W16"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S1Z16" desc="Stellaris LM3S1Z16" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419753583522">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1Z16</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419753583522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S1Z16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1Z16"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419753583522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S1Z16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1Z16"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419753583522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S1Z16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1Z16"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419753792216">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S1Z16</tag>
					<tag>Stellaris Cortex LM3S1xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419753792216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S1Z16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1Z16"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419753792216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S1Z16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1Z16"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419753792216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S1Z16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1Z16"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419753792216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S1Z16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1Z16"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419753792216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S1Z16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1Z16"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419753792216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S1Z16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1Z16"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419753792216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S1Z16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1Z16"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419753792216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S1Z16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1Z16"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419753792216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S1Z16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1Z16"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419753792216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S1Z16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1Z16"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419753792216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S1Z16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1Z16"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419753792216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S1Z16"/>
							<attribute key="device.variant" value="Cortex M.LM3S1Z16"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>
	<contents name="Stellaris Cortex LM3S2xxx" desc="Stellaris Cortex LM3S2xxx" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="Stellaris LM3S2110" desc="Stellaris LM3S2110" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419765386329">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2110</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419765386329"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2110"/>
							<attribute key="device.variant" value="Cortex M.LM3S2110"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419765386329"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2110"/>
							<attribute key="device.variant" value="Cortex M.LM3S2110"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419765386329"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2110"/>
							<attribute key="device.variant" value="Cortex M.LM3S2110"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419765629664">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2110</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419765629664"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2110"/>
							<attribute key="device.variant" value="Cortex M.LM3S2110"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419765629664"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2110"/>
							<attribute key="device.variant" value="Cortex M.LM3S2110"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419765629664"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2110"/>
							<attribute key="device.variant" value="Cortex M.LM3S2110"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419765629664"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2110"/>
							<attribute key="device.variant" value="Cortex M.LM3S2110"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419765629664"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2110"/>
							<attribute key="device.variant" value="Cortex M.LM3S2110"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419765629664"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2110"/>
							<attribute key="device.variant" value="Cortex M.LM3S2110"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419765629664"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2110"/>
							<attribute key="device.variant" value="Cortex M.LM3S2110"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419765629664"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2110"/>
							<attribute key="device.variant" value="Cortex M.LM3S2110"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419765629664"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2110"/>
							<attribute key="device.variant" value="Cortex M.LM3S2110"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419765629664"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2110"/>
							<attribute key="device.variant" value="Cortex M.LM3S2110"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419765629664"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2110"/>
							<attribute key="device.variant" value="Cortex M.LM3S2110"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419765629664"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2110"/>
							<attribute key="device.variant" value="Cortex M.LM3S2110"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2139" desc="Stellaris LM3S2139" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419776773885">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2139</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419776773885"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2139"/>
							<attribute key="device.variant" value="Cortex M.LM3S2139"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419776773885"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2139"/>
							<attribute key="device.variant" value="Cortex M.LM3S2139"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419776773885"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2139"/>
							<attribute key="device.variant" value="Cortex M.LM3S2139"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419777003107">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2139</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419777003107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2139"/>
							<attribute key="device.variant" value="Cortex M.LM3S2139"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419777003107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2139"/>
							<attribute key="device.variant" value="Cortex M.LM3S2139"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419777003107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2139"/>
							<attribute key="device.variant" value="Cortex M.LM3S2139"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419777003107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2139"/>
							<attribute key="device.variant" value="Cortex M.LM3S2139"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419777003107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2139"/>
							<attribute key="device.variant" value="Cortex M.LM3S2139"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419777003107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2139"/>
							<attribute key="device.variant" value="Cortex M.LM3S2139"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419777003107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2139"/>
							<attribute key="device.variant" value="Cortex M.LM3S2139"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419777003107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2139"/>
							<attribute key="device.variant" value="Cortex M.LM3S2139"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419777003107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2139"/>
							<attribute key="device.variant" value="Cortex M.LM3S2139"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419777003107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2139"/>
							<attribute key="device.variant" value="Cortex M.LM3S2139"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419777003107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2139"/>
							<attribute key="device.variant" value="Cortex M.LM3S2139"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419777003107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2139"/>
							<attribute key="device.variant" value="Cortex M.LM3S2139"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2276" desc="Stellaris LM3S2276" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419777927694">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2276</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419777927694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2276"/>
							<attribute key="device.variant" value="Cortex M.LM3S2276"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419777927694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2276"/>
							<attribute key="device.variant" value="Cortex M.LM3S2276"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419777927694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2276"/>
							<attribute key="device.variant" value="Cortex M.LM3S2276"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419778133395">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2276</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419778133395"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2276"/>
							<attribute key="device.variant" value="Cortex M.LM3S2276"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419778133395"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2276"/>
							<attribute key="device.variant" value="Cortex M.LM3S2276"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419778133395"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2276"/>
							<attribute key="device.variant" value="Cortex M.LM3S2276"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419778133395"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2276"/>
							<attribute key="device.variant" value="Cortex M.LM3S2276"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419778133395"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2276"/>
							<attribute key="device.variant" value="Cortex M.LM3S2276"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419778133395"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2276"/>
							<attribute key="device.variant" value="Cortex M.LM3S2276"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419778133395"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2276"/>
							<attribute key="device.variant" value="Cortex M.LM3S2276"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419778133395"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2276"/>
							<attribute key="device.variant" value="Cortex M.LM3S2276"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419778133395"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2276"/>
							<attribute key="device.variant" value="Cortex M.LM3S2276"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419778133395"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2276"/>
							<attribute key="device.variant" value="Cortex M.LM3S2276"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419778133395"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2276"/>
							<attribute key="device.variant" value="Cortex M.LM3S2276"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419778133395"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2276"/>
							<attribute key="device.variant" value="Cortex M.LM3S2276"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2410" desc="Stellaris LM3S2410" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419778952351">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2410</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419778952351"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2410"/>
							<attribute key="device.variant" value="Cortex M.LM3S2410"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419778952351"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2410"/>
							<attribute key="device.variant" value="Cortex M.LM3S2410"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419778952351"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2410"/>
							<attribute key="device.variant" value="Cortex M.LM3S2410"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419779469384">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2410</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419779469384"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2410"/>
							<attribute key="device.variant" value="Cortex M.LM3S2410"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419779469384"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2410"/>
							<attribute key="device.variant" value="Cortex M.LM3S2410"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419779469384"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2410"/>
							<attribute key="device.variant" value="Cortex M.LM3S2410"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419779469384"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2410"/>
							<attribute key="device.variant" value="Cortex M.LM3S2410"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419779469384"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2410"/>
							<attribute key="device.variant" value="Cortex M.LM3S2410"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419779469384"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2410"/>
							<attribute key="device.variant" value="Cortex M.LM3S2410"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419779469384"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2410"/>
							<attribute key="device.variant" value="Cortex M.LM3S2410"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419779469384"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2410"/>
							<attribute key="device.variant" value="Cortex M.LM3S2410"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419779469384"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2410"/>
							<attribute key="device.variant" value="Cortex M.LM3S2410"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419779469384"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2410"/>
							<attribute key="device.variant" value="Cortex M.LM3S2410"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419779469384"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2410"/>
							<attribute key="device.variant" value="Cortex M.LM3S2410"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419779469384"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2410"/>
							<attribute key="device.variant" value="Cortex M.LM3S2410"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2412" desc="Stellaris LM3S2412" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419781018345">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2412</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419781018345"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2412"/>
							<attribute key="device.variant" value="Cortex M.LM3S2412"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419781018345"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2412"/>
							<attribute key="device.variant" value="Cortex M.LM3S2412"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419781018345"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2412"/>
							<attribute key="device.variant" value="Cortex M.LM3S2412"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419781329677">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2412</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419781329677"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2412"/>
							<attribute key="device.variant" value="Cortex M.LM3S2412"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419781329677"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2412"/>
							<attribute key="device.variant" value="Cortex M.LM3S2412"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419781329677"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2412"/>
							<attribute key="device.variant" value="Cortex M.LM3S2412"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419781329677"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2412"/>
							<attribute key="device.variant" value="Cortex M.LM3S2412"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419781329677"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2412"/>
							<attribute key="device.variant" value="Cortex M.LM3S2412"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419781329677"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2412"/>
							<attribute key="device.variant" value="Cortex M.LM3S2412"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419781329677"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2412"/>
							<attribute key="device.variant" value="Cortex M.LM3S2412"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419781329677"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2412"/>
							<attribute key="device.variant" value="Cortex M.LM3S2412"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419781329677"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2412"/>
							<attribute key="device.variant" value="Cortex M.LM3S2412"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419781329677"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2412"/>
							<attribute key="device.variant" value="Cortex M.LM3S2412"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419781329677"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2412"/>
							<attribute key="device.variant" value="Cortex M.LM3S2412"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419781329677"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2412"/>
							<attribute key="device.variant" value="Cortex M.LM3S2412"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2432" desc="Stellaris LM3S2432" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419782207649">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2432</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419782207649"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2432"/>
							<attribute key="device.variant" value="Cortex M.LM3S2432"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419782207649"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2432"/>
							<attribute key="device.variant" value="Cortex M.LM3S2432"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419782207649"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2432"/>
							<attribute key="device.variant" value="Cortex M.LM3S2432"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419782406081">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2432</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419782406081"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2432"/>
							<attribute key="device.variant" value="Cortex M.LM3S2432"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419782406081"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2432"/>
							<attribute key="device.variant" value="Cortex M.LM3S2432"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419782406081"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2432"/>
							<attribute key="device.variant" value="Cortex M.LM3S2432"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419782406081"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2432"/>
							<attribute key="device.variant" value="Cortex M.LM3S2432"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419782406081"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2432"/>
							<attribute key="device.variant" value="Cortex M.LM3S2432"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419782406081"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2432"/>
							<attribute key="device.variant" value="Cortex M.LM3S2432"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419782406081"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2432"/>
							<attribute key="device.variant" value="Cortex M.LM3S2432"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419782406081"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2432"/>
							<attribute key="device.variant" value="Cortex M.LM3S2432"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419782406081"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2432"/>
							<attribute key="device.variant" value="Cortex M.LM3S2432"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419782406081"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2432"/>
							<attribute key="device.variant" value="Cortex M.LM3S2432"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419782406081"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2432"/>
							<attribute key="device.variant" value="Cortex M.LM3S2432"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419782406081"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2432"/>
							<attribute key="device.variant" value="Cortex M.LM3S2432"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2533" desc="Stellaris LM3S2533" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419783396098">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2533</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419783396098"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2533"/>
							<attribute key="device.variant" value="Cortex M.LM3S2533"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419783396098"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2533"/>
							<attribute key="device.variant" value="Cortex M.LM3S2533"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419783396098"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2533"/>
							<attribute key="device.variant" value="Cortex M.LM3S2533"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419783603938">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2533</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419783603938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2533"/>
							<attribute key="device.variant" value="Cortex M.LM3S2533"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419783603938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2533"/>
							<attribute key="device.variant" value="Cortex M.LM3S2533"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419783603938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2533"/>
							<attribute key="device.variant" value="Cortex M.LM3S2533"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419783603938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2533"/>
							<attribute key="device.variant" value="Cortex M.LM3S2533"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419783603938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2533"/>
							<attribute key="device.variant" value="Cortex M.LM3S2533"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419783603938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2533"/>
							<attribute key="device.variant" value="Cortex M.LM3S2533"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419783603938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2533"/>
							<attribute key="device.variant" value="Cortex M.LM3S2533"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419783603938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2533"/>
							<attribute key="device.variant" value="Cortex M.LM3S2533"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419783603938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2533"/>
							<attribute key="device.variant" value="Cortex M.LM3S2533"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419783603938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2533"/>
							<attribute key="device.variant" value="Cortex M.LM3S2533"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419783603938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2533"/>
							<attribute key="device.variant" value="Cortex M.LM3S2533"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419783603938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2533"/>
							<attribute key="device.variant" value="Cortex M.LM3S2533"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2601" desc="Stellaris LM3S2601" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419784419473">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2601</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419784419473"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2601"/>
							<attribute key="device.variant" value="Cortex M.LM3S2601"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419784419473"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2601"/>
							<attribute key="device.variant" value="Cortex M.LM3S2601"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419784419473"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2601"/>
							<attribute key="device.variant" value="Cortex M.LM3S2601"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419784611489">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2601</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419784611489"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2601"/>
							<attribute key="device.variant" value="Cortex M.LM3S2601"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419784611489"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2601"/>
							<attribute key="device.variant" value="Cortex M.LM3S2601"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419784611489"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2601"/>
							<attribute key="device.variant" value="Cortex M.LM3S2601"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419784611489"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2601"/>
							<attribute key="device.variant" value="Cortex M.LM3S2601"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419784611489"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2601"/>
							<attribute key="device.variant" value="Cortex M.LM3S2601"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419784611489"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2601"/>
							<attribute key="device.variant" value="Cortex M.LM3S2601"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419784611489"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2601"/>
							<attribute key="device.variant" value="Cortex M.LM3S2601"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419784611489"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2601"/>
							<attribute key="device.variant" value="Cortex M.LM3S2601"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419784611489"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2601"/>
							<attribute key="device.variant" value="Cortex M.LM3S2601"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419784611489"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2601"/>
							<attribute key="device.variant" value="Cortex M.LM3S2601"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419784611489"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2601"/>
							<attribute key="device.variant" value="Cortex M.LM3S2601"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419784611489"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2601"/>
							<attribute key="device.variant" value="Cortex M.LM3S2601"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2608" desc="Stellaris LM3S2608" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419785498442">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2608</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419785498442"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2608"/>
							<attribute key="device.variant" value="Cortex M.LM3S2608"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419785498442"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2608"/>
							<attribute key="device.variant" value="Cortex M.LM3S2608"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419785498442"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2608"/>
							<attribute key="device.variant" value="Cortex M.LM3S2608"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419785693880">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2608</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419785693880"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2608"/>
							<attribute key="device.variant" value="Cortex M.LM3S2608"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419785693880"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2608"/>
							<attribute key="device.variant" value="Cortex M.LM3S2608"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419785693880"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2608"/>
							<attribute key="device.variant" value="Cortex M.LM3S2608"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419785693880"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2608"/>
							<attribute key="device.variant" value="Cortex M.LM3S2608"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419785693880"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2608"/>
							<attribute key="device.variant" value="Cortex M.LM3S2608"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419785693880"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2608"/>
							<attribute key="device.variant" value="Cortex M.LM3S2608"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419785693880"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2608"/>
							<attribute key="device.variant" value="Cortex M.LM3S2608"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419785693880"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2608"/>
							<attribute key="device.variant" value="Cortex M.LM3S2608"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419785693880"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2608"/>
							<attribute key="device.variant" value="Cortex M.LM3S2608"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419785693880"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2608"/>
							<attribute key="device.variant" value="Cortex M.LM3S2608"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419785693880"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2608"/>
							<attribute key="device.variant" value="Cortex M.LM3S2608"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419785693880"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2608"/>
							<attribute key="device.variant" value="Cortex M.LM3S2608"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2616" desc="Stellaris LM3S2616" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419786624026">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2616</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419786624026"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2616"/>
							<attribute key="device.variant" value="Cortex M.LM3S2616"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419786624026"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2616"/>
							<attribute key="device.variant" value="Cortex M.LM3S2616"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419786624026"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2616"/>
							<attribute key="device.variant" value="Cortex M.LM3S2616"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419792034270">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2616</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419792034270"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2616"/>
							<attribute key="device.variant" value="Cortex M.LM3S2616"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419792034270"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2616"/>
							<attribute key="device.variant" value="Cortex M.LM3S2616"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419792034270"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2616"/>
							<attribute key="device.variant" value="Cortex M.LM3S2616"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419792034270"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2616"/>
							<attribute key="device.variant" value="Cortex M.LM3S2616"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419792034270"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2616"/>
							<attribute key="device.variant" value="Cortex M.LM3S2616"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419792034270"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2616"/>
							<attribute key="device.variant" value="Cortex M.LM3S2616"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419792034270"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2616"/>
							<attribute key="device.variant" value="Cortex M.LM3S2616"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419792034270"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2616"/>
							<attribute key="device.variant" value="Cortex M.LM3S2616"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419792034270"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2616"/>
							<attribute key="device.variant" value="Cortex M.LM3S2616"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419792034270"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2616"/>
							<attribute key="device.variant" value="Cortex M.LM3S2616"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419792034270"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2616"/>
							<attribute key="device.variant" value="Cortex M.LM3S2616"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419792034270"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2616"/>
							<attribute key="device.variant" value="Cortex M.LM3S2616"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2620" desc="Stellaris LM3S2620" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419792866056">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2620</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419792866056"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2620"/>
							<attribute key="device.variant" value="Cortex M.LM3S2620"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419792866056"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2620"/>
							<attribute key="device.variant" value="Cortex M.LM3S2620"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419792866056"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2620"/>
							<attribute key="device.variant" value="Cortex M.LM3S2620"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419793067481">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2620</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419793067481"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2620"/>
							<attribute key="device.variant" value="Cortex M.LM3S2620"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419793067481"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2620"/>
							<attribute key="device.variant" value="Cortex M.LM3S2620"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419793067481"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2620"/>
							<attribute key="device.variant" value="Cortex M.LM3S2620"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419793067481"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2620"/>
							<attribute key="device.variant" value="Cortex M.LM3S2620"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419793067481"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2620"/>
							<attribute key="device.variant" value="Cortex M.LM3S2620"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419793067481"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2620"/>
							<attribute key="device.variant" value="Cortex M.LM3S2620"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419793067481"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2620"/>
							<attribute key="device.variant" value="Cortex M.LM3S2620"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419793067481"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2620"/>
							<attribute key="device.variant" value="Cortex M.LM3S2620"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419793067481"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2620"/>
							<attribute key="device.variant" value="Cortex M.LM3S2620"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419793067481"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2620"/>
							<attribute key="device.variant" value="Cortex M.LM3S2620"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419793067481"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2620"/>
							<attribute key="device.variant" value="Cortex M.LM3S2620"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419793067481"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2620"/>
							<attribute key="device.variant" value="Cortex M.LM3S2620"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2637" desc="Stellaris LM3S2637" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419793859923">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2637</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419793859923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2637"/>
							<attribute key="device.variant" value="Cortex M.LM3S2637"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419793859923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2637"/>
							<attribute key="device.variant" value="Cortex M.LM3S2637"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419793859923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2637"/>
							<attribute key="device.variant" value="Cortex M.LM3S2637"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419794050228">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2637</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419794050228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2637"/>
							<attribute key="device.variant" value="Cortex M.LM3S2637"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419794050228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2637"/>
							<attribute key="device.variant" value="Cortex M.LM3S2637"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419794050228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2637"/>
							<attribute key="device.variant" value="Cortex M.LM3S2637"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419794050228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2637"/>
							<attribute key="device.variant" value="Cortex M.LM3S2637"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419794050228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2637"/>
							<attribute key="device.variant" value="Cortex M.LM3S2637"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419794050228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2637"/>
							<attribute key="device.variant" value="Cortex M.LM3S2637"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419794050228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2637"/>
							<attribute key="device.variant" value="Cortex M.LM3S2637"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419794050228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2637"/>
							<attribute key="device.variant" value="Cortex M.LM3S2637"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419794050228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2637"/>
							<attribute key="device.variant" value="Cortex M.LM3S2637"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419794050228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2637"/>
							<attribute key="device.variant" value="Cortex M.LM3S2637"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419794050228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2637"/>
							<attribute key="device.variant" value="Cortex M.LM3S2637"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419794050228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2637"/>
							<attribute key="device.variant" value="Cortex M.LM3S2637"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2651" desc="Stellaris LM3S2651" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419794833262">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2651</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419794833262"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2651"/>
							<attribute key="device.variant" value="Cortex M.LM3S2651"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419794833262"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2651"/>
							<attribute key="device.variant" value="Cortex M.LM3S2651"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419794833262"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2651"/>
							<attribute key="device.variant" value="Cortex M.LM3S2651"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419795033404">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2651</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419795033404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2651"/>
							<attribute key="device.variant" value="Cortex M.LM3S2651"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419795033404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2651"/>
							<attribute key="device.variant" value="Cortex M.LM3S2651"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419795033404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2651"/>
							<attribute key="device.variant" value="Cortex M.LM3S2651"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419795033404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2651"/>
							<attribute key="device.variant" value="Cortex M.LM3S2651"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419795033404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2651"/>
							<attribute key="device.variant" value="Cortex M.LM3S2651"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419795033404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2651"/>
							<attribute key="device.variant" value="Cortex M.LM3S2651"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419795033404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2651"/>
							<attribute key="device.variant" value="Cortex M.LM3S2651"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419795033404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2651"/>
							<attribute key="device.variant" value="Cortex M.LM3S2651"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419795033404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2651"/>
							<attribute key="device.variant" value="Cortex M.LM3S2651"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419795033404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2651"/>
							<attribute key="device.variant" value="Cortex M.LM3S2651"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419795033404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2651"/>
							<attribute key="device.variant" value="Cortex M.LM3S2651"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419795033404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2651"/>
							<attribute key="device.variant" value="Cortex M.LM3S2651"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2671" desc="Stellaris LM3S2671" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419795835682">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2671</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419795835682"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2671"/>
							<attribute key="device.variant" value="Cortex M.LM3S2671"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419795835682"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2671"/>
							<attribute key="device.variant" value="Cortex M.LM3S2671"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419795835682"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2671"/>
							<attribute key="device.variant" value="Cortex M.LM3S2671"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419796076878">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2671</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419796076878"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2671"/>
							<attribute key="device.variant" value="Cortex M.LM3S2671"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419796076878"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2671"/>
							<attribute key="device.variant" value="Cortex M.LM3S2671"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419796076878"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2671"/>
							<attribute key="device.variant" value="Cortex M.LM3S2671"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419796076878"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2671"/>
							<attribute key="device.variant" value="Cortex M.LM3S2671"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419796076878"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2671"/>
							<attribute key="device.variant" value="Cortex M.LM3S2671"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419796076878"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2671"/>
							<attribute key="device.variant" value="Cortex M.LM3S2671"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419796076878"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2671"/>
							<attribute key="device.variant" value="Cortex M.LM3S2671"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419796076878"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2671"/>
							<attribute key="device.variant" value="Cortex M.LM3S2671"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419796076878"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2671"/>
							<attribute key="device.variant" value="Cortex M.LM3S2671"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419796076878"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2671"/>
							<attribute key="device.variant" value="Cortex M.LM3S2671"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419796076878"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2671"/>
							<attribute key="device.variant" value="Cortex M.LM3S2671"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419796076878"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2671"/>
							<attribute key="device.variant" value="Cortex M.LM3S2671"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2678" desc="Stellaris LM3S2678" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419796912941">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2678</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419796912941"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2678"/>
							<attribute key="device.variant" value="Cortex M.LM3S2678"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419796912941"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2678"/>
							<attribute key="device.variant" value="Cortex M.LM3S2678"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419796912941"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2678"/>
							<attribute key="device.variant" value="Cortex M.LM3S2678"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419797117787">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2678</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419797117787"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2678"/>
							<attribute key="device.variant" value="Cortex M.LM3S2678"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419797117787"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2678"/>
							<attribute key="device.variant" value="Cortex M.LM3S2678"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419797117787"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2678"/>
							<attribute key="device.variant" value="Cortex M.LM3S2678"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419797117787"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2678"/>
							<attribute key="device.variant" value="Cortex M.LM3S2678"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419797117787"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2678"/>
							<attribute key="device.variant" value="Cortex M.LM3S2678"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419797117787"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2678"/>
							<attribute key="device.variant" value="Cortex M.LM3S2678"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419797117787"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2678"/>
							<attribute key="device.variant" value="Cortex M.LM3S2678"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419797117787"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2678"/>
							<attribute key="device.variant" value="Cortex M.LM3S2678"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419797117787"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2678"/>
							<attribute key="device.variant" value="Cortex M.LM3S2678"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419797117787"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2678"/>
							<attribute key="device.variant" value="Cortex M.LM3S2678"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419797117787"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2678"/>
							<attribute key="device.variant" value="Cortex M.LM3S2678"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419797117787"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2678"/>
							<attribute key="device.variant" value="Cortex M.LM3S2678"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2730" desc="Stellaris LM3S2730" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419797710514">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2730</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419797710514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2730"/>
							<attribute key="device.variant" value="Cortex M.LM3S2730"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419797710514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2730"/>
							<attribute key="device.variant" value="Cortex M.LM3S2730"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419797710514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2730"/>
							<attribute key="device.variant" value="Cortex M.LM3S2730"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419797825981">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2730</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419797825981"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2730"/>
							<attribute key="device.variant" value="Cortex M.LM3S2730"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419797825981"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2730"/>
							<attribute key="device.variant" value="Cortex M.LM3S2730"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419797825981"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2730"/>
							<attribute key="device.variant" value="Cortex M.LM3S2730"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419797825981"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2730"/>
							<attribute key="device.variant" value="Cortex M.LM3S2730"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419797825981"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2730"/>
							<attribute key="device.variant" value="Cortex M.LM3S2730"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419797825981"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2730"/>
							<attribute key="device.variant" value="Cortex M.LM3S2730"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419797825981"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2730"/>
							<attribute key="device.variant" value="Cortex M.LM3S2730"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419797825981"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2730"/>
							<attribute key="device.variant" value="Cortex M.LM3S2730"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419797825981"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2730"/>
							<attribute key="device.variant" value="Cortex M.LM3S2730"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419797825981"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2730"/>
							<attribute key="device.variant" value="Cortex M.LM3S2730"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419797825981"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2730"/>
							<attribute key="device.variant" value="Cortex M.LM3S2730"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419797825981"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2730"/>
							<attribute key="device.variant" value="Cortex M.LM3S2730"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2739" desc="Stellaris LM3S2739" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419798402030">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2739</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419798402030"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2739"/>
							<attribute key="device.variant" value="Cortex M.LM3S2739"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419798402030"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2739"/>
							<attribute key="device.variant" value="Cortex M.LM3S2739"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419798402030"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2739"/>
							<attribute key="device.variant" value="Cortex M.LM3S2739"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419798520490">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2739</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419798520490"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2739"/>
							<attribute key="device.variant" value="Cortex M.LM3S2739"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419798520490"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2739"/>
							<attribute key="device.variant" value="Cortex M.LM3S2739"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419798520490"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2739"/>
							<attribute key="device.variant" value="Cortex M.LM3S2739"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419798520490"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2739"/>
							<attribute key="device.variant" value="Cortex M.LM3S2739"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419798520490"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2739"/>
							<attribute key="device.variant" value="Cortex M.LM3S2739"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419798520490"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2739"/>
							<attribute key="device.variant" value="Cortex M.LM3S2739"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419798520490"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2739"/>
							<attribute key="device.variant" value="Cortex M.LM3S2739"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419798520490"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2739"/>
							<attribute key="device.variant" value="Cortex M.LM3S2739"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419798520490"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2739"/>
							<attribute key="device.variant" value="Cortex M.LM3S2739"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419798520490"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2739"/>
							<attribute key="device.variant" value="Cortex M.LM3S2739"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419798520490"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2739"/>
							<attribute key="device.variant" value="Cortex M.LM3S2739"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419798520490"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2739"/>
							<attribute key="device.variant" value="Cortex M.LM3S2739"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2776" desc="Stellaris LM3S2776" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419798976368">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2776</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419798976368"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2776"/>
							<attribute key="device.variant" value="Cortex M.LM3S2776"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419798976368"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2776"/>
							<attribute key="device.variant" value="Cortex M.LM3S2776"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419798976368"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2776"/>
							<attribute key="device.variant" value="Cortex M.LM3S2776"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419799080716">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2776</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419799080716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2776"/>
							<attribute key="device.variant" value="Cortex M.LM3S2776"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419799080716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2776"/>
							<attribute key="device.variant" value="Cortex M.LM3S2776"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419799080716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2776"/>
							<attribute key="device.variant" value="Cortex M.LM3S2776"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419799080716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2776"/>
							<attribute key="device.variant" value="Cortex M.LM3S2776"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419799080716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2776"/>
							<attribute key="device.variant" value="Cortex M.LM3S2776"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419799080716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2776"/>
							<attribute key="device.variant" value="Cortex M.LM3S2776"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419799080716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2776"/>
							<attribute key="device.variant" value="Cortex M.LM3S2776"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419799080716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2776"/>
							<attribute key="device.variant" value="Cortex M.LM3S2776"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419799080716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2776"/>
							<attribute key="device.variant" value="Cortex M.LM3S2776"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419799080716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2776"/>
							<attribute key="device.variant" value="Cortex M.LM3S2776"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419799080716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2776"/>
							<attribute key="device.variant" value="Cortex M.LM3S2776"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419799080716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2776"/>
							<attribute key="device.variant" value="Cortex M.LM3S2776"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2793" desc="Stellaris LM3S2793" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419799529752">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2793</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419799529752"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2793"/>
							<attribute key="device.variant" value="Cortex M.LM3S2793"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419799529752"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2793"/>
							<attribute key="device.variant" value="Cortex M.LM3S2793"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419799529752"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2793"/>
							<attribute key="device.variant" value="Cortex M.LM3S2793"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419799715353">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2793</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419799715353"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2793"/>
							<attribute key="device.variant" value="Cortex M.LM3S2793"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419799715353"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2793"/>
							<attribute key="device.variant" value="Cortex M.LM3S2793"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419799715353"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2793"/>
							<attribute key="device.variant" value="Cortex M.LM3S2793"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419799715353"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2793"/>
							<attribute key="device.variant" value="Cortex M.LM3S2793"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419799715353"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2793"/>
							<attribute key="device.variant" value="Cortex M.LM3S2793"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419799715353"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2793"/>
							<attribute key="device.variant" value="Cortex M.LM3S2793"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419799715353"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2793"/>
							<attribute key="device.variant" value="Cortex M.LM3S2793"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419799715353"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2793"/>
							<attribute key="device.variant" value="Cortex M.LM3S2793"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419799715353"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2793"/>
							<attribute key="device.variant" value="Cortex M.LM3S2793"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419799715353"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2793"/>
							<attribute key="device.variant" value="Cortex M.LM3S2793"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419799715353"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2793"/>
							<attribute key="device.variant" value="Cortex M.LM3S2793"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419799715353"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2793"/>
							<attribute key="device.variant" value="Cortex M.LM3S2793"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2911" desc="Stellaris LM3S2911" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419800431245">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2911</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419800431245"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2911"/>
							<attribute key="device.variant" value="Cortex M.LM3S2911"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419800431245"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2911"/>
							<attribute key="device.variant" value="Cortex M.LM3S2911"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419800431245"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2911"/>
							<attribute key="device.variant" value="Cortex M.LM3S2911"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419800543718">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2911</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419800543718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2911"/>
							<attribute key="device.variant" value="Cortex M.LM3S2911"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419800543718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2911"/>
							<attribute key="device.variant" value="Cortex M.LM3S2911"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419800543718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2911"/>
							<attribute key="device.variant" value="Cortex M.LM3S2911"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419800543718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2911"/>
							<attribute key="device.variant" value="Cortex M.LM3S2911"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419800543718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2911"/>
							<attribute key="device.variant" value="Cortex M.LM3S2911"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419800543718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2911"/>
							<attribute key="device.variant" value="Cortex M.LM3S2911"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419800543718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2911"/>
							<attribute key="device.variant" value="Cortex M.LM3S2911"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419800543718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2911"/>
							<attribute key="device.variant" value="Cortex M.LM3S2911"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419800543718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2911"/>
							<attribute key="device.variant" value="Cortex M.LM3S2911"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419800543718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2911"/>
							<attribute key="device.variant" value="Cortex M.LM3S2911"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419800543718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2911"/>
							<attribute key="device.variant" value="Cortex M.LM3S2911"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419800543718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2911"/>
							<attribute key="device.variant" value="Cortex M.LM3S2911"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2918" desc="Stellaris LM3S2918" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419805216260">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2918</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419805216260"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2918"/>
							<attribute key="device.variant" value="Cortex M.LM3S2918"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419805216260"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2918"/>
							<attribute key="device.variant" value="Cortex M.LM3S2918"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419805216260"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2918"/>
							<attribute key="device.variant" value="Cortex M.LM3S2918"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419805443344">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2918</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419805443344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2918"/>
							<attribute key="device.variant" value="Cortex M.LM3S2918"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419805443344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2918"/>
							<attribute key="device.variant" value="Cortex M.LM3S2918"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419805443344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2918"/>
							<attribute key="device.variant" value="Cortex M.LM3S2918"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419805443344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2918"/>
							<attribute key="device.variant" value="Cortex M.LM3S2918"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419805443344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2918"/>
							<attribute key="device.variant" value="Cortex M.LM3S2918"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419805443344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2918"/>
							<attribute key="device.variant" value="Cortex M.LM3S2918"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419805443344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2918"/>
							<attribute key="device.variant" value="Cortex M.LM3S2918"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419805443344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2918"/>
							<attribute key="device.variant" value="Cortex M.LM3S2918"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419805443344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2918"/>
							<attribute key="device.variant" value="Cortex M.LM3S2918"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419805443344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2918"/>
							<attribute key="device.variant" value="Cortex M.LM3S2918"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419805443344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2918"/>
							<attribute key="device.variant" value="Cortex M.LM3S2918"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419805443344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2918"/>
							<attribute key="device.variant" value="Cortex M.LM3S2918"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2919" desc="Stellaris LM3S2919" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419806329014">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2919</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419806329014"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2919"/>
							<attribute key="device.variant" value="Cortex M.LM3S2919"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419806329014"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2919"/>
							<attribute key="device.variant" value="Cortex M.LM3S2919"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419806329014"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2919"/>
							<attribute key="device.variant" value="Cortex M.LM3S2919"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419806541130">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2919</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419806541130"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2919"/>
							<attribute key="device.variant" value="Cortex M.LM3S2919"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419806541130"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2919"/>
							<attribute key="device.variant" value="Cortex M.LM3S2919"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419806541130"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2919"/>
							<attribute key="device.variant" value="Cortex M.LM3S2919"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419806541130"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2919"/>
							<attribute key="device.variant" value="Cortex M.LM3S2919"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419806541130"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2919"/>
							<attribute key="device.variant" value="Cortex M.LM3S2919"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419806541130"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2919"/>
							<attribute key="device.variant" value="Cortex M.LM3S2919"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419806541130"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2919"/>
							<attribute key="device.variant" value="Cortex M.LM3S2919"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419806541130"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2919"/>
							<attribute key="device.variant" value="Cortex M.LM3S2919"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419806541130"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2919"/>
							<attribute key="device.variant" value="Cortex M.LM3S2919"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419806541130"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2919"/>
							<attribute key="device.variant" value="Cortex M.LM3S2919"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419806541130"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2919"/>
							<attribute key="device.variant" value="Cortex M.LM3S2919"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419806541130"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2919"/>
							<attribute key="device.variant" value="Cortex M.LM3S2919"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2939" desc="Stellaris LM3S2939" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419807390877">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2939</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419807390877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2939"/>
							<attribute key="device.variant" value="Cortex M.LM3S2939"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419807390877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2939"/>
							<attribute key="device.variant" value="Cortex M.LM3S2939"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419807390877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2939"/>
							<attribute key="device.variant" value="Cortex M.LM3S2939"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419807600000">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2939</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419807600000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2939"/>
							<attribute key="device.variant" value="Cortex M.LM3S2939"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419807600000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2939"/>
							<attribute key="device.variant" value="Cortex M.LM3S2939"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419807600000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2939"/>
							<attribute key="device.variant" value="Cortex M.LM3S2939"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419807600000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2939"/>
							<attribute key="device.variant" value="Cortex M.LM3S2939"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419807600000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2939"/>
							<attribute key="device.variant" value="Cortex M.LM3S2939"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419807600000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2939"/>
							<attribute key="device.variant" value="Cortex M.LM3S2939"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419807600000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2939"/>
							<attribute key="device.variant" value="Cortex M.LM3S2939"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419807600000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2939"/>
							<attribute key="device.variant" value="Cortex M.LM3S2939"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419807600000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2939"/>
							<attribute key="device.variant" value="Cortex M.LM3S2939"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419807600000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2939"/>
							<attribute key="device.variant" value="Cortex M.LM3S2939"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419807600000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2939"/>
							<attribute key="device.variant" value="Cortex M.LM3S2939"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419807600000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2939"/>
							<attribute key="device.variant" value="Cortex M.LM3S2939"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2948" desc="Stellaris LM3S2948" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419808445043">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2948</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419808445043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2948"/>
							<attribute key="device.variant" value="Cortex M.LM3S2948"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419808445043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2948"/>
							<attribute key="device.variant" value="Cortex M.LM3S2948"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419808445043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2948"/>
							<attribute key="device.variant" value="Cortex M.LM3S2948"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419808648178">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2948</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419808648178"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2948"/>
							<attribute key="device.variant" value="Cortex M.LM3S2948"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419808648178"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2948"/>
							<attribute key="device.variant" value="Cortex M.LM3S2948"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419808648178"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2948"/>
							<attribute key="device.variant" value="Cortex M.LM3S2948"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419808648178"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2948"/>
							<attribute key="device.variant" value="Cortex M.LM3S2948"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419808648178"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2948"/>
							<attribute key="device.variant" value="Cortex M.LM3S2948"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419808648178"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2948"/>
							<attribute key="device.variant" value="Cortex M.LM3S2948"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419808648178"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2948"/>
							<attribute key="device.variant" value="Cortex M.LM3S2948"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419808648178"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2948"/>
							<attribute key="device.variant" value="Cortex M.LM3S2948"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419808648178"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2948"/>
							<attribute key="device.variant" value="Cortex M.LM3S2948"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419808648178"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2948"/>
							<attribute key="device.variant" value="Cortex M.LM3S2948"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419808648178"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2948"/>
							<attribute key="device.variant" value="Cortex M.LM3S2948"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419808648178"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2948"/>
							<attribute key="device.variant" value="Cortex M.LM3S2948"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2950" desc="Stellaris LM3S2950" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419809472267">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2950</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419809472267"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2950"/>
							<attribute key="device.variant" value="Cortex M.LM3S2950"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419809472267"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2950"/>
							<attribute key="device.variant" value="Cortex M.LM3S2950"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419809472267"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2950"/>
							<attribute key="device.variant" value="Cortex M.LM3S2950"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419809675402">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2950</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419809675402"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2950"/>
							<attribute key="device.variant" value="Cortex M.LM3S2950"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419809675402"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2950"/>
							<attribute key="device.variant" value="Cortex M.LM3S2950"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419809675402"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2950"/>
							<attribute key="device.variant" value="Cortex M.LM3S2950"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419809675402"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2950"/>
							<attribute key="device.variant" value="Cortex M.LM3S2950"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419809675402"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2950"/>
							<attribute key="device.variant" value="Cortex M.LM3S2950"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419809675402"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2950"/>
							<attribute key="device.variant" value="Cortex M.LM3S2950"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419809675402"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2950"/>
							<attribute key="device.variant" value="Cortex M.LM3S2950"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419809675402"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2950"/>
							<attribute key="device.variant" value="Cortex M.LM3S2950"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419809675402"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2950"/>
							<attribute key="device.variant" value="Cortex M.LM3S2950"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419809675402"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2950"/>
							<attribute key="device.variant" value="Cortex M.LM3S2950"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419809675402"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2950"/>
							<attribute key="device.variant" value="Cortex M.LM3S2950"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419809675402"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2950"/>
							<attribute key="device.variant" value="Cortex M.LM3S2950"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2965" desc="Stellaris LM3S2965" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419810511037">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2965</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419810511037"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2965"/>
							<attribute key="device.variant" value="Cortex M.LM3S2965"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419810511037"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2965"/>
							<attribute key="device.variant" value="Cortex M.LM3S2965"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419810511037"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2965"/>
							<attribute key="device.variant" value="Cortex M.LM3S2965"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419810710751">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2965</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419810710751"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2965"/>
							<attribute key="device.variant" value="Cortex M.LM3S2965"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419810710751"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2965"/>
							<attribute key="device.variant" value="Cortex M.LM3S2965"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419810710751"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2965"/>
							<attribute key="device.variant" value="Cortex M.LM3S2965"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419810710751"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2965"/>
							<attribute key="device.variant" value="Cortex M.LM3S2965"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419810710751"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2965"/>
							<attribute key="device.variant" value="Cortex M.LM3S2965"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419810710751"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2965"/>
							<attribute key="device.variant" value="Cortex M.LM3S2965"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419810710751"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2965"/>
							<attribute key="device.variant" value="Cortex M.LM3S2965"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419810710751"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2965"/>
							<attribute key="device.variant" value="Cortex M.LM3S2965"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419810710751"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2965"/>
							<attribute key="device.variant" value="Cortex M.LM3S2965"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419810710751"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2965"/>
							<attribute key="device.variant" value="Cortex M.LM3S2965"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419810710751"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2965"/>
							<attribute key="device.variant" value="Cortex M.LM3S2965"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419810710751"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2965"/>
							<attribute key="device.variant" value="Cortex M.LM3S2965"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2B93" desc="Stellaris LM3S2B93" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419811537833">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2B93</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419811537833"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2B93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2B93"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419811537833"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2B93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2B93"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419811537833"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2B93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2B93"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419811821367">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2B93</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419811821367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2B93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2B93"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419811821367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2B93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2B93"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419811821367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2B93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2B93"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419811821367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2B93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2B93"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419811821367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2B93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2B93"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419811821367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2B93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2B93"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419811821367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2B93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2B93"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419811821367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2B93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2B93"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419811821367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2B93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2B93"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419811821367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2B93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2B93"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419811821367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2B93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2B93"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419811821367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2B93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2B93"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2D93" desc="Stellaris LM3S2D93" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419812349091">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2D93</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419812349091"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2D93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2D93"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419812349091"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2D93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2D93"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419812349091"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2D93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2D93"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419812465841">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2D93</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419812465841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2D93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2D93"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419812465841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2D93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2D93"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419812465841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2D93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2D93"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419812465841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2D93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2D93"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419812465841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2D93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2D93"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419812465841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2D93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2D93"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419812465841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2D93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2D93"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419812465841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2D93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2D93"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419812465841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2D93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2D93"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419812465841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2D93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2D93"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419812465841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2D93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2D93"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419812465841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2D93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2D93"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2U93" desc="Stellaris LM3S2U93" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419812937543">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2U93</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419812937543"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2U93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2U93"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419812937543"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2U93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2U93"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419812937543"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2U93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2U93"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419813135119">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2U93</tag>
					<tag>Stellaris Cortex LM3S2xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419813135119"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2U93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2U93"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419813135119"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2U93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2U93"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419813135119"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2U93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2U93"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419813135119"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2U93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2U93"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419813135119"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2U93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2U93"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419813135119"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2U93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2U93"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419813135119"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2U93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2U93"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419813135119"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2U93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2U93"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419813135119"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2U93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2U93"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419813135119"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2U93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2U93"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419813135119"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2U93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2U93"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419813135119"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2U93"/>
							<attribute key="device.variant" value="Cortex M.LM3S2U93"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>
	<contents name="Stellaris Cortex LM3S3xxx" desc="Stellaris Cortex LM3S3xxx" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="Stellaris LM3S3634" desc="Stellaris LM3S3634" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419818110439">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3634</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419818110439"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S3634"/>
							<attribute key="device.variant" value="Cortex M.LM3S3634"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419818110439"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S3634"/>
							<attribute key="device.variant" value="Cortex M.LM3S3634"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419818110439"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S3634"/>
							<attribute key="device.variant" value="Cortex M.LM3S3634"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419818264821">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3634</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419818264821"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S3634"/>
							<attribute key="device.variant" value="Cortex M.LM3S3634"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419818264821"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S3634"/>
							<attribute key="device.variant" value="Cortex M.LM3S3634"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419818264821"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S3634"/>
							<attribute key="device.variant" value="Cortex M.LM3S3634"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419818264821"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S3634"/>
							<attribute key="device.variant" value="Cortex M.LM3S3634"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419818264821"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S3634"/>
							<attribute key="device.variant" value="Cortex M.LM3S3634"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419818264821"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S3634"/>
							<attribute key="device.variant" value="Cortex M.LM3S3634"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419818264821"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S3634"/>
							<attribute key="device.variant" value="Cortex M.LM3S3634"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419818264821"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S3634"/>
							<attribute key="device.variant" value="Cortex M.LM3S3634"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419818264821"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S3634"/>
							<attribute key="device.variant" value="Cortex M.LM3S3634"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419818264821"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S3634"/>
							<attribute key="device.variant" value="Cortex M.LM3S3634"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419818264821"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S3634"/>
							<attribute key="device.variant" value="Cortex M.LM3S3634"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419818264821"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S3634"/>
							<attribute key="device.variant" value="Cortex M.LM3S3634"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S3651" desc="Stellaris LM3S3651" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419821628316">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3651</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419821628316"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S3651"/>
							<attribute key="device.variant" value="Cortex M.LM3S3651"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419821628316"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S3651"/>
							<attribute key="device.variant" value="Cortex M.LM3S3651"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419821628316"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S3651"/>
							<attribute key="device.variant" value="Cortex M.LM3S3651"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419821753618">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3651</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419821753618"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S3651"/>
							<attribute key="device.variant" value="Cortex M.LM3S3651"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419821753618"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S3651"/>
							<attribute key="device.variant" value="Cortex M.LM3S3651"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419821753618"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S3651"/>
							<attribute key="device.variant" value="Cortex M.LM3S3651"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419821753618"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S3651"/>
							<attribute key="device.variant" value="Cortex M.LM3S3651"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419821753618"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S3651"/>
							<attribute key="device.variant" value="Cortex M.LM3S3651"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419821753618"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S3651"/>
							<attribute key="device.variant" value="Cortex M.LM3S3651"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419821753618"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S3651"/>
							<attribute key="device.variant" value="Cortex M.LM3S3651"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419821753618"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S3651"/>
							<attribute key="device.variant" value="Cortex M.LM3S3651"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419821753618"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S3651"/>
							<attribute key="device.variant" value="Cortex M.LM3S3651"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419821753618"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S3651"/>
							<attribute key="device.variant" value="Cortex M.LM3S3651"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419821753618"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S3651"/>
							<attribute key="device.variant" value="Cortex M.LM3S3651"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419821753618"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S3651"/>
							<attribute key="device.variant" value="Cortex M.LM3S3651"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S3654" desc="Stellaris LM3S3654" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419822540928">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3654</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419822540928"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S3654"/>
							<attribute key="device.variant" value="Cortex M.LM3S3654"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419822540928"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S3654"/>
							<attribute key="device.variant" value="Cortex M.LM3S3654"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419822540928"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S3654"/>
							<attribute key="device.variant" value="Cortex M.LM3S3654"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419822740642">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3654</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419822740642"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S3654"/>
							<attribute key="device.variant" value="Cortex M.LM3S3654"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419822740642"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S3654"/>
							<attribute key="device.variant" value="Cortex M.LM3S3654"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419822740642"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S3654"/>
							<attribute key="device.variant" value="Cortex M.LM3S3654"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419822740642"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S3654"/>
							<attribute key="device.variant" value="Cortex M.LM3S3654"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419822740642"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S3654"/>
							<attribute key="device.variant" value="Cortex M.LM3S3654"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419822740642"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S3654"/>
							<attribute key="device.variant" value="Cortex M.LM3S3654"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419822740642"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S3654"/>
							<attribute key="device.variant" value="Cortex M.LM3S3654"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419822740642"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S3654"/>
							<attribute key="device.variant" value="Cortex M.LM3S3654"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419822740642"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S3654"/>
							<attribute key="device.variant" value="Cortex M.LM3S3654"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419822740642"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S3654"/>
							<attribute key="device.variant" value="Cortex M.LM3S3654"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419822740642"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S3654"/>
							<attribute key="device.variant" value="Cortex M.LM3S3654"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419822740642"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S3654"/>
							<attribute key="device.variant" value="Cortex M.LM3S3654"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S3739" desc="Stellaris LM3S3739" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419823569007">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3739</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419823569007"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S3739"/>
							<attribute key="device.variant" value="Cortex M.LM3S3739"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419823569007"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S3739"/>
							<attribute key="device.variant" value="Cortex M.LM3S3739"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419823569007"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S3739"/>
							<attribute key="device.variant" value="Cortex M.LM3S3739"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419823766583">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3739</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419823766583"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S3739"/>
							<attribute key="device.variant" value="Cortex M.LM3S3739"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419823766583"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S3739"/>
							<attribute key="device.variant" value="Cortex M.LM3S3739"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419823766583"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S3739"/>
							<attribute key="device.variant" value="Cortex M.LM3S3739"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419823766583"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S3739"/>
							<attribute key="device.variant" value="Cortex M.LM3S3739"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419823766583"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S3739"/>
							<attribute key="device.variant" value="Cortex M.LM3S3739"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419823766583"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S3739"/>
							<attribute key="device.variant" value="Cortex M.LM3S3739"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419823766583"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S3739"/>
							<attribute key="device.variant" value="Cortex M.LM3S3739"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419823766583"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S3739"/>
							<attribute key="device.variant" value="Cortex M.LM3S3739"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419823766583"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S3739"/>
							<attribute key="device.variant" value="Cortex M.LM3S3739"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419823766583"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S3739"/>
							<attribute key="device.variant" value="Cortex M.LM3S3739"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419823766583"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S3739"/>
							<attribute key="device.variant" value="Cortex M.LM3S3739"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419823766583"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S3739"/>
							<attribute key="device.variant" value="Cortex M.LM3S3739"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S3748" desc="Stellaris LM3S3748" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419824612054">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3748</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419824612054"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S3748"/>
							<attribute key="device.variant" value="Cortex M.LM3S3748"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419824612054"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S3748"/>
							<attribute key="device.variant" value="Cortex M.LM3S3748"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419824612054"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S3748"/>
							<attribute key="device.variant" value="Cortex M.LM3S3748"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419824815189">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3748</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419824815189"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S3748"/>
							<attribute key="device.variant" value="Cortex M.LM3S3748"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419824815189"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S3748"/>
							<attribute key="device.variant" value="Cortex M.LM3S3748"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419824815189"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S3748"/>
							<attribute key="device.variant" value="Cortex M.LM3S3748"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419824815189"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S3748"/>
							<attribute key="device.variant" value="Cortex M.LM3S3748"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419824815189"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S3748"/>
							<attribute key="device.variant" value="Cortex M.LM3S3748"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419824815189"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S3748"/>
							<attribute key="device.variant" value="Cortex M.LM3S3748"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419824815189"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S3748"/>
							<attribute key="device.variant" value="Cortex M.LM3S3748"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419824815189"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S3748"/>
							<attribute key="device.variant" value="Cortex M.LM3S3748"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419824815189"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S3748"/>
							<attribute key="device.variant" value="Cortex M.LM3S3748"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419824815189"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S3748"/>
							<attribute key="device.variant" value="Cortex M.LM3S3748"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419824815189"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S3748"/>
							<attribute key="device.variant" value="Cortex M.LM3S3748"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419824815189"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S3748"/>
							<attribute key="device.variant" value="Cortex M.LM3S3748"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S3749" desc="Stellaris LM3S3749" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419825672207">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3749</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419825672207"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S3749"/>
							<attribute key="device.variant" value="Cortex M.LM3S3749"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419825672207"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S3749"/>
							<attribute key="device.variant" value="Cortex M.LM3S3749"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419825672207"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S3749"/>
							<attribute key="device.variant" value="Cortex M.LM3S3749"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419825878336">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3749</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419825878336"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S3749"/>
							<attribute key="device.variant" value="Cortex M.LM3S3749"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419825878336"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S3749"/>
							<attribute key="device.variant" value="Cortex M.LM3S3749"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419825878336"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S3749"/>
							<attribute key="device.variant" value="Cortex M.LM3S3749"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419825878336"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S3749"/>
							<attribute key="device.variant" value="Cortex M.LM3S3749"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419825878336"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S3749"/>
							<attribute key="device.variant" value="Cortex M.LM3S3749"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419825878336"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S3749"/>
							<attribute key="device.variant" value="Cortex M.LM3S3749"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419825878336"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S3749"/>
							<attribute key="device.variant" value="Cortex M.LM3S3749"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419825878336"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S3749"/>
							<attribute key="device.variant" value="Cortex M.LM3S3749"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419825878336"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S3749"/>
							<attribute key="device.variant" value="Cortex M.LM3S3749"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419825878336"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S3749"/>
							<attribute key="device.variant" value="Cortex M.LM3S3749"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419825878336"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S3749"/>
							<attribute key="device.variant" value="Cortex M.LM3S3749"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419825878336"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S3749"/>
							<attribute key="device.variant" value="Cortex M.LM3S3749"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S3826" desc="Stellaris LM3S3826" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419826803350">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3826</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419826803350"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S3826"/>
							<attribute key="device.variant" value="Cortex M.LM3S3826"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419826803350"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S3826"/>
							<attribute key="device.variant" value="Cortex M.LM3S3826"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419826803350"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S3826"/>
							<attribute key="device.variant" value="Cortex M.LM3S3826"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419827003920">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3826</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419827003920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S3826"/>
							<attribute key="device.variant" value="Cortex M.LM3S3826"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419827003920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S3826"/>
							<attribute key="device.variant" value="Cortex M.LM3S3826"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419827003920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S3826"/>
							<attribute key="device.variant" value="Cortex M.LM3S3826"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419827003920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S3826"/>
							<attribute key="device.variant" value="Cortex M.LM3S3826"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419827003920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S3826"/>
							<attribute key="device.variant" value="Cortex M.LM3S3826"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419827003920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S3826"/>
							<attribute key="device.variant" value="Cortex M.LM3S3826"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419827003920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S3826"/>
							<attribute key="device.variant" value="Cortex M.LM3S3826"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419827003920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S3826"/>
							<attribute key="device.variant" value="Cortex M.LM3S3826"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419827003920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S3826"/>
							<attribute key="device.variant" value="Cortex M.LM3S3826"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419827003920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S3826"/>
							<attribute key="device.variant" value="Cortex M.LM3S3826"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419827003920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S3826"/>
							<attribute key="device.variant" value="Cortex M.LM3S3826"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419827003920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S3826"/>
							<attribute key="device.variant" value="Cortex M.LM3S3826"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S3J26" desc="Stellaris LM3S3J26" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419827854094">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3J26</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419827854094"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S3J26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3J26"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419827854094"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S3J26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3J26"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419827854094"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S3J26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3J26"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419828058513">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3J26</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419828058513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S3J26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3J26"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419828058513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S3J26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3J26"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419828058513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S3J26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3J26"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419828058513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S3J26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3J26"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419828058513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S3J26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3J26"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419828058513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S3J26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3J26"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419828058513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S3J26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3J26"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419828058513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S3J26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3J26"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419828058513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S3J26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3J26"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419828058513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S3J26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3J26"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419828058513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S3J26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3J26"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419828058513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S3J26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3J26"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S3N26" desc="Stellaris LM3S3N26" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419828964711">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3N26</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419828964711"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S3N26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3N26"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419828964711"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S3N26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3N26"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419828964711"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S3N26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3N26"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419829169984">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3N26</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419829169984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S3N26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3N26"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419829169984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S3N26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3N26"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419829169984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S3N26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3N26"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419829169984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S3N26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3N26"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419829169984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S3N26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3N26"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419829169984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S3N26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3N26"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419829169984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S3N26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3N26"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419829169984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S3N26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3N26"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419829169984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S3N26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3N26"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419829169984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S3N26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3N26"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419829169984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S3N26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3N26"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419829169984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S3N26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3N26"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S3W26" desc="Stellaris LM3S3W26" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419829996638">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3W26</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419829996638"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S3W26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3W26"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419829996638"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S3W26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3W26"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419829996638"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S3W26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3W26"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419830201484">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3W26</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419830201484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S3W26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3W26"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419830201484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S3W26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3W26"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419830201484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S3W26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3W26"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419830201484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S3W26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3W26"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419830201484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S3W26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3W26"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419830201484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S3W26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3W26"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419830201484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S3W26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3W26"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419830201484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S3W26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3W26"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419830201484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S3W26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3W26"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419830201484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S3W26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3W26"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419830201484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S3W26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3W26"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419830201484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S3W26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3W26"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S3Z26" desc="Stellaris LM3S3Z26" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419831037547">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3Z26</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419831037547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S3Z26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3Z26"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419831037547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S3Z26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3Z26"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419831037547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S3Z26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3Z26"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419831245814">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S3Z26</tag>
					<tag>Stellaris Cortex LM3S3xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419831245814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S3Z26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3Z26"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419831245814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S3Z26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3Z26"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419831245814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S3Z26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3Z26"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419831245814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S3Z26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3Z26"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419831245814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S3Z26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3Z26"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419831245814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S3Z26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3Z26"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419831245814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S3Z26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3Z26"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419831245814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S3Z26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3Z26"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419831245814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S3Z26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3Z26"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419831245814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S3Z26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3Z26"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419831245814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S3Z26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3Z26"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419831245814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S3Z26"/>
							<attribute key="device.variant" value="Cortex M.LM3S3Z26"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>
	<contents name="Stellaris Cortex LM3S5xxx" desc="Stellaris Cortex LM3S5xxx" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="Stellaris LM3S5632" desc="Stellaris LM3S5632" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419837835098">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5632</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419837835098"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5632"/>
							<attribute key="device.variant" value="Cortex M.LM3S5632"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419837835098"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5632"/>
							<attribute key="device.variant" value="Cortex M.LM3S5632"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419837835098"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5632"/>
							<attribute key="device.variant" value="Cortex M.LM3S5632"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419838141726">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5632</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419838141726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5632"/>
							<attribute key="device.variant" value="Cortex M.LM3S5632"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419838141726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5632"/>
							<attribute key="device.variant" value="Cortex M.LM3S5632"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419838141726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5632"/>
							<attribute key="device.variant" value="Cortex M.LM3S5632"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419838141726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5632"/>
							<attribute key="device.variant" value="Cortex M.LM3S5632"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419838141726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5632"/>
							<attribute key="device.variant" value="Cortex M.LM3S5632"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419838141726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5632"/>
							<attribute key="device.variant" value="Cortex M.LM3S5632"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419838141726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5632"/>
							<attribute key="device.variant" value="Cortex M.LM3S5632"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419838141726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5632"/>
							<attribute key="device.variant" value="Cortex M.LM3S5632"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419838141726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5632"/>
							<attribute key="device.variant" value="Cortex M.LM3S5632"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419838141726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5632"/>
							<attribute key="device.variant" value="Cortex M.LM3S5632"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419838141726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5632"/>
							<attribute key="device.variant" value="Cortex M.LM3S5632"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419838141726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5632"/>
							<attribute key="device.variant" value="Cortex M.LM3S5632"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5651" desc="Stellaris LM3S5651" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419839016277">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5651</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419839016277"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5651"/>
							<attribute key="device.variant" value="Cortex M.LM3S5651"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419839016277"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5651"/>
							<attribute key="device.variant" value="Cortex M.LM3S5651"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419839016277"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5651"/>
							<attribute key="device.variant" value="Cortex M.LM3S5651"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419839212570">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5651</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419839212570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5651"/>
							<attribute key="device.variant" value="Cortex M.LM3S5651"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419839212570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5651"/>
							<attribute key="device.variant" value="Cortex M.LM3S5651"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419839212570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5651"/>
							<attribute key="device.variant" value="Cortex M.LM3S5651"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419839212570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5651"/>
							<attribute key="device.variant" value="Cortex M.LM3S5651"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419839212570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5651"/>
							<attribute key="device.variant" value="Cortex M.LM3S5651"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419839212570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5651"/>
							<attribute key="device.variant" value="Cortex M.LM3S5651"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419839212570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5651"/>
							<attribute key="device.variant" value="Cortex M.LM3S5651"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419839212570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5651"/>
							<attribute key="device.variant" value="Cortex M.LM3S5651"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419839212570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5651"/>
							<attribute key="device.variant" value="Cortex M.LM3S5651"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419839212570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5651"/>
							<attribute key="device.variant" value="Cortex M.LM3S5651"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419839212570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5651"/>
							<attribute key="device.variant" value="Cortex M.LM3S5651"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419839212570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5651"/>
							<attribute key="device.variant" value="Cortex M.LM3S5651"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5652" desc="Stellaris LM3S5652" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419840033237">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5652</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419840033237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5652"/>
							<attribute key="device.variant" value="Cortex M.LM3S5652"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419840033237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5652"/>
							<attribute key="device.variant" value="Cortex M.LM3S5652"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419840033237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5652"/>
							<attribute key="device.variant" value="Cortex M.LM3S5652"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419840224398">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5652</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419840224398"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5652"/>
							<attribute key="device.variant" value="Cortex M.LM3S5652"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419840224398"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5652"/>
							<attribute key="device.variant" value="Cortex M.LM3S5652"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419840224398"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5652"/>
							<attribute key="device.variant" value="Cortex M.LM3S5652"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419840224398"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5652"/>
							<attribute key="device.variant" value="Cortex M.LM3S5652"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419840224398"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5652"/>
							<attribute key="device.variant" value="Cortex M.LM3S5652"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419840224398"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5652"/>
							<attribute key="device.variant" value="Cortex M.LM3S5652"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419840224398"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5652"/>
							<attribute key="device.variant" value="Cortex M.LM3S5652"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419840224398"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5652"/>
							<attribute key="device.variant" value="Cortex M.LM3S5652"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419840224398"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5652"/>
							<attribute key="device.variant" value="Cortex M.LM3S5652"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419840224398"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5652"/>
							<attribute key="device.variant" value="Cortex M.LM3S5652"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419840224398"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5652"/>
							<attribute key="device.variant" value="Cortex M.LM3S5652"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419840224398"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5652"/>
							<attribute key="device.variant" value="Cortex M.LM3S5652"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5656" desc="Stellaris LM3S5656" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419841028814">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5656</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419841028814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5656"/>
							<attribute key="device.variant" value="Cortex M.LM3S5656"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419841028814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5656"/>
							<attribute key="device.variant" value="Cortex M.LM3S5656"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419841028814"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5656"/>
							<attribute key="device.variant" value="Cortex M.LM3S5656"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419841221258">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5656</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419841221258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5656"/>
							<attribute key="device.variant" value="Cortex M.LM3S5656"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419841221258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5656"/>
							<attribute key="device.variant" value="Cortex M.LM3S5656"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419841221258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5656"/>
							<attribute key="device.variant" value="Cortex M.LM3S5656"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419841221258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5656"/>
							<attribute key="device.variant" value="Cortex M.LM3S5656"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419841221258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5656"/>
							<attribute key="device.variant" value="Cortex M.LM3S5656"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419841221258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5656"/>
							<attribute key="device.variant" value="Cortex M.LM3S5656"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419841221258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5656"/>
							<attribute key="device.variant" value="Cortex M.LM3S5656"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419841221258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5656"/>
							<attribute key="device.variant" value="Cortex M.LM3S5656"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419841221258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5656"/>
							<attribute key="device.variant" value="Cortex M.LM3S5656"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419841221258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5656"/>
							<attribute key="device.variant" value="Cortex M.LM3S5656"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419841221258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5656"/>
							<attribute key="device.variant" value="Cortex M.LM3S5656"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419841221258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5656"/>
							<attribute key="device.variant" value="Cortex M.LM3S5656"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5662" desc="Stellaris LM3S5662" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419842067584">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5662</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419842067584"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5662"/>
							<attribute key="device.variant" value="Cortex M.LM3S5662"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419842067584"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5662"/>
							<attribute key="device.variant" value="Cortex M.LM3S5662"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419842067584"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5662"/>
							<attribute key="device.variant" value="Cortex M.LM3S5662"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419842264305">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5662</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419842264305"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5662"/>
							<attribute key="device.variant" value="Cortex M.LM3S5662"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419842264305"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5662"/>
							<attribute key="device.variant" value="Cortex M.LM3S5662"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419842264305"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5662"/>
							<attribute key="device.variant" value="Cortex M.LM3S5662"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419842264305"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5662"/>
							<attribute key="device.variant" value="Cortex M.LM3S5662"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419842264305"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5662"/>
							<attribute key="device.variant" value="Cortex M.LM3S5662"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419842264305"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5662"/>
							<attribute key="device.variant" value="Cortex M.LM3S5662"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419842264305"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5662"/>
							<attribute key="device.variant" value="Cortex M.LM3S5662"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419842264305"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5662"/>
							<attribute key="device.variant" value="Cortex M.LM3S5662"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419842264305"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5662"/>
							<attribute key="device.variant" value="Cortex M.LM3S5662"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419842264305"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5662"/>
							<attribute key="device.variant" value="Cortex M.LM3S5662"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419842264305"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5662"/>
							<attribute key="device.variant" value="Cortex M.LM3S5662"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419842264305"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5662"/>
							<attribute key="device.variant" value="Cortex M.LM3S5662"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5732" desc="Stellaris LM3S5732" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419843108065">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5732</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419843108065"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5732"/>
							<attribute key="device.variant" value="Cortex M.LM3S5732"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419843108065"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5732"/>
							<attribute key="device.variant" value="Cortex M.LM3S5732"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419843108065"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5732"/>
							<attribute key="device.variant" value="Cortex M.LM3S5732"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419843306924">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5732</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419843306924"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5732"/>
							<attribute key="device.variant" value="Cortex M.LM3S5732"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419843306924"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5732"/>
							<attribute key="device.variant" value="Cortex M.LM3S5732"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419843306924"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5732"/>
							<attribute key="device.variant" value="Cortex M.LM3S5732"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419843306924"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5732"/>
							<attribute key="device.variant" value="Cortex M.LM3S5732"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419843306924"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5732"/>
							<attribute key="device.variant" value="Cortex M.LM3S5732"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419843306924"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5732"/>
							<attribute key="device.variant" value="Cortex M.LM3S5732"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419843306924"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5732"/>
							<attribute key="device.variant" value="Cortex M.LM3S5732"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419843306924"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5732"/>
							<attribute key="device.variant" value="Cortex M.LM3S5732"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419843306924"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5732"/>
							<attribute key="device.variant" value="Cortex M.LM3S5732"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419843306924"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5732"/>
							<attribute key="device.variant" value="Cortex M.LM3S5732"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419843306924"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5732"/>
							<attribute key="device.variant" value="Cortex M.LM3S5732"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419843306924"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5732"/>
							<attribute key="device.variant" value="Cortex M.LM3S5732"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5737" desc="Stellaris LM3S5737" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419844211839">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5737</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419844211839"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5737"/>
							<attribute key="device.variant" value="Cortex M.LM3S5737"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419844211839"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5737"/>
							<attribute key="device.variant" value="Cortex M.LM3S5737"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419844211839"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5737"/>
							<attribute key="device.variant" value="Cortex M.LM3S5737"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419844411980">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5737</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419844411980"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5737"/>
							<attribute key="device.variant" value="Cortex M.LM3S5737"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419844411980"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5737"/>
							<attribute key="device.variant" value="Cortex M.LM3S5737"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419844411980"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5737"/>
							<attribute key="device.variant" value="Cortex M.LM3S5737"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419844411980"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5737"/>
							<attribute key="device.variant" value="Cortex M.LM3S5737"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419844411980"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5737"/>
							<attribute key="device.variant" value="Cortex M.LM3S5737"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419844411980"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5737"/>
							<attribute key="device.variant" value="Cortex M.LM3S5737"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419844411980"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5737"/>
							<attribute key="device.variant" value="Cortex M.LM3S5737"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419844411980"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5737"/>
							<attribute key="device.variant" value="Cortex M.LM3S5737"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419844411980"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5737"/>
							<attribute key="device.variant" value="Cortex M.LM3S5737"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419844411980"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5737"/>
							<attribute key="device.variant" value="Cortex M.LM3S5737"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419844411980"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5737"/>
							<attribute key="device.variant" value="Cortex M.LM3S5737"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419844411980"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5737"/>
							<attribute key="device.variant" value="Cortex M.LM3S5737"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5739" desc="Stellaris LM3S5739" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419845205278">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5739</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419845205278"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5739"/>
							<attribute key="device.variant" value="Cortex M.LM3S5739"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419845205278"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5739"/>
							<attribute key="device.variant" value="Cortex M.LM3S5739"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419845205278"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5739"/>
							<attribute key="device.variant" value="Cortex M.LM3S5739"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419845393017">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5739</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419845393017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5739"/>
							<attribute key="device.variant" value="Cortex M.LM3S5739"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419845393017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5739"/>
							<attribute key="device.variant" value="Cortex M.LM3S5739"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419845393017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5739"/>
							<attribute key="device.variant" value="Cortex M.LM3S5739"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419845393017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5739"/>
							<attribute key="device.variant" value="Cortex M.LM3S5739"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419845393017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5739"/>
							<attribute key="device.variant" value="Cortex M.LM3S5739"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419845393017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5739"/>
							<attribute key="device.variant" value="Cortex M.LM3S5739"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419845393017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5739"/>
							<attribute key="device.variant" value="Cortex M.LM3S5739"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419845393017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5739"/>
							<attribute key="device.variant" value="Cortex M.LM3S5739"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419845393017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5739"/>
							<attribute key="device.variant" value="Cortex M.LM3S5739"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419845393017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5739"/>
							<attribute key="device.variant" value="Cortex M.LM3S5739"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419845393017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5739"/>
							<attribute key="device.variant" value="Cortex M.LM3S5739"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419845393017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5739"/>
							<attribute key="device.variant" value="Cortex M.LM3S5739"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5747" desc="Stellaris LM3S5747" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419846252173">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5747</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419846252173"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5747"/>
							<attribute key="device.variant" value="Cortex M.LM3S5747"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419846252173"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5747"/>
							<attribute key="device.variant" value="Cortex M.LM3S5747"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419846252173"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5747"/>
							<attribute key="device.variant" value="Cortex M.LM3S5747"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419846441196">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5747</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419846441196"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5747"/>
							<attribute key="device.variant" value="Cortex M.LM3S5747"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419846441196"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5747"/>
							<attribute key="device.variant" value="Cortex M.LM3S5747"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419846441196"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5747"/>
							<attribute key="device.variant" value="Cortex M.LM3S5747"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419846441196"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5747"/>
							<attribute key="device.variant" value="Cortex M.LM3S5747"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419846441196"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5747"/>
							<attribute key="device.variant" value="Cortex M.LM3S5747"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419846441196"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5747"/>
							<attribute key="device.variant" value="Cortex M.LM3S5747"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419846441196"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5747"/>
							<attribute key="device.variant" value="Cortex M.LM3S5747"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419846441196"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5747"/>
							<attribute key="device.variant" value="Cortex M.LM3S5747"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419846441196"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5747"/>
							<attribute key="device.variant" value="Cortex M.LM3S5747"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419846441196"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5747"/>
							<attribute key="device.variant" value="Cortex M.LM3S5747"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419846441196"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5747"/>
							<attribute key="device.variant" value="Cortex M.LM3S5747"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419846441196"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5747"/>
							<attribute key="device.variant" value="Cortex M.LM3S5747"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5749" desc="Stellaris LM3S5749" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419847222519">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5749</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419847222519"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5749"/>
							<attribute key="device.variant" value="Cortex M.LM3S5749"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419847222519"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5749"/>
							<attribute key="device.variant" value="Cortex M.LM3S5749"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419847222519"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5749"/>
							<attribute key="device.variant" value="Cortex M.LM3S5749"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419847398712">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5749</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419847398712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5749"/>
							<attribute key="device.variant" value="Cortex M.LM3S5749"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419847398712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5749"/>
							<attribute key="device.variant" value="Cortex M.LM3S5749"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419847398712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5749"/>
							<attribute key="device.variant" value="Cortex M.LM3S5749"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419847398712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5749"/>
							<attribute key="device.variant" value="Cortex M.LM3S5749"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419847398712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5749"/>
							<attribute key="device.variant" value="Cortex M.LM3S5749"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419847398712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5749"/>
							<attribute key="device.variant" value="Cortex M.LM3S5749"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419847398712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5749"/>
							<attribute key="device.variant" value="Cortex M.LM3S5749"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419847398712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5749"/>
							<attribute key="device.variant" value="Cortex M.LM3S5749"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419847398712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5749"/>
							<attribute key="device.variant" value="Cortex M.LM3S5749"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419847398712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5749"/>
							<attribute key="device.variant" value="Cortex M.LM3S5749"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419847398712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5749"/>
							<attribute key="device.variant" value="Cortex M.LM3S5749"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419847398712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5749"/>
							<attribute key="device.variant" value="Cortex M.LM3S5749"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5752" desc="Stellaris LM3S5752" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419851311741">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5752</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419851311741"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5752"/>
							<attribute key="device.variant" value="Cortex M.LM3S5752"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419851311741"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5752"/>
							<attribute key="device.variant" value="Cortex M.LM3S5752"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419851311741"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5752"/>
							<attribute key="device.variant" value="Cortex M.LM3S5752"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419851538825">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5752</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419851538825"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5752"/>
							<attribute key="device.variant" value="Cortex M.LM3S5752"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419851538825"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5752"/>
							<attribute key="device.variant" value="Cortex M.LM3S5752"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419851538825"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5752"/>
							<attribute key="device.variant" value="Cortex M.LM3S5752"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419851538825"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5752"/>
							<attribute key="device.variant" value="Cortex M.LM3S5752"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419851538825"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5752"/>
							<attribute key="device.variant" value="Cortex M.LM3S5752"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419851538825"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5752"/>
							<attribute key="device.variant" value="Cortex M.LM3S5752"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419851538825"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5752"/>
							<attribute key="device.variant" value="Cortex M.LM3S5752"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419851538825"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5752"/>
							<attribute key="device.variant" value="Cortex M.LM3S5752"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419851538825"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5752"/>
							<attribute key="device.variant" value="Cortex M.LM3S5752"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419851538825"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5752"/>
							<attribute key="device.variant" value="Cortex M.LM3S5752"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419851538825"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5752"/>
							<attribute key="device.variant" value="Cortex M.LM3S5752"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419851538825"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5752"/>
							<attribute key="device.variant" value="Cortex M.LM3S5752"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5762" desc="Stellaris LM3S5762" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419852398836">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5762</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419852398836"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5762"/>
							<attribute key="device.variant" value="Cortex M.LM3S5762"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419852398836"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5762"/>
							<attribute key="device.variant" value="Cortex M.LM3S5762"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419852398836"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5762"/>
							<attribute key="device.variant" value="Cortex M.LM3S5762"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419852595984">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5762</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419852595984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5762"/>
							<attribute key="device.variant" value="Cortex M.LM3S5762"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419852595984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5762"/>
							<attribute key="device.variant" value="Cortex M.LM3S5762"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419852595984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5762"/>
							<attribute key="device.variant" value="Cortex M.LM3S5762"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419852595984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5762"/>
							<attribute key="device.variant" value="Cortex M.LM3S5762"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419852595984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5762"/>
							<attribute key="device.variant" value="Cortex M.LM3S5762"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419852595984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5762"/>
							<attribute key="device.variant" value="Cortex M.LM3S5762"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419852595984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5762"/>
							<attribute key="device.variant" value="Cortex M.LM3S5762"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419852595984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5762"/>
							<attribute key="device.variant" value="Cortex M.LM3S5762"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419852595984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5762"/>
							<attribute key="device.variant" value="Cortex M.LM3S5762"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419852595984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5762"/>
							<attribute key="device.variant" value="Cortex M.LM3S5762"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419852595984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5762"/>
							<attribute key="device.variant" value="Cortex M.LM3S5762"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419852595984"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5762"/>
							<attribute key="device.variant" value="Cortex M.LM3S5762"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5791" desc="Stellaris LM3S5791" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419853396552">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5791</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419853396552"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5791"/>
							<attribute key="device.variant" value="Cortex M.LM3S5791"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419853396552"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5791"/>
							<attribute key="device.variant" value="Cortex M.LM3S5791"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419853396552"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5791"/>
							<attribute key="device.variant" value="Cortex M.LM3S5791"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419853592417">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5791</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419853592417"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5791"/>
							<attribute key="device.variant" value="Cortex M.LM3S5791"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419853592417"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5791"/>
							<attribute key="device.variant" value="Cortex M.LM3S5791"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419853592417"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5791"/>
							<attribute key="device.variant" value="Cortex M.LM3S5791"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419853592417"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5791"/>
							<attribute key="device.variant" value="Cortex M.LM3S5791"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419853592417"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5791"/>
							<attribute key="device.variant" value="Cortex M.LM3S5791"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419853592417"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5791"/>
							<attribute key="device.variant" value="Cortex M.LM3S5791"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419853592417"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5791"/>
							<attribute key="device.variant" value="Cortex M.LM3S5791"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419853592417"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5791"/>
							<attribute key="device.variant" value="Cortex M.LM3S5791"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419853592417"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5791"/>
							<attribute key="device.variant" value="Cortex M.LM3S5791"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419853592417"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5791"/>
							<attribute key="device.variant" value="Cortex M.LM3S5791"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419853592417"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5791"/>
							<attribute key="device.variant" value="Cortex M.LM3S5791"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419853592417"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5791"/>
							<attribute key="device.variant" value="Cortex M.LM3S5791"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5951" desc="Stellaris LM3S5951" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419854386997">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5951</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419854386997"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5951"/>
							<attribute key="device.variant" value="Cortex M.LM3S5951"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419854386997"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5951"/>
							<attribute key="device.variant" value="Cortex M.LM3S5951"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419854386997"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5951"/>
							<attribute key="device.variant" value="Cortex M.LM3S5951"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419854571316">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5951</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419854571316"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5951"/>
							<attribute key="device.variant" value="Cortex M.LM3S5951"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419854571316"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5951"/>
							<attribute key="device.variant" value="Cortex M.LM3S5951"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419854571316"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5951"/>
							<attribute key="device.variant" value="Cortex M.LM3S5951"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419854571316"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5951"/>
							<attribute key="device.variant" value="Cortex M.LM3S5951"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419854571316"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5951"/>
							<attribute key="device.variant" value="Cortex M.LM3S5951"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419854571316"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5951"/>
							<attribute key="device.variant" value="Cortex M.LM3S5951"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419854571316"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5951"/>
							<attribute key="device.variant" value="Cortex M.LM3S5951"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419854571316"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5951"/>
							<attribute key="device.variant" value="Cortex M.LM3S5951"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419854571316"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5951"/>
							<attribute key="device.variant" value="Cortex M.LM3S5951"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419854571316"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5951"/>
							<attribute key="device.variant" value="Cortex M.LM3S5951"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419854571316"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5951"/>
							<attribute key="device.variant" value="Cortex M.LM3S5951"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419854571316"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5951"/>
							<attribute key="device.variant" value="Cortex M.LM3S5951"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5956" desc="Stellaris LM3S5956" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419855344513">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5956</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419855344513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5956"/>
							<attribute key="device.variant" value="Cortex M.LM3S5956"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419855344513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5956"/>
							<attribute key="device.variant" value="Cortex M.LM3S5956"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419855344513"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5956"/>
							<attribute key="device.variant" value="Cortex M.LM3S5956"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419855524983">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5956</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419855524983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5956"/>
							<attribute key="device.variant" value="Cortex M.LM3S5956"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419855524983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5956"/>
							<attribute key="device.variant" value="Cortex M.LM3S5956"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419855524983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5956"/>
							<attribute key="device.variant" value="Cortex M.LM3S5956"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419855524983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5956"/>
							<attribute key="device.variant" value="Cortex M.LM3S5956"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419855524983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5956"/>
							<attribute key="device.variant" value="Cortex M.LM3S5956"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419855524983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5956"/>
							<attribute key="device.variant" value="Cortex M.LM3S5956"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419855524983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5956"/>
							<attribute key="device.variant" value="Cortex M.LM3S5956"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419855524983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5956"/>
							<attribute key="device.variant" value="Cortex M.LM3S5956"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419855524983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5956"/>
							<attribute key="device.variant" value="Cortex M.LM3S5956"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419855524983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5956"/>
							<attribute key="device.variant" value="Cortex M.LM3S5956"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419855524983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5956"/>
							<attribute key="device.variant" value="Cortex M.LM3S5956"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419855524983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5956"/>
							<attribute key="device.variant" value="Cortex M.LM3S5956"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5B91" desc="Stellaris LM3S5B91" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419856301601">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5B91</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419856301601"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5B91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5B91"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419856301601"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5B91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5B91"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419856301601"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5B91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5B91"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419856482499">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5B91</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419856482499"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5B91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5B91"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419856482499"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5B91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5B91"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419856482499"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5B91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5B91"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419856482499"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5B91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5B91"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419856482499"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5B91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5B91"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419856482499"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5B91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5B91"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419856482499"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5B91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5B91"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419856482499"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5B91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5B91"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419856482499"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5B91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5B91"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419856482499"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5B91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5B91"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419856482499"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5B91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5B91"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419856482499"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5B91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5B91"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5C31" desc="Stellaris LM3S5C31" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419857442153">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5C31</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419857442153"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5C31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C31"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419857442153"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5C31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C31"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419857442153"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5C31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C31"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419857647427">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5C31</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419857647427"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5C31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C31"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419857647427"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5C31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C31"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419857647427"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5C31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C31"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419857647427"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5C31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C31"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419857647427"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5C31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C31"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419857647427"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5C31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C31"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419857647427"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5C31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C31"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419857647427"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5C31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C31"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419857647427"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5C31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C31"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419857647427"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5C31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C31"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419857647427"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5C31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C31"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419857647427"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5C31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C31"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5C36" desc="Stellaris LM3S5C36" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419858539939">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5C36</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419858539939"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5C36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C36"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419858539939"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5C36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C36"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419858539939"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5C36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C36"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419858743930">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5C36</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419858743930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5C36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C36"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419858743930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5C36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C36"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419858743930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5C36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C36"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419858743930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5C36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C36"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419858743930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5C36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C36"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419858743930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5C36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C36"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419858743930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5C36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C36"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419858743930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5C36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C36"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419858743930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5C36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C36"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419858743930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5C36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C36"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419858743930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5C36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C36"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419858743930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5C36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C36"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5C51" desc="Stellaris LM3S5C51" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419859578710">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5C51</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419859578710"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5C51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C51"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419859578710"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5C51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C51"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419859578710"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5C51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C51"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419859950768">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5C51</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419859950768"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5C51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C51"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419859950768"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5C51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C51"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419859950768"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5C51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C51"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419859950768"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5C51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C51"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419859950768"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5C51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C51"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419859950768"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5C51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C51"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419859950768"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5C51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C51"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419859950768"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5C51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C51"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419859950768"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5C51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C51"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419859950768"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5C51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C51"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419859950768"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5C51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C51"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419859950768"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5C51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C51"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5C56" desc="Stellaris LM3S5C56" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419860845419">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5C56</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419860845419"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5C56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C56"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419860845419"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5C56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C56"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419860845419"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5C56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C56"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419860973287">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5C56</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419860973287"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5C56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C56"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419860973287"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5C56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C56"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419860973287"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5C56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C56"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419860973287"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5C56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C56"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419860973287"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5C56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C56"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419860973287"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5C56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C56"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419860973287"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5C56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C56"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419860973287"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5C56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C56"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419860973287"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5C56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C56"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419860973287"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5C56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C56"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419860973287"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5C56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C56"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419860973287"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5C56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5C56"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5D51" desc="Stellaris LM3S5D51" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419861539501">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5D51</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419861539501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5D51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D51"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419861539501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5D51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D51"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419861539501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5D51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D51"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419861671218">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5D51</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419861671218"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5D51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D51"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419861671218"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5D51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D51"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419861671218"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5D51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D51"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419861671218"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5D51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D51"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419861671218"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5D51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D51"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419861671218"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5D51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D51"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419861671218"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5D51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D51"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419861671218"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5D51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D51"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419861671218"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5D51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D51"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419861671218"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5D51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D51"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419861671218"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5D51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D51"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419861671218"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5D51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D51"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5D56" desc="Stellaris LM3S5D56" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419865182680">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5D56</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419865182680"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5D56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D56"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419865182680"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5D56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D56"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419865182680"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5D56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D56"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419865385388">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5D56</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419865385388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5D56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D56"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419865385388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5D56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D56"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419865385388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5D56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D56"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419865385388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5D56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D56"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419865385388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5D56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D56"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419865385388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5D56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D56"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419865385388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5D56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D56"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419865385388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5D56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D56"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419865385388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5D56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D56"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419865385388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5D56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D56"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419865385388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5D56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D56"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419865385388"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5D56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D56"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5D91" desc="Stellaris LM3S5D91" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419866187238">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5D91</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419866187238"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5D91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D91"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419866187238"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5D91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D91"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419866187238"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5D91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D91"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419866380110">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5D91</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419866380110"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5D91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D91"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419866380110"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5D91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D91"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419866380110"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5D91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D91"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419866380110"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5D91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D91"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419866380110"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5D91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D91"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419866380110"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5D91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D91"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419866380110"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5D91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D91"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419866380110"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5D91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D91"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419866380110"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5D91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D91"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419866380110"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5D91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D91"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419866380110"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5D91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D91"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419866380110"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5D91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5D91"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5G31" desc="Stellaris LM3S5G31" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419867176401">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5G31</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419867176401"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5G31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G31"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419867176401"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5G31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G31"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419867176401"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5G31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G31"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419867361575">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5G31</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419867361575"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5G31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G31"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419867361575"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5G31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G31"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419867361575"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5G31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G31"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419867361575"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5G31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G31"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419867361575"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5G31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G31"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419867361575"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5G31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G31"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419867361575"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5G31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G31"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419867361575"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5G31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G31"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419867361575"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5G31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G31"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419867361575"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5G31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G31"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419867361575"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5G31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G31"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419867361575"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5G31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G31"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5G36" desc="Stellaris LM3S5G36" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419868140759">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5G36</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419868140759"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5G36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G36"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419868140759"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5G36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G36"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419868140759"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5G36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G36"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419868331493">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5G36</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419868331493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5G36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G36"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419868331493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5G36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G36"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419868331493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5G36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G36"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419868331493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5G36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G36"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419868331493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5G36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G36"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419868331493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5G36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G36"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419868331493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5G36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G36"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419868331493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5G36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G36"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419868331493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5G36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G36"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419868331493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5G36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G36"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419868331493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5G36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G36"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419868331493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5G36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G36"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5G51" desc="Stellaris LM3S5G51" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419869135053">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5G51</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419869135053"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5G51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G51"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419869135053"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5G51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G51"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419869135053"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5G51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G51"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419869330063">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5G51</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419869330063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5G51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G51"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419869330063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5G51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G51"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419869330063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5G51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G51"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419869330063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5G51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G51"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419869330063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5G51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G51"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419869330063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5G51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G51"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419869330063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5G51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G51"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419869330063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5G51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G51"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419869330063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5G51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G51"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419869330063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5G51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G51"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419869330063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5G51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G51"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419869330063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5G51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G51"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5G56" desc="Stellaris LM3S5G56" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419869887723">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5G56</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419869887723"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5G56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G56"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419869887723"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5G56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G56"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419869887723"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5G56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G56"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419870069048">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5G56</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419870069048"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5G56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G56"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419870069048"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5G56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G56"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419870069048"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5G56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G56"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419870069048"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5G56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G56"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419870069048"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5G56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G56"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419870069048"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5G56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G56"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419870069048"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5G56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G56"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419870069048"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5G56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G56"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419870069048"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5G56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G56"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419870069048"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5G56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G56"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419870069048"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5G56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G56"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419870069048"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5G56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5G56"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5K31" desc="Stellaris LM3S5K31" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419870560422">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5K31</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419870560422"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5K31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K31"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419870560422"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5K31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K31"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419870560422"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5K31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K31"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419870665197">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5K31</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419870665197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5K31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K31"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419870665197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5K31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K31"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419870665197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5K31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K31"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419870665197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5K31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K31"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419870665197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5K31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K31"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419870665197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5K31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K31"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419870665197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5K31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K31"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419870665197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5K31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K31"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419870665197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5K31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K31"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419870665197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5K31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K31"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419870665197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5K31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K31"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419870665197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5K31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K31"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5K36" desc="Stellaris LM3S5K36" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419871097128">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5K36</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419871097128"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5K36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K36"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419871097128"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5K36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K36"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419871097128"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5K36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K36"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419871198909">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5K36</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419871198909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5K36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K36"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419871198909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5K36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K36"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419871198909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5K36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K36"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419871198909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5K36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K36"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419871198909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5K36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K36"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419871198909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5K36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K36"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419871198909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5K36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K36"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419871198909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5K36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K36"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419871198909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5K36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K36"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419871198909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5K36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K36"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419871198909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5K36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K36"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419871198909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5K36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5K36"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5P31" desc="Stellaris LM3S5P31" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419871835257">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5P31</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419871835257"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5P31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P31"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419871835257"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5P31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P31"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419871835257"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5P31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P31"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419872016155">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5P31</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419872016155"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5P31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P31"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419872016155"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5P31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P31"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419872016155"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5P31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P31"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419872016155"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5P31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P31"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419872016155"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5P31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P31"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419872016155"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5P31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P31"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419872016155"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5P31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P31"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419872016155"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5P31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P31"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419872016155"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5P31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P31"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419872016155"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5P31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P31"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419872016155"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5P31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P31"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419872016155"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5P31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P31"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5P36" desc="Stellaris LM3S5P36" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419872793629">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5P36</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419872793629"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5P36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P36"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419872793629"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5P36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P36"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419872793629"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5P36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P36"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419872978803">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5P36</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419872978803"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5P36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P36"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419872978803"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5P36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P36"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419872978803"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5P36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P36"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419872978803"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5P36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P36"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419872978803"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5P36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P36"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419872978803"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5P36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P36"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419872978803"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5P36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P36"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419872978803"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5P36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P36"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419872978803"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5P36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P36"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419872978803"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5P36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P36"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419872978803"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5P36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P36"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419872978803"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5P36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P36"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5P3B" desc="Stellaris LM3S5P3B" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419873757132">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5P3B</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419873757132"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5P3B"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P3B"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419873757132"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5P3B"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P3B"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419873757132"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5P3B"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P3B"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419873939740">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5P3B</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419873939740"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5P3B"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P3B"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419873939740"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5P3B"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P3B"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419873939740"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5P3B"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P3B"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419873939740"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5P3B"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P3B"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419873939740"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5P3B"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P3B"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419873939740"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5P3B"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P3B"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419873939740"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5P3B"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P3B"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419873939740"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5P3B"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P3B"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419873939740"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5P3B"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P3B"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419873939740"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5P3B"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P3B"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419873939740"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5P3B"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P3B"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419873939740"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5P3B"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P3B"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5P51" desc="Stellaris LM3S5P51" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419878189760">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5P51</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419878189760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P51"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419878189760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P51"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419878189760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P51"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419878414705">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5P51</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419878414705"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P51"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419878414705"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P51"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419878414705"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P51"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419878414705"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P51"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419878414705"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P51"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419878414705"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P51"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419878414705"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P51"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419878414705"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P51"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419878414705"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P51"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419878414705"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P51"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419878414705"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P51"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419878414705"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5P51"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P51"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5P56" desc="Stellaris LM3S5P56" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419879873004">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5P56</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419879873004"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5P56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P56"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419879873004"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5P56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P56"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419879873004"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5P56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P56"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419880073145">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5P56</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419880073145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5P56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P56"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419880073145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5P56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P56"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419880073145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5P56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P56"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419880073145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5P56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P56"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419880073145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5P56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P56"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419880073145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5P56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P56"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419880073145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5P56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P56"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419880073145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5P56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P56"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419880073145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5P56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P56"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419880073145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5P56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P56"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419880073145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5P56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P56"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419880073145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5P56"/>
							<attribute key="device.variant" value="Cortex M.LM3S5P56"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5R31" desc="Stellaris LM3S5R31" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419880960099">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5R31</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419880960099"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5R31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R31"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419880960099"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5R31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R31"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419880960099"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5R31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R31"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419881155536">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5R31</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419881155536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5R31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R31"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419881155536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5R31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R31"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419881155536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5R31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R31"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419881155536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5R31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R31"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419881155536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5R31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R31"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419881155536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5R31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R31"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419881155536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5R31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R31"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419881155536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5R31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R31"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419881155536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5R31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R31"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419881155536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5R31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R31"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419881155536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5R31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R31"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419881155536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5R31"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R31"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5R36" desc="Stellaris LM3S5R36" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419881955676">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5R36</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419881955676"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5R36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R36"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419881955676"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5R36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R36"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419881955676"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5R36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R36"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419882145982">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5R36</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419882145982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5R36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R36"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419882145982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5R36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R36"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419882145982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5R36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R36"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419882145982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5R36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R36"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419882145982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5R36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R36"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419882145982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5R36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R36"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419882145982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5R36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R36"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419882145982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5R36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R36"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419882145982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5R36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R36"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419882145982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5R36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R36"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419882145982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5R36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R36"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419882145982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5R36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5R36"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5T36" desc="Stellaris LM3S5T36" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419882935430">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5T36</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419882935430"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5T36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5T36"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419882935430"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5T36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5T36"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419882935430"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5T36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5T36"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419883125736">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5T36</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419883125736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5T36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5T36"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419883125736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5T36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5T36"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419883125736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5T36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5T36"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419883125736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5T36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5T36"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419883125736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5T36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5T36"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419883125736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5T36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5T36"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419883125736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5T36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5T36"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419883125736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5T36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5T36"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419883125736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5T36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5T36"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419883125736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5T36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5T36"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419883125736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5T36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5T36"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419883125736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5T36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5T36"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5U91" desc="Stellaris LM3S5U91" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419884186744">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5U91</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419884186744"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5U91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5U91"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419884186744"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5U91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5U91"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419884186744"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5U91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5U91"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419884391590">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5U91</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419884391590"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5U91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5U91"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419884391590"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5U91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5U91"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419884391590"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5U91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5U91"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419884391590"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5U91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5U91"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419884391590"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5U91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5U91"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419884391590"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5U91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5U91"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419884391590"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5U91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5U91"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419884391590"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5U91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5U91"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419884391590"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5U91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5U91"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419884391590"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5U91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5U91"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419884391590"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5U91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5U91"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419884391590"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5U91"/>
							<attribute key="device.variant" value="Cortex M.LM3S5U91"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S5Y36" desc="Stellaris LM3S5Y36" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419885196861">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5Y36</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419885196861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S5Y36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5Y36"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419885196861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S5Y36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5Y36"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419885196861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S5Y36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5Y36"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419885394437">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S5Y36</tag>
					<tag>Stellaris Cortex LM3S5xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419885394437"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S5Y36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5Y36"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419885394437"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S5Y36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5Y36"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419885394437"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S5Y36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5Y36"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419885394437"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S5Y36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5Y36"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419885394437"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S5Y36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5Y36"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419885394437"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S5Y36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5Y36"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419885394437"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S5Y36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5Y36"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419885394437"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S5Y36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5Y36"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419885394437"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S5Y36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5Y36"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419885394437"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S5Y36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5Y36"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419885394437"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S5Y36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5Y36"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419885394437"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S5Y36"/>
							<attribute key="device.variant" value="Cortex M.LM3S5Y36"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>
	<contents name="Stellaris Cortex LM3S6xxx" desc="Stellaris Cortex LM3S6xxx" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="Stellaris LM3S6100" desc="Stellaris LM3S6100" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419898214632">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6100</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419898214632"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6100"/>
							<attribute key="device.variant" value="Cortex M.LM3S6100"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419898214632"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6100"/>
							<attribute key="device.variant" value="Cortex M.LM3S6100"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419898214632"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6100"/>
							<attribute key="device.variant" value="Cortex M.LM3S6100"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419898448558">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6100</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419898448558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6100"/>
							<attribute key="device.variant" value="Cortex M.LM3S6100"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419898448558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6100"/>
							<attribute key="device.variant" value="Cortex M.LM3S6100"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419898448558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6100"/>
							<attribute key="device.variant" value="Cortex M.LM3S6100"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419898448558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6100"/>
							<attribute key="device.variant" value="Cortex M.LM3S6100"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419898448558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6100"/>
							<attribute key="device.variant" value="Cortex M.LM3S6100"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419898448558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6100"/>
							<attribute key="device.variant" value="Cortex M.LM3S6100"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419898448558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6100"/>
							<attribute key="device.variant" value="Cortex M.LM3S6100"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419898448558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6100"/>
							<attribute key="device.variant" value="Cortex M.LM3S6100"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419898448558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6100"/>
							<attribute key="device.variant" value="Cortex M.LM3S6100"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419898448558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6100"/>
							<attribute key="device.variant" value="Cortex M.LM3S6100"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419898448558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6100"/>
							<attribute key="device.variant" value="Cortex M.LM3S6100"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419898448558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6100"/>
							<attribute key="device.variant" value="Cortex M.LM3S6100"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6110" desc="Stellaris LM3S6110" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419899301727">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6110</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419899301727"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6110"/>
							<attribute key="device.variant" value="Cortex M.LM3S6110"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419899301727"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6110"/>
							<attribute key="device.variant" value="Cortex M.LM3S6110"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419899301727"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6110"/>
							<attribute key="device.variant" value="Cortex M.LM3S6110"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419899506145">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6110</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419899506145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6110"/>
							<attribute key="device.variant" value="Cortex M.LM3S6110"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419899506145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6110"/>
							<attribute key="device.variant" value="Cortex M.LM3S6110"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419899506145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6110"/>
							<attribute key="device.variant" value="Cortex M.LM3S6110"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419899506145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6110"/>
							<attribute key="device.variant" value="Cortex M.LM3S6110"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419899506145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6110"/>
							<attribute key="device.variant" value="Cortex M.LM3S6110"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419899506145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6110"/>
							<attribute key="device.variant" value="Cortex M.LM3S6110"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419899506145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6110"/>
							<attribute key="device.variant" value="Cortex M.LM3S6110"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419899506145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6110"/>
							<attribute key="device.variant" value="Cortex M.LM3S6110"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419899506145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6110"/>
							<attribute key="device.variant" value="Cortex M.LM3S6110"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419899506145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6110"/>
							<attribute key="device.variant" value="Cortex M.LM3S6110"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419899506145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6110"/>
							<attribute key="device.variant" value="Cortex M.LM3S6110"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419899506145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6110"/>
							<attribute key="device.variant" value="Cortex M.LM3S6110"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6420" desc="Stellaris LM3S6420" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419900325102">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6420</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419900325102"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6420"/>
							<attribute key="device.variant" value="Cortex M.LM3S6420"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419900325102"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6420"/>
							<attribute key="device.variant" value="Cortex M.LM3S6420"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419900325102"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6420"/>
							<attribute key="device.variant" value="Cortex M.LM3S6420"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419900525671">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6420</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419900525671"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6420"/>
							<attribute key="device.variant" value="Cortex M.LM3S6420"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419900525671"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6420"/>
							<attribute key="device.variant" value="Cortex M.LM3S6420"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419900525671"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6420"/>
							<attribute key="device.variant" value="Cortex M.LM3S6420"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419900525671"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6420"/>
							<attribute key="device.variant" value="Cortex M.LM3S6420"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419900525671"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6420"/>
							<attribute key="device.variant" value="Cortex M.LM3S6420"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419900525671"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6420"/>
							<attribute key="device.variant" value="Cortex M.LM3S6420"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419900525671"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6420"/>
							<attribute key="device.variant" value="Cortex M.LM3S6420"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419900525671"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6420"/>
							<attribute key="device.variant" value="Cortex M.LM3S6420"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419900525671"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6420"/>
							<attribute key="device.variant" value="Cortex M.LM3S6420"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419900525671"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6420"/>
							<attribute key="device.variant" value="Cortex M.LM3S6420"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419900525671"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6420"/>
							<attribute key="device.variant" value="Cortex M.LM3S6420"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419900525671"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6420"/>
							<attribute key="device.variant" value="Cortex M.LM3S6420"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6422" desc="Stellaris LM3S6422" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419901360023">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6422</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419901360023"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6422"/>
							<attribute key="device.variant" value="Cortex M.LM3S6422"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419901360023"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6422"/>
							<attribute key="device.variant" value="Cortex M.LM3S6422"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419901360023"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6422"/>
							<attribute key="device.variant" value="Cortex M.LM3S6422"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419901558882">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6422</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419901558882"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6422"/>
							<attribute key="device.variant" value="Cortex M.LM3S6422"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419901558882"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6422"/>
							<attribute key="device.variant" value="Cortex M.LM3S6422"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419901558882"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6422"/>
							<attribute key="device.variant" value="Cortex M.LM3S6422"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419901558882"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6422"/>
							<attribute key="device.variant" value="Cortex M.LM3S6422"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419901558882"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6422"/>
							<attribute key="device.variant" value="Cortex M.LM3S6422"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419901558882"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6422"/>
							<attribute key="device.variant" value="Cortex M.LM3S6422"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419901558882"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6422"/>
							<attribute key="device.variant" value="Cortex M.LM3S6422"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419901558882"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6422"/>
							<attribute key="device.variant" value="Cortex M.LM3S6422"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419901558882"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6422"/>
							<attribute key="device.variant" value="Cortex M.LM3S6422"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419901558882"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6422"/>
							<attribute key="device.variant" value="Cortex M.LM3S6422"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419901558882"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6422"/>
							<attribute key="device.variant" value="Cortex M.LM3S6422"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419901558882"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6422"/>
							<attribute key="device.variant" value="Cortex M.LM3S6422"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6432" desc="Stellaris LM3S6432" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419902498436">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6432</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419902498436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6432"/>
							<attribute key="device.variant" value="Cortex M.LM3S6432"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419902498436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6432"/>
							<attribute key="device.variant" value="Cortex M.LM3S6432"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419902498436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6432"/>
							<attribute key="device.variant" value="Cortex M.LM3S6432"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419902715684">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6432</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419902715684"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6432"/>
							<attribute key="device.variant" value="Cortex M.LM3S6432"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419902715684"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6432"/>
							<attribute key="device.variant" value="Cortex M.LM3S6432"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419902715684"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6432"/>
							<attribute key="device.variant" value="Cortex M.LM3S6432"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419902715684"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6432"/>
							<attribute key="device.variant" value="Cortex M.LM3S6432"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419902715684"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6432"/>
							<attribute key="device.variant" value="Cortex M.LM3S6432"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419902715684"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6432"/>
							<attribute key="device.variant" value="Cortex M.LM3S6432"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419902715684"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6432"/>
							<attribute key="device.variant" value="Cortex M.LM3S6432"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419902715684"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6432"/>
							<attribute key="device.variant" value="Cortex M.LM3S6432"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419902715684"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6432"/>
							<attribute key="device.variant" value="Cortex M.LM3S6432"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419902715684"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6432"/>
							<attribute key="device.variant" value="Cortex M.LM3S6432"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419902715684"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6432"/>
							<attribute key="device.variant" value="Cortex M.LM3S6432"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419902715684"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6432"/>
							<attribute key="device.variant" value="Cortex M.LM3S6432"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6537" desc="Stellaris LM3S6537" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419903538062">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6537</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419903538062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6537"/>
							<attribute key="device.variant" value="Cortex M.LM3S6537"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419903538062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6537"/>
							<attribute key="device.variant" value="Cortex M.LM3S6537"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419903538062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6537"/>
							<attribute key="device.variant" value="Cortex M.LM3S6537"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419903734783">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6537</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419903734783"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6537"/>
							<attribute key="device.variant" value="Cortex M.LM3S6537"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419903734783"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6537"/>
							<attribute key="device.variant" value="Cortex M.LM3S6537"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419903734783"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6537"/>
							<attribute key="device.variant" value="Cortex M.LM3S6537"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419903734783"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6537"/>
							<attribute key="device.variant" value="Cortex M.LM3S6537"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419903734783"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6537"/>
							<attribute key="device.variant" value="Cortex M.LM3S6537"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419903734783"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6537"/>
							<attribute key="device.variant" value="Cortex M.LM3S6537"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419903734783"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6537"/>
							<attribute key="device.variant" value="Cortex M.LM3S6537"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419903734783"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6537"/>
							<attribute key="device.variant" value="Cortex M.LM3S6537"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419903734783"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6537"/>
							<attribute key="device.variant" value="Cortex M.LM3S6537"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419903734783"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6537"/>
							<attribute key="device.variant" value="Cortex M.LM3S6537"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419903734783"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6537"/>
							<attribute key="device.variant" value="Cortex M.LM3S6537"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419903734783"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6537"/>
							<attribute key="device.variant" value="Cortex M.LM3S6537"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6610" desc="Stellaris LM3S6610" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419904691016">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6610</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419904691016"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6610"/>
							<attribute key="device.variant" value="Cortex M.LM3S6610"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419904691016"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6610"/>
							<attribute key="device.variant" value="Cortex M.LM3S6610"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419904691016"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6610"/>
							<attribute key="device.variant" value="Cortex M.LM3S6610"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419904909547">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6610</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419904909547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6610"/>
							<attribute key="device.variant" value="Cortex M.LM3S6610"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419904909547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6610"/>
							<attribute key="device.variant" value="Cortex M.LM3S6610"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419904909547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6610"/>
							<attribute key="device.variant" value="Cortex M.LM3S6610"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419904909547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6610"/>
							<attribute key="device.variant" value="Cortex M.LM3S6610"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419904909547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6610"/>
							<attribute key="device.variant" value="Cortex M.LM3S6610"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419904909547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6610"/>
							<attribute key="device.variant" value="Cortex M.LM3S6610"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419904909547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6610"/>
							<attribute key="device.variant" value="Cortex M.LM3S6610"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419904909547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6610"/>
							<attribute key="device.variant" value="Cortex M.LM3S6610"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419904909547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6610"/>
							<attribute key="device.variant" value="Cortex M.LM3S6610"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419904909547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6610"/>
							<attribute key="device.variant" value="Cortex M.LM3S6610"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419904909547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6610"/>
							<attribute key="device.variant" value="Cortex M.LM3S6610"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419904909547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6610"/>
							<attribute key="device.variant" value="Cortex M.LM3S6610"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6611" desc="Stellaris LM3S6611" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419905867063">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6611</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419905867063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6611"/>
							<attribute key="device.variant" value="Cortex M.LM3S6611"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419905867063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6611"/>
							<attribute key="device.variant" value="Cortex M.LM3S6611"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419905867063"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6611"/>
							<attribute key="device.variant" value="Cortex M.LM3S6611"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419906074475">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6611</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419906074475"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6611"/>
							<attribute key="device.variant" value="Cortex M.LM3S6611"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419906074475"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6611"/>
							<attribute key="device.variant" value="Cortex M.LM3S6611"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419906074475"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6611"/>
							<attribute key="device.variant" value="Cortex M.LM3S6611"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419906074475"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6611"/>
							<attribute key="device.variant" value="Cortex M.LM3S6611"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419906074475"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6611"/>
							<attribute key="device.variant" value="Cortex M.LM3S6611"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419906074475"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6611"/>
							<attribute key="device.variant" value="Cortex M.LM3S6611"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419906074475"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6611"/>
							<attribute key="device.variant" value="Cortex M.LM3S6611"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419906074475"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6611"/>
							<attribute key="device.variant" value="Cortex M.LM3S6611"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419906074475"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6611"/>
							<attribute key="device.variant" value="Cortex M.LM3S6611"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419906074475"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6611"/>
							<attribute key="device.variant" value="Cortex M.LM3S6611"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419906074475"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6611"/>
							<attribute key="device.variant" value="Cortex M.LM3S6611"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419906074475"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6611"/>
							<attribute key="device.variant" value="Cortex M.LM3S6611"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6618" desc="Stellaris LM3S6618" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419910233404">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6618</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419910233404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6618"/>
							<attribute key="device.variant" value="Cortex M.LM3S6618"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419910233404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6618"/>
							<attribute key="device.variant" value="Cortex M.LM3S6618"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419910233404"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6618"/>
							<attribute key="device.variant" value="Cortex M.LM3S6618"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419910485720">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6618</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419910485720"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6618"/>
							<attribute key="device.variant" value="Cortex M.LM3S6618"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419910485720"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6618"/>
							<attribute key="device.variant" value="Cortex M.LM3S6618"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419910485720"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6618"/>
							<attribute key="device.variant" value="Cortex M.LM3S6618"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419910485720"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6618"/>
							<attribute key="device.variant" value="Cortex M.LM3S6618"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419910485720"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6618"/>
							<attribute key="device.variant" value="Cortex M.LM3S6618"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419910485720"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6618"/>
							<attribute key="device.variant" value="Cortex M.LM3S6618"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419910485720"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6618"/>
							<attribute key="device.variant" value="Cortex M.LM3S6618"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419910485720"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6618"/>
							<attribute key="device.variant" value="Cortex M.LM3S6618"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419910485720"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6618"/>
							<attribute key="device.variant" value="Cortex M.LM3S6618"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419910485720"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6618"/>
							<attribute key="device.variant" value="Cortex M.LM3S6618"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419910485720"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6618"/>
							<attribute key="device.variant" value="Cortex M.LM3S6618"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419910485720"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6618"/>
							<attribute key="device.variant" value="Cortex M.LM3S6618"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6633" desc="Stellaris LM3S6633" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419911336750">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6633</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419911336750"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6633"/>
							<attribute key="device.variant" value="Cortex M.LM3S6633"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419911336750"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6633"/>
							<attribute key="device.variant" value="Cortex M.LM3S6633"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419911336750"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6633"/>
							<attribute key="device.variant" value="Cortex M.LM3S6633"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419911528766">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6633</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419911528766"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6633"/>
							<attribute key="device.variant" value="Cortex M.LM3S6633"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419911528766"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6633"/>
							<attribute key="device.variant" value="Cortex M.LM3S6633"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419911528766"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6633"/>
							<attribute key="device.variant" value="Cortex M.LM3S6633"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419911528766"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6633"/>
							<attribute key="device.variant" value="Cortex M.LM3S6633"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419911528766"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6633"/>
							<attribute key="device.variant" value="Cortex M.LM3S6633"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419911528766"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6633"/>
							<attribute key="device.variant" value="Cortex M.LM3S6633"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419911528766"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6633"/>
							<attribute key="device.variant" value="Cortex M.LM3S6633"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419911528766"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6633"/>
							<attribute key="device.variant" value="Cortex M.LM3S6633"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419911528766"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6633"/>
							<attribute key="device.variant" value="Cortex M.LM3S6633"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419911528766"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6633"/>
							<attribute key="device.variant" value="Cortex M.LM3S6633"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419911528766"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6633"/>
							<attribute key="device.variant" value="Cortex M.LM3S6633"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419911528766"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6633"/>
							<attribute key="device.variant" value="Cortex M.LM3S6633"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6637" desc="Stellaris LM3S6637" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419912323774">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6637</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419912323774"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6637"/>
							<attribute key="device.variant" value="Cortex M.LM3S6637"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419912323774"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6637"/>
							<attribute key="device.variant" value="Cortex M.LM3S6637"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419912323774"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6637"/>
							<attribute key="device.variant" value="Cortex M.LM3S6637"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419912508093">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6637</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419912508093"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6637"/>
							<attribute key="device.variant" value="Cortex M.LM3S6637"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419912508093"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6637"/>
							<attribute key="device.variant" value="Cortex M.LM3S6637"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419912508093"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6637"/>
							<attribute key="device.variant" value="Cortex M.LM3S6637"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419912508093"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6637"/>
							<attribute key="device.variant" value="Cortex M.LM3S6637"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419912508093"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6637"/>
							<attribute key="device.variant" value="Cortex M.LM3S6637"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419912508093"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6637"/>
							<attribute key="device.variant" value="Cortex M.LM3S6637"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419912508093"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6637"/>
							<attribute key="device.variant" value="Cortex M.LM3S6637"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419912508093"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6637"/>
							<attribute key="device.variant" value="Cortex M.LM3S6637"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419912508093"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6637"/>
							<attribute key="device.variant" value="Cortex M.LM3S6637"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419912508093"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6637"/>
							<attribute key="device.variant" value="Cortex M.LM3S6637"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419912508093"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6637"/>
							<attribute key="device.variant" value="Cortex M.LM3S6637"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419912508093"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6637"/>
							<attribute key="device.variant" value="Cortex M.LM3S6637"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6730" desc="Stellaris LM3S6730" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419913273165">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6730</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419913273165"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6730"/>
							<attribute key="device.variant" value="Cortex M.LM3S6730"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419913273165"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6730"/>
							<attribute key="device.variant" value="Cortex M.LM3S6730"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419913273165"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6730"/>
							<attribute key="device.variant" value="Cortex M.LM3S6730"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419913458767">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6730</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419913458767"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6730"/>
							<attribute key="device.variant" value="Cortex M.LM3S6730"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419913458767"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6730"/>
							<attribute key="device.variant" value="Cortex M.LM3S6730"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419913458767"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6730"/>
							<attribute key="device.variant" value="Cortex M.LM3S6730"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419913458767"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6730"/>
							<attribute key="device.variant" value="Cortex M.LM3S6730"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419913458767"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6730"/>
							<attribute key="device.variant" value="Cortex M.LM3S6730"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419913458767"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6730"/>
							<attribute key="device.variant" value="Cortex M.LM3S6730"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419913458767"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6730"/>
							<attribute key="device.variant" value="Cortex M.LM3S6730"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419913458767"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6730"/>
							<attribute key="device.variant" value="Cortex M.LM3S6730"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419913458767"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6730"/>
							<attribute key="device.variant" value="Cortex M.LM3S6730"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419913458767"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6730"/>
							<attribute key="device.variant" value="Cortex M.LM3S6730"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419913458767"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6730"/>
							<attribute key="device.variant" value="Cortex M.LM3S6730"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419913458767"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6730"/>
							<attribute key="device.variant" value="Cortex M.LM3S6730"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6753" desc="Stellaris LM3S6753" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419914252919">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6753</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419914252919"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6753"/>
							<attribute key="device.variant" value="Cortex M.LM3S6753"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419914252919"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6753"/>
							<attribute key="device.variant" value="Cortex M.LM3S6753"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419914252919"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6753"/>
							<attribute key="device.variant" value="Cortex M.LM3S6753"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419914444508">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6753</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419914444508"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6753"/>
							<attribute key="device.variant" value="Cortex M.LM3S6753"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419914444508"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6753"/>
							<attribute key="device.variant" value="Cortex M.LM3S6753"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419914444508"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6753"/>
							<attribute key="device.variant" value="Cortex M.LM3S6753"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419914444508"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6753"/>
							<attribute key="device.variant" value="Cortex M.LM3S6753"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419914444508"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6753"/>
							<attribute key="device.variant" value="Cortex M.LM3S6753"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419914444508"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6753"/>
							<attribute key="device.variant" value="Cortex M.LM3S6753"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419914444508"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6753"/>
							<attribute key="device.variant" value="Cortex M.LM3S6753"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419914444508"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6753"/>
							<attribute key="device.variant" value="Cortex M.LM3S6753"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419914444508"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6753"/>
							<attribute key="device.variant" value="Cortex M.LM3S6753"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419914444508"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6753"/>
							<attribute key="device.variant" value="Cortex M.LM3S6753"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419914444508"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6753"/>
							<attribute key="device.variant" value="Cortex M.LM3S6753"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419914444508"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6753"/>
							<attribute key="device.variant" value="Cortex M.LM3S6753"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6911" desc="Stellaris LM3S6911" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419915254483">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6911</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419915254483"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6911"/>
							<attribute key="device.variant" value="Cortex M.LM3S6911"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419915254483"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6911"/>
							<attribute key="device.variant" value="Cortex M.LM3S6911"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419915254483"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6911"/>
							<attribute key="device.variant" value="Cortex M.LM3S6911"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419915444361">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6911</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419915444361"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6911"/>
							<attribute key="device.variant" value="Cortex M.LM3S6911"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419915444361"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6911"/>
							<attribute key="device.variant" value="Cortex M.LM3S6911"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419915444361"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6911"/>
							<attribute key="device.variant" value="Cortex M.LM3S6911"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419915444361"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6911"/>
							<attribute key="device.variant" value="Cortex M.LM3S6911"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419915444361"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6911"/>
							<attribute key="device.variant" value="Cortex M.LM3S6911"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419915444361"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6911"/>
							<attribute key="device.variant" value="Cortex M.LM3S6911"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419915444361"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6911"/>
							<attribute key="device.variant" value="Cortex M.LM3S6911"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419915444361"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6911"/>
							<attribute key="device.variant" value="Cortex M.LM3S6911"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419915444361"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6911"/>
							<attribute key="device.variant" value="Cortex M.LM3S6911"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419915444361"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6911"/>
							<attribute key="device.variant" value="Cortex M.LM3S6911"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419915444361"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6911"/>
							<attribute key="device.variant" value="Cortex M.LM3S6911"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419915444361"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6911"/>
							<attribute key="device.variant" value="Cortex M.LM3S6911"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6918" desc="Stellaris LM3S6918" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419916238942">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6918</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419916238942"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6918"/>
							<attribute key="device.variant" value="Cortex M.LM3S6918"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419916238942"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6918"/>
							<attribute key="device.variant" value="Cortex M.LM3S6918"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419916238942"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6918"/>
							<attribute key="device.variant" value="Cortex M.LM3S6918"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419916437373">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6918</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419916437373"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6918"/>
							<attribute key="device.variant" value="Cortex M.LM3S6918"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419916437373"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6918"/>
							<attribute key="device.variant" value="Cortex M.LM3S6918"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419916437373"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6918"/>
							<attribute key="device.variant" value="Cortex M.LM3S6918"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419916437373"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6918"/>
							<attribute key="device.variant" value="Cortex M.LM3S6918"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419916437373"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6918"/>
							<attribute key="device.variant" value="Cortex M.LM3S6918"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419916437373"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6918"/>
							<attribute key="device.variant" value="Cortex M.LM3S6918"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419916437373"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6918"/>
							<attribute key="device.variant" value="Cortex M.LM3S6918"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419916437373"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6918"/>
							<attribute key="device.variant" value="Cortex M.LM3S6918"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419916437373"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6918"/>
							<attribute key="device.variant" value="Cortex M.LM3S6918"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419916437373"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6918"/>
							<attribute key="device.variant" value="Cortex M.LM3S6918"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419916437373"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6918"/>
							<attribute key="device.variant" value="Cortex M.LM3S6918"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419916437373"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6918"/>
							<attribute key="device.variant" value="Cortex M.LM3S6918"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6938" desc="Stellaris LM3S6938" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419917248204">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6938</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419917248204"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6938"/>
							<attribute key="device.variant" value="Cortex M.LM3S6938"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419917248204"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6938"/>
							<attribute key="device.variant" value="Cortex M.LM3S6938"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419917248204"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6938"/>
							<attribute key="device.variant" value="Cortex M.LM3S6938"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419917438082">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6938</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419917438082"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6938"/>
							<attribute key="device.variant" value="Cortex M.LM3S6938"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419917438082"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6938"/>
							<attribute key="device.variant" value="Cortex M.LM3S6938"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419917438082"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6938"/>
							<attribute key="device.variant" value="Cortex M.LM3S6938"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419917438082"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6938"/>
							<attribute key="device.variant" value="Cortex M.LM3S6938"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419917438082"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6938"/>
							<attribute key="device.variant" value="Cortex M.LM3S6938"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419917438082"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6938"/>
							<attribute key="device.variant" value="Cortex M.LM3S6938"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419917438082"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6938"/>
							<attribute key="device.variant" value="Cortex M.LM3S6938"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419917438082"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6938"/>
							<attribute key="device.variant" value="Cortex M.LM3S6938"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419917438082"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6938"/>
							<attribute key="device.variant" value="Cortex M.LM3S6938"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419917438082"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6938"/>
							<attribute key="device.variant" value="Cortex M.LM3S6938"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419917438082"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6938"/>
							<attribute key="device.variant" value="Cortex M.LM3S6938"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419917438082"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6938"/>
							<attribute key="device.variant" value="Cortex M.LM3S6938"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6950" desc="Stellaris LM3S6950" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419918412704">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6950</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419918412704"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6950"/>
							<attribute key="device.variant" value="Cortex M.LM3S6950"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419918412704"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6950"/>
							<attribute key="device.variant" value="Cortex M.LM3S6950"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419918412704"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6950"/>
							<attribute key="device.variant" value="Cortex M.LM3S6950"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419918615839">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6950</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419918615839"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6950"/>
							<attribute key="device.variant" value="Cortex M.LM3S6950"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419918615839"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6950"/>
							<attribute key="device.variant" value="Cortex M.LM3S6950"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419918615839"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6950"/>
							<attribute key="device.variant" value="Cortex M.LM3S6950"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419918615839"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6950"/>
							<attribute key="device.variant" value="Cortex M.LM3S6950"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419918615839"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6950"/>
							<attribute key="device.variant" value="Cortex M.LM3S6950"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419918615839"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6950"/>
							<attribute key="device.variant" value="Cortex M.LM3S6950"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419918615839"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6950"/>
							<attribute key="device.variant" value="Cortex M.LM3S6950"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419918615839"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6950"/>
							<attribute key="device.variant" value="Cortex M.LM3S6950"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419918615839"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6950"/>
							<attribute key="device.variant" value="Cortex M.LM3S6950"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419918615839"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6950"/>
							<attribute key="device.variant" value="Cortex M.LM3S6950"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419918615839"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6950"/>
							<attribute key="device.variant" value="Cortex M.LM3S6950"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419918615839"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6950"/>
							<attribute key="device.variant" value="Cortex M.LM3S6950"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6952" desc="Stellaris LM3S6952" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419922413830">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6952</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419922413830"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6952"/>
							<attribute key="device.variant" value="Cortex M.LM3S6952"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419922413830"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6952"/>
							<attribute key="device.variant" value="Cortex M.LM3S6952"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419922413830"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6952"/>
							<attribute key="device.variant" value="Cortex M.LM3S6952"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419922617820">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6952</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419922617820"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6952"/>
							<attribute key="device.variant" value="Cortex M.LM3S6952"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419922617820"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6952"/>
							<attribute key="device.variant" value="Cortex M.LM3S6952"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419922617820"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6952"/>
							<attribute key="device.variant" value="Cortex M.LM3S6952"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419922617820"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6952"/>
							<attribute key="device.variant" value="Cortex M.LM3S6952"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419922617820"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6952"/>
							<attribute key="device.variant" value="Cortex M.LM3S6952"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419922617820"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6952"/>
							<attribute key="device.variant" value="Cortex M.LM3S6952"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419922617820"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6952"/>
							<attribute key="device.variant" value="Cortex M.LM3S6952"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419922617820"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6952"/>
							<attribute key="device.variant" value="Cortex M.LM3S6952"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419922617820"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6952"/>
							<attribute key="device.variant" value="Cortex M.LM3S6952"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419922617820"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6952"/>
							<attribute key="device.variant" value="Cortex M.LM3S6952"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419922617820"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6952"/>
							<attribute key="device.variant" value="Cortex M.LM3S6952"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419922617820"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6952"/>
							<attribute key="device.variant" value="Cortex M.LM3S6952"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6965" desc="Stellaris LM3S6965" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419923447468">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6965</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419923447468"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6965"/>
							<attribute key="device.variant" value="Cortex M.LM3S6965"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419923447468"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6965"/>
							<attribute key="device.variant" value="Cortex M.LM3S6965"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419923447468"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6965"/>
							<attribute key="device.variant" value="Cortex M.LM3S6965"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419923809690">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6965</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419923809690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6965"/>
							<attribute key="device.variant" value="Cortex M.LM3S6965"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419923809690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6965"/>
							<attribute key="device.variant" value="Cortex M.LM3S6965"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419923809690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6965"/>
							<attribute key="device.variant" value="Cortex M.LM3S6965"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419923809690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6965"/>
							<attribute key="device.variant" value="Cortex M.LM3S6965"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419923809690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6965"/>
							<attribute key="device.variant" value="Cortex M.LM3S6965"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419923809690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6965"/>
							<attribute key="device.variant" value="Cortex M.LM3S6965"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419923809690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6965"/>
							<attribute key="device.variant" value="Cortex M.LM3S6965"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419923809690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6965"/>
							<attribute key="device.variant" value="Cortex M.LM3S6965"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419923809690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6965"/>
							<attribute key="device.variant" value="Cortex M.LM3S6965"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419923809690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6965"/>
							<attribute key="device.variant" value="Cortex M.LM3S6965"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419923809690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6965"/>
							<attribute key="device.variant" value="Cortex M.LM3S6965"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419923809690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6965"/>
							<attribute key="device.variant" value="Cortex M.LM3S6965"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6C11" desc="Stellaris LM3S6C11" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419924608547">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6C11</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419924608547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6C11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C11"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419924608547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6C11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C11"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419924608547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6C11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C11"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419924808689">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6C11</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419924808689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6C11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C11"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419924808689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6C11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C11"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419924808689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6C11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C11"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419924808689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6C11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C11"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419924808689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6C11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C11"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419924808689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6C11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C11"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419924808689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6C11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C11"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419924808689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6C11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C11"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419924808689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6C11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C11"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419924808689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6C11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C11"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419924808689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6C11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C11"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419924808689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6C11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C11"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6C65" desc="Stellaris LM3S6C65" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419925620803">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6C65</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419925620803"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6C65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C65"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419925620803"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6C65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C65"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419925620803"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6C65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C65"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419925817951">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6C65</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419925817951"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6C65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C65"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419925817951"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6C65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C65"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419925817951"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6C65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C65"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419925817951"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6C65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C65"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419925817951"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6C65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C65"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419925817951"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6C65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C65"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419925817951"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6C65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C65"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419925817951"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6C65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C65"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419925817951"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6C65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C65"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419925817951"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6C65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C65"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419925817951"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6C65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C65"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419925817951"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6C65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6C65"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6G11" desc="Stellaris LM3S6G11" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419926644177">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6G11</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419926644177"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6G11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G11"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419926644177"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6G11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G11"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419926644177"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6G11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G11"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419926840043">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6G11</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419926840043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6G11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G11"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419926840043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6G11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G11"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419926840043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6G11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G11"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419926840043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6G11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G11"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419926840043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6G11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G11"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419926840043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6G11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G11"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419926840043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6G11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G11"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419926840043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6G11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G11"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419926840043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6G11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G11"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419926840043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6G11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G11"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419926840043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6G11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G11"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419926840043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6G11"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G11"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S6G65" desc="Stellaris LM3S6G65" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419927649591">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6G65</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419927649591"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S6G65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G65"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419927649591"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S6G65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G65"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419927649591"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S6G65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G65"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419927846311">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S6G65</tag>
					<tag>Stellaris Cortex LM3S6xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419927846311"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S6G65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G65"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419927846311"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S6G65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G65"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419927846311"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S6G65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G65"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419927846311"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S6G65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G65"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419927846311"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S6G65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G65"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419927846311"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S6G65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G65"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419927846311"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S6G65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G65"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419927846311"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S6G65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G65"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419927846311"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S6G65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G65"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419927846311"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S6G65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G65"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419927846311"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S6G65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G65"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419927846311"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S6G65"/>
							<attribute key="device.variant" value="Cortex M.LM3S6G65"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>
	<contents name="Stellaris Cortex LM3S8xxx" desc="Stellaris Cortex LM3S8xxx" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="Stellaris LM3S8530" desc="Stellaris LM3S8530" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419932939236">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8530</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419932939236"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S8530"/>
							<attribute key="device.variant" value="Cortex M.LM3S8530"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419932939236"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S8530"/>
							<attribute key="device.variant" value="Cortex M.LM3S8530"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419932939236"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S8530"/>
							<attribute key="device.variant" value="Cortex M.LM3S8530"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419933171024">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8530</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419933171024"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S8530"/>
							<attribute key="device.variant" value="Cortex M.LM3S8530"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419933171024"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S8530"/>
							<attribute key="device.variant" value="Cortex M.LM3S8530"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419933171024"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S8530"/>
							<attribute key="device.variant" value="Cortex M.LM3S8530"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419933171024"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S8530"/>
							<attribute key="device.variant" value="Cortex M.LM3S8530"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419933171024"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S8530"/>
							<attribute key="device.variant" value="Cortex M.LM3S8530"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419933171024"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S8530"/>
							<attribute key="device.variant" value="Cortex M.LM3S8530"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419933171024"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S8530"/>
							<attribute key="device.variant" value="Cortex M.LM3S8530"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419933171024"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S8530"/>
							<attribute key="device.variant" value="Cortex M.LM3S8530"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419933171024"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S8530"/>
							<attribute key="device.variant" value="Cortex M.LM3S8530"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419933171024"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S8530"/>
							<attribute key="device.variant" value="Cortex M.LM3S8530"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419933171024"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S8530"/>
							<attribute key="device.variant" value="Cortex M.LM3S8530"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419933171024"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S8530"/>
							<attribute key="device.variant" value="Cortex M.LM3S8530"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S8538" desc="Stellaris LM3S8538" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419934118277">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8538</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419934118277"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S8538"/>
							<attribute key="device.variant" value="Cortex M.LM3S8538"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419934118277"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S8538"/>
							<attribute key="device.variant" value="Cortex M.LM3S8538"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419934118277"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S8538"/>
							<attribute key="device.variant" value="Cortex M.LM3S8538"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419934314997">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8538</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419934314997"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S8538"/>
							<attribute key="device.variant" value="Cortex M.LM3S8538"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419934314997"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S8538"/>
							<attribute key="device.variant" value="Cortex M.LM3S8538"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419934314997"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S8538"/>
							<attribute key="device.variant" value="Cortex M.LM3S8538"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419934314997"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S8538"/>
							<attribute key="device.variant" value="Cortex M.LM3S8538"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419934314997"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S8538"/>
							<attribute key="device.variant" value="Cortex M.LM3S8538"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419934314997"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S8538"/>
							<attribute key="device.variant" value="Cortex M.LM3S8538"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419934314997"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S8538"/>
							<attribute key="device.variant" value="Cortex M.LM3S8538"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419934314997"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S8538"/>
							<attribute key="device.variant" value="Cortex M.LM3S8538"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419934314997"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S8538"/>
							<attribute key="device.variant" value="Cortex M.LM3S8538"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419934314997"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S8538"/>
							<attribute key="device.variant" value="Cortex M.LM3S8538"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419934314997"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S8538"/>
							<attribute key="device.variant" value="Cortex M.LM3S8538"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419934314997"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S8538"/>
							<attribute key="device.variant" value="Cortex M.LM3S8538"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S8630" desc="Stellaris LM3S8630" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419935125828">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8630</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419935125828"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S8630"/>
							<attribute key="device.variant" value="Cortex M.LM3S8630"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419935125828"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S8630"/>
							<attribute key="device.variant" value="Cortex M.LM3S8630"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419935125828"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S8630"/>
							<attribute key="device.variant" value="Cortex M.LM3S8630"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419935308436">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8630</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419935308436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S8630"/>
							<attribute key="device.variant" value="Cortex M.LM3S8630"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419935308436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S8630"/>
							<attribute key="device.variant" value="Cortex M.LM3S8630"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419935308436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S8630"/>
							<attribute key="device.variant" value="Cortex M.LM3S8630"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419935308436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S8630"/>
							<attribute key="device.variant" value="Cortex M.LM3S8630"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419935308436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S8630"/>
							<attribute key="device.variant" value="Cortex M.LM3S8630"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419935308436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S8630"/>
							<attribute key="device.variant" value="Cortex M.LM3S8630"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419935308436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S8630"/>
							<attribute key="device.variant" value="Cortex M.LM3S8630"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419935308436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S8630"/>
							<attribute key="device.variant" value="Cortex M.LM3S8630"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419935308436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S8630"/>
							<attribute key="device.variant" value="Cortex M.LM3S8630"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419935308436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S8630"/>
							<attribute key="device.variant" value="Cortex M.LM3S8630"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419935308436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S8630"/>
							<attribute key="device.variant" value="Cortex M.LM3S8630"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419935308436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S8630"/>
							<attribute key="device.variant" value="Cortex M.LM3S8630"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S8730" desc="Stellaris LM3S8730" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419940047264">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8730</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419940047264"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S8730"/>
							<attribute key="device.variant" value="Cortex M.LM3S8730"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419940047264"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S8730"/>
							<attribute key="device.variant" value="Cortex M.LM3S8730"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419940047264"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S8730"/>
							<attribute key="device.variant" value="Cortex M.LM3S8730"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419940250827">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8730</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419940250827"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S8730"/>
							<attribute key="device.variant" value="Cortex M.LM3S8730"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419940250827"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S8730"/>
							<attribute key="device.variant" value="Cortex M.LM3S8730"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419940250827"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S8730"/>
							<attribute key="device.variant" value="Cortex M.LM3S8730"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419940250827"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S8730"/>
							<attribute key="device.variant" value="Cortex M.LM3S8730"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419940250827"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S8730"/>
							<attribute key="device.variant" value="Cortex M.LM3S8730"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419940250827"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S8730"/>
							<attribute key="device.variant" value="Cortex M.LM3S8730"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419940250827"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S8730"/>
							<attribute key="device.variant" value="Cortex M.LM3S8730"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419940250827"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S8730"/>
							<attribute key="device.variant" value="Cortex M.LM3S8730"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419940250827"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S8730"/>
							<attribute key="device.variant" value="Cortex M.LM3S8730"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419940250827"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S8730"/>
							<attribute key="device.variant" value="Cortex M.LM3S8730"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419940250827"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S8730"/>
							<attribute key="device.variant" value="Cortex M.LM3S8730"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419940250827"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S8730"/>
							<attribute key="device.variant" value="Cortex M.LM3S8730"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S8733" desc="Stellaris LM3S8733" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419941100574">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8733</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419941100574"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S8733"/>
							<attribute key="device.variant" value="Cortex M.LM3S8733"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419941100574"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S8733"/>
							<attribute key="device.variant" value="Cortex M.LM3S8733"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419941100574"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S8733"/>
							<attribute key="device.variant" value="Cortex M.LM3S8733"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419941289170">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8733</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419941289170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S8733"/>
							<attribute key="device.variant" value="Cortex M.LM3S8733"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419941289170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S8733"/>
							<attribute key="device.variant" value="Cortex M.LM3S8733"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419941289170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S8733"/>
							<attribute key="device.variant" value="Cortex M.LM3S8733"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419941289170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S8733"/>
							<attribute key="device.variant" value="Cortex M.LM3S8733"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419941289170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S8733"/>
							<attribute key="device.variant" value="Cortex M.LM3S8733"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419941289170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S8733"/>
							<attribute key="device.variant" value="Cortex M.LM3S8733"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419941289170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S8733"/>
							<attribute key="device.variant" value="Cortex M.LM3S8733"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419941289170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S8733"/>
							<attribute key="device.variant" value="Cortex M.LM3S8733"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419941289170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S8733"/>
							<attribute key="device.variant" value="Cortex M.LM3S8733"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419941289170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S8733"/>
							<attribute key="device.variant" value="Cortex M.LM3S8733"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419941289170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S8733"/>
							<attribute key="device.variant" value="Cortex M.LM3S8733"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419941289170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S8733"/>
							<attribute key="device.variant" value="Cortex M.LM3S8733"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S8738" desc="Stellaris LM3S8738" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419942098718">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8738</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419942098718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S8738"/>
							<attribute key="device.variant" value="Cortex M.LM3S8738"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419942098718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S8738"/>
							<attribute key="device.variant" value="Cortex M.LM3S8738"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419942098718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S8738"/>
							<attribute key="device.variant" value="Cortex M.LM3S8738"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419942300570">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8738</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419942300570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S8738"/>
							<attribute key="device.variant" value="Cortex M.LM3S8738"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419942300570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S8738"/>
							<attribute key="device.variant" value="Cortex M.LM3S8738"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419942300570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S8738"/>
							<attribute key="device.variant" value="Cortex M.LM3S8738"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419942300570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S8738"/>
							<attribute key="device.variant" value="Cortex M.LM3S8738"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419942300570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S8738"/>
							<attribute key="device.variant" value="Cortex M.LM3S8738"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419942300570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S8738"/>
							<attribute key="device.variant" value="Cortex M.LM3S8738"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419942300570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S8738"/>
							<attribute key="device.variant" value="Cortex M.LM3S8738"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419942300570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S8738"/>
							<attribute key="device.variant" value="Cortex M.LM3S8738"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419942300570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S8738"/>
							<attribute key="device.variant" value="Cortex M.LM3S8738"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419942300570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S8738"/>
							<attribute key="device.variant" value="Cortex M.LM3S8738"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419942300570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S8738"/>
							<attribute key="device.variant" value="Cortex M.LM3S8738"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419942300570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S8738"/>
							<attribute key="device.variant" value="Cortex M.LM3S8738"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S8930" desc="Stellaris LM3S8930" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419943135349">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8930</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419943135349"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S8930"/>
							<attribute key="device.variant" value="Cortex M.LM3S8930"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419943135349"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S8930"/>
							<attribute key="device.variant" value="Cortex M.LM3S8930"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419943135349"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S8930"/>
							<attribute key="device.variant" value="Cortex M.LM3S8930"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419943335064">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8930</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419943335064"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S8930"/>
							<attribute key="device.variant" value="Cortex M.LM3S8930"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419943335064"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S8930"/>
							<attribute key="device.variant" value="Cortex M.LM3S8930"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419943335064"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S8930"/>
							<attribute key="device.variant" value="Cortex M.LM3S8930"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419943335064"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S8930"/>
							<attribute key="device.variant" value="Cortex M.LM3S8930"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419943335064"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S8930"/>
							<attribute key="device.variant" value="Cortex M.LM3S8930"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419943335064"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S8930"/>
							<attribute key="device.variant" value="Cortex M.LM3S8930"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419943335064"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S8930"/>
							<attribute key="device.variant" value="Cortex M.LM3S8930"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419943335064"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S8930"/>
							<attribute key="device.variant" value="Cortex M.LM3S8930"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419943335064"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S8930"/>
							<attribute key="device.variant" value="Cortex M.LM3S8930"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419943335064"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S8930"/>
							<attribute key="device.variant" value="Cortex M.LM3S8930"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419943335064"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S8930"/>
							<attribute key="device.variant" value="Cortex M.LM3S8930"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419943335064"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S8930"/>
							<attribute key="device.variant" value="Cortex M.LM3S8930"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S8933" desc="Stellaris LM3S8933" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419944144612">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8933</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419944144612"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S8933"/>
							<attribute key="device.variant" value="Cortex M.LM3S8933"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419944144612"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S8933"/>
							<attribute key="device.variant" value="Cortex M.LM3S8933"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419944144612"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S8933"/>
							<attribute key="device.variant" value="Cortex M.LM3S8933"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419944334917">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8933</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419944334917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S8933"/>
							<attribute key="device.variant" value="Cortex M.LM3S8933"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419944334917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S8933"/>
							<attribute key="device.variant" value="Cortex M.LM3S8933"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419944334917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S8933"/>
							<attribute key="device.variant" value="Cortex M.LM3S8933"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419944334917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S8933"/>
							<attribute key="device.variant" value="Cortex M.LM3S8933"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419944334917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S8933"/>
							<attribute key="device.variant" value="Cortex M.LM3S8933"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419944334917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S8933"/>
							<attribute key="device.variant" value="Cortex M.LM3S8933"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419944334917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S8933"/>
							<attribute key="device.variant" value="Cortex M.LM3S8933"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419944334917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S8933"/>
							<attribute key="device.variant" value="Cortex M.LM3S8933"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419944334917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S8933"/>
							<attribute key="device.variant" value="Cortex M.LM3S8933"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419944334917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S8933"/>
							<attribute key="device.variant" value="Cortex M.LM3S8933"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419944334917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S8933"/>
							<attribute key="device.variant" value="Cortex M.LM3S8933"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419944334917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S8933"/>
							<attribute key="device.variant" value="Cortex M.LM3S8933"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S8938" desc="Stellaris LM3S8938" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419945233845">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8938</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419945233845"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S8938"/>
							<attribute key="device.variant" value="Cortex M.LM3S8938"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419945233845"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S8938"/>
							<attribute key="device.variant" value="Cortex M.LM3S8938"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419945233845"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S8938"/>
							<attribute key="device.variant" value="Cortex M.LM3S8938"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419945430138">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8938</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419945430138"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S8938"/>
							<attribute key="device.variant" value="Cortex M.LM3S8938"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419945430138"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S8938"/>
							<attribute key="device.variant" value="Cortex M.LM3S8938"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419945430138"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S8938"/>
							<attribute key="device.variant" value="Cortex M.LM3S8938"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419945430138"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S8938"/>
							<attribute key="device.variant" value="Cortex M.LM3S8938"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419945430138"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S8938"/>
							<attribute key="device.variant" value="Cortex M.LM3S8938"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419945430138"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S8938"/>
							<attribute key="device.variant" value="Cortex M.LM3S8938"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419945430138"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S8938"/>
							<attribute key="device.variant" value="Cortex M.LM3S8938"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419945430138"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S8938"/>
							<attribute key="device.variant" value="Cortex M.LM3S8938"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419945430138"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S8938"/>
							<attribute key="device.variant" value="Cortex M.LM3S8938"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419945430138"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S8938"/>
							<attribute key="device.variant" value="Cortex M.LM3S8938"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419945430138"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S8938"/>
							<attribute key="device.variant" value="Cortex M.LM3S8938"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419945430138"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S8938"/>
							<attribute key="device.variant" value="Cortex M.LM3S8938"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S8962" desc="Stellaris LM3S8962" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419946231560">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8962</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419946231560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S8962"/>
							<attribute key="device.variant" value="Cortex M.LM3S8962"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419946231560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S8962"/>
							<attribute key="device.variant" value="Cortex M.LM3S8962"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419946231560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S8962"/>
							<attribute key="device.variant" value="Cortex M.LM3S8962"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419946418872">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8962</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419946418872"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S8962"/>
							<attribute key="device.variant" value="Cortex M.LM3S8962"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419946418872"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S8962"/>
							<attribute key="device.variant" value="Cortex M.LM3S8962"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419946418872"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S8962"/>
							<attribute key="device.variant" value="Cortex M.LM3S8962"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419946418872"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S8962"/>
							<attribute key="device.variant" value="Cortex M.LM3S8962"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419946418872"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S8962"/>
							<attribute key="device.variant" value="Cortex M.LM3S8962"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419946418872"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S8962"/>
							<attribute key="device.variant" value="Cortex M.LM3S8962"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419946418872"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S8962"/>
							<attribute key="device.variant" value="Cortex M.LM3S8962"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419946418872"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S8962"/>
							<attribute key="device.variant" value="Cortex M.LM3S8962"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419946418872"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S8962"/>
							<attribute key="device.variant" value="Cortex M.LM3S8962"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419946418872"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S8962"/>
							<attribute key="device.variant" value="Cortex M.LM3S8962"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419946418872"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S8962"/>
							<attribute key="device.variant" value="Cortex M.LM3S8962"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419946418872"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S8962"/>
							<attribute key="device.variant" value="Cortex M.LM3S8962"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S8970" desc="Stellaris LM3S8970" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419947206182">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8970</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419947206182"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S8970"/>
							<attribute key="device.variant" value="Cortex M.LM3S8970"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419947206182"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S8970"/>
							<attribute key="device.variant" value="Cortex M.LM3S8970"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419947206182"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S8970"/>
							<attribute key="device.variant" value="Cortex M.LM3S8970"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419947394350">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8970</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419947394350"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S8970"/>
							<attribute key="device.variant" value="Cortex M.LM3S8970"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419947394350"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S8970"/>
							<attribute key="device.variant" value="Cortex M.LM3S8970"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419947394350"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S8970"/>
							<attribute key="device.variant" value="Cortex M.LM3S8970"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419947394350"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S8970"/>
							<attribute key="device.variant" value="Cortex M.LM3S8970"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419947394350"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S8970"/>
							<attribute key="device.variant" value="Cortex M.LM3S8970"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419947394350"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S8970"/>
							<attribute key="device.variant" value="Cortex M.LM3S8970"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419947394350"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S8970"/>
							<attribute key="device.variant" value="Cortex M.LM3S8970"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419947394350"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S8970"/>
							<attribute key="device.variant" value="Cortex M.LM3S8970"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419947394350"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S8970"/>
							<attribute key="device.variant" value="Cortex M.LM3S8970"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419947394350"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S8970"/>
							<attribute key="device.variant" value="Cortex M.LM3S8970"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419947394350"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S8970"/>
							<attribute key="device.variant" value="Cortex M.LM3S8970"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419947394350"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S8970"/>
							<attribute key="device.variant" value="Cortex M.LM3S8970"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S8971" desc="Stellaris LM3S8971" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419948318509">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8971</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419948318509"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S8971"/>
							<attribute key="device.variant" value="Cortex M.LM3S8971"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419948318509"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S8971"/>
							<attribute key="device.variant" value="Cortex M.LM3S8971"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419948318509"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S8971"/>
							<attribute key="device.variant" value="Cortex M.LM3S8971"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419948541744">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8971</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419948541744"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S8971"/>
							<attribute key="device.variant" value="Cortex M.LM3S8971"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419948541744"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S8971"/>
							<attribute key="device.variant" value="Cortex M.LM3S8971"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419948541744"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S8971"/>
							<attribute key="device.variant" value="Cortex M.LM3S8971"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419948541744"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S8971"/>
							<attribute key="device.variant" value="Cortex M.LM3S8971"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419948541744"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S8971"/>
							<attribute key="device.variant" value="Cortex M.LM3S8971"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419948541744"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S8971"/>
							<attribute key="device.variant" value="Cortex M.LM3S8971"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419948541744"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S8971"/>
							<attribute key="device.variant" value="Cortex M.LM3S8971"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419948541744"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S8971"/>
							<attribute key="device.variant" value="Cortex M.LM3S8971"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419948541744"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S8971"/>
							<attribute key="device.variant" value="Cortex M.LM3S8971"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419948541744"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S8971"/>
							<attribute key="device.variant" value="Cortex M.LM3S8971"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419948541744"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S8971"/>
							<attribute key="device.variant" value="Cortex M.LM3S8971"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419948541744"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S8971"/>
							<attribute key="device.variant" value="Cortex M.LM3S8971"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S8C62" desc="Stellaris LM3S8C62" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419951815004">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8C62</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419951815004"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S8C62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8C62"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419951815004"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S8C62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8C62"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419951815004"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S8C62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8C62"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419952019850">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8C62</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419952019850"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S8C62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8C62"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419952019850"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S8C62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8C62"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419952019850"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S8C62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8C62"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419952019850"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S8C62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8C62"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419952019850"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S8C62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8C62"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419952019850"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S8C62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8C62"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419952019850"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S8C62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8C62"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419952019850"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S8C62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8C62"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419952019850"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S8C62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8C62"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419952019850"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S8C62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8C62"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419952019850"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S8C62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8C62"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419952019850"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S8C62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8C62"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S8G62" desc="Stellaris LM3S8G62" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419952857623">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8G62</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419952857623"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S8G62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8G62"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419952857623"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S8G62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8G62"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419952857623"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S8G62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8G62"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419953052633">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S8G62</tag>
					<tag>Stellaris Cortex LM3S8xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419953052633"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S8G62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8G62"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419953052633"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S8G62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8G62"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419953052633"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S8G62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8G62"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419953052633"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S8G62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8G62"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419953052633"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S8G62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8G62"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419953052633"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S8G62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8G62"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419953052633"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S8G62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8G62"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419953052633"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S8G62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8G62"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419953052633"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S8G62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8G62"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419953052633"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S8G62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8G62"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419953052633"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S8G62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8G62"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419953052633"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S8G62"/>
							<attribute key="device.variant" value="Cortex M.LM3S8G62"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>
	<contents name="Stellaris Cortex LM3S9xxx" desc="Stellaris Cortex LM3S9xxx" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="Stellaris LM3S9781" desc="Stellaris LM3S9781" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419956685121">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9781</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419956685121"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9781"/>
							<attribute key="device.variant" value="Cortex M.LM3S9781"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419956685121"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9781"/>
							<attribute key="device.variant" value="Cortex M.LM3S9781"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419956685121"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9781"/>
							<attribute key="device.variant" value="Cortex M.LM3S9781"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419956908356">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9781</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419956908356"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9781"/>
							<attribute key="device.variant" value="Cortex M.LM3S9781"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419956908356"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9781"/>
							<attribute key="device.variant" value="Cortex M.LM3S9781"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419956908356"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9781"/>
							<attribute key="device.variant" value="Cortex M.LM3S9781"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419956908356"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9781"/>
							<attribute key="device.variant" value="Cortex M.LM3S9781"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419956908356"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9781"/>
							<attribute key="device.variant" value="Cortex M.LM3S9781"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419956908356"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9781"/>
							<attribute key="device.variant" value="Cortex M.LM3S9781"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419956908356"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9781"/>
							<attribute key="device.variant" value="Cortex M.LM3S9781"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419956908356"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9781"/>
							<attribute key="device.variant" value="Cortex M.LM3S9781"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419956908356"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9781"/>
							<attribute key="device.variant" value="Cortex M.LM3S9781"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419956908356"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9781"/>
							<attribute key="device.variant" value="Cortex M.LM3S9781"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419956908356"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9781"/>
							<attribute key="device.variant" value="Cortex M.LM3S9781"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419956908356"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9781"/>
							<attribute key="device.variant" value="Cortex M.LM3S9781"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9790" desc="Stellaris LM3S9790" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419957764518">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9790</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419957764518"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9790"/>
							<attribute key="device.variant" value="Cortex M.LM3S9790"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419957764518"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9790"/>
							<attribute key="device.variant" value="Cortex M.LM3S9790"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419957764518"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9790"/>
							<attribute key="device.variant" value="Cortex M.LM3S9790"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419957961239">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9790</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419957961239"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9790"/>
							<attribute key="device.variant" value="Cortex M.LM3S9790"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419957961239"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9790"/>
							<attribute key="device.variant" value="Cortex M.LM3S9790"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419957961239"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9790"/>
							<attribute key="device.variant" value="Cortex M.LM3S9790"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419957961239"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9790"/>
							<attribute key="device.variant" value="Cortex M.LM3S9790"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419957961239"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9790"/>
							<attribute key="device.variant" value="Cortex M.LM3S9790"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419957961239"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9790"/>
							<attribute key="device.variant" value="Cortex M.LM3S9790"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419957961239"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9790"/>
							<attribute key="device.variant" value="Cortex M.LM3S9790"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419957961239"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9790"/>
							<attribute key="device.variant" value="Cortex M.LM3S9790"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419957961239"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9790"/>
							<attribute key="device.variant" value="Cortex M.LM3S9790"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419957961239"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9790"/>
							<attribute key="device.variant" value="Cortex M.LM3S9790"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419957961239"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9790"/>
							<attribute key="device.variant" value="Cortex M.LM3S9790"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419957961239"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9790"/>
							<attribute key="device.variant" value="Cortex M.LM3S9790"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9792" desc="Stellaris LM3S9792" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419958797301">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9792</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419958797301"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9792"/>
							<attribute key="device.variant" value="Cortex M.LM3S9792"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419958797301"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9792"/>
							<attribute key="device.variant" value="Cortex M.LM3S9792"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419958797301"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9792"/>
							<attribute key="device.variant" value="Cortex M.LM3S9792"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419958987180">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9792</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419958987180"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9792"/>
							<attribute key="device.variant" value="Cortex M.LM3S9792"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419958987180"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9792"/>
							<attribute key="device.variant" value="Cortex M.LM3S9792"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419958987180"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9792"/>
							<attribute key="device.variant" value="Cortex M.LM3S9792"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419958987180"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9792"/>
							<attribute key="device.variant" value="Cortex M.LM3S9792"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419958987180"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9792"/>
							<attribute key="device.variant" value="Cortex M.LM3S9792"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419958987180"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9792"/>
							<attribute key="device.variant" value="Cortex M.LM3S9792"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419958987180"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9792"/>
							<attribute key="device.variant" value="Cortex M.LM3S9792"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419958987180"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9792"/>
							<attribute key="device.variant" value="Cortex M.LM3S9792"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419958987180"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9792"/>
							<attribute key="device.variant" value="Cortex M.LM3S9792"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419958987180"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9792"/>
							<attribute key="device.variant" value="Cortex M.LM3S9792"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419958987180"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9792"/>
							<attribute key="device.variant" value="Cortex M.LM3S9792"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419958987180"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9792"/>
							<attribute key="device.variant" value="Cortex M.LM3S9792"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9971" desc="Stellaris LM3S9971" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419959792451">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9971</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419959792451"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9971"/>
							<attribute key="device.variant" value="Cortex M.LM3S9971"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419959792451"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9971"/>
							<attribute key="device.variant" value="Cortex M.LM3S9971"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419959792451"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9971"/>
							<attribute key="device.variant" value="Cortex M.LM3S9971"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419959977197">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9971</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419959977197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9971"/>
							<attribute key="device.variant" value="Cortex M.LM3S9971"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419959977197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9971"/>
							<attribute key="device.variant" value="Cortex M.LM3S9971"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419959977197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9971"/>
							<attribute key="device.variant" value="Cortex M.LM3S9971"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419959977197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9971"/>
							<attribute key="device.variant" value="Cortex M.LM3S9971"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419959977197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9971"/>
							<attribute key="device.variant" value="Cortex M.LM3S9971"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419959977197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9971"/>
							<attribute key="device.variant" value="Cortex M.LM3S9971"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419959977197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9971"/>
							<attribute key="device.variant" value="Cortex M.LM3S9971"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419959977197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9971"/>
							<attribute key="device.variant" value="Cortex M.LM3S9971"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419959977197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9971"/>
							<attribute key="device.variant" value="Cortex M.LM3S9971"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419959977197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9971"/>
							<attribute key="device.variant" value="Cortex M.LM3S9971"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419959977197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9971"/>
							<attribute key="device.variant" value="Cortex M.LM3S9971"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419959977197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9971"/>
							<attribute key="device.variant" value="Cortex M.LM3S9971"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9997" desc="Stellaris LM3S9997" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419960788456">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9997</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419960788456"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9997"/>
							<attribute key="device.variant" value="Cortex M.LM3S9997"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419960788456"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9997"/>
							<attribute key="device.variant" value="Cortex M.LM3S9997"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419960788456"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9997"/>
							<attribute key="device.variant" value="Cortex M.LM3S9997"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419960982183">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9997</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419960982183"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9997"/>
							<attribute key="device.variant" value="Cortex M.LM3S9997"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419960982183"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9997"/>
							<attribute key="device.variant" value="Cortex M.LM3S9997"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419960982183"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9997"/>
							<attribute key="device.variant" value="Cortex M.LM3S9997"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419960982183"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9997"/>
							<attribute key="device.variant" value="Cortex M.LM3S9997"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419960982183"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9997"/>
							<attribute key="device.variant" value="Cortex M.LM3S9997"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419960982183"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9997"/>
							<attribute key="device.variant" value="Cortex M.LM3S9997"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419960982183"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9997"/>
							<attribute key="device.variant" value="Cortex M.LM3S9997"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419960982183"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9997"/>
							<attribute key="device.variant" value="Cortex M.LM3S9997"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419960982183"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9997"/>
							<attribute key="device.variant" value="Cortex M.LM3S9997"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419960982183"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9997"/>
							<attribute key="device.variant" value="Cortex M.LM3S9997"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419960982183"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9997"/>
							<attribute key="device.variant" value="Cortex M.LM3S9997"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419960982183"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9997"/>
							<attribute key="device.variant" value="Cortex M.LM3S9997"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9B81" desc="Stellaris LM3S9B81" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419961776763">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9B81</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419961776763"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9B81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B81"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419961776763"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9B81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B81"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419961776763"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9B81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B81"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419964615526">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9B81</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419964615526"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9B81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B81"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419964615526"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9B81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B81"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419964615526"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9B81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B81"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419964615526"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9B81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B81"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419964615526"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9B81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B81"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419964615526"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9B81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B81"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419964615526"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9B81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B81"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419964615526"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9B81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B81"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419964615526"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9B81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B81"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419964615526"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9B81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B81"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419964615526"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9B81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B81"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419964615526"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9B81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B81"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9B90" desc="Stellaris LM3S9B90" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419965398987">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9B90</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419965398987"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9B90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B90"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419965398987"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9B90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B90"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419965398987"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9B90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B90"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419965585017">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9B90</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419965585017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9B90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B90"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419965585017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9B90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B90"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419965585017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9B90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B90"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419965585017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9B90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B90"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419965585017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9B90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B90"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419965585017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9B90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B90"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419965585017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9B90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B90"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419965585017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9B90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B90"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419965585017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9B90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B90"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419965585017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9B90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B90"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419965585017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9B90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B90"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419965585017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9B90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B90"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9B92" desc="Stellaris LM3S9B92" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419966351372">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9B92</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419966351372"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9B92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B92"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419966351372"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9B92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B92"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419966351372"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9B92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B92"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419966531841">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9B92</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419966531841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9B92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B92"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419966531841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9B92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B92"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419966531841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9B92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B92"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419966531841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9B92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B92"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419966531841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9B92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B92"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419966531841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9B92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B92"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419966531841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9B92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B92"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419966531841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9B92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B92"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419966531841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9B92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B92"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419966531841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9B92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B92"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419966531841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9B92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B92"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419966531841"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9B92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B92"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9B95" desc="Stellaris LM3S9B95" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419967373891">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9B95</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419967373891"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9B95"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B95"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419967373891"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9B95"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B95"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419967373891"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9B95"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B95"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419967555216">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9B95</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419967555216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9B95"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B95"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419967555216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9B95"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B95"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419967555216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9B95"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B95"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419967555216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9B95"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B95"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419967555216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9B95"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B95"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419967555216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9B95"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B95"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419967555216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9B95"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B95"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419967555216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9B95"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B95"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419967555216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9B95"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B95"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419967555216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9B95"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B95"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419967555216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9B95"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B95"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419967555216"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9B95"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B95"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9B96" desc="Stellaris LM3S9B96" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419968337822">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9B96</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419968337822"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9B96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B96"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419968337822"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9B96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B96"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419968337822"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9B96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B96"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419968518292">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9B96</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419968518292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9B96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B96"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419968518292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9B96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B96"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419968518292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9B96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B96"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419968518292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9B96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B96"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419968518292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9B96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B96"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419968518292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9B96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B96"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419968518292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9B96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B96"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419968518292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9B96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B96"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419968518292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9B96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B96"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419968518292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9B96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B96"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419968518292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9B96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B96"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419968518292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9B96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9B96"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9BN2" desc="Stellaris LM3S9BN2" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419969157633">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9BN2</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419969157633"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9BN2"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN2"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419969157633"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9BN2"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN2"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419969157633"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9BN2"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN2"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419969349222">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9BN2</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419969349222"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9BN2"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN2"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419969349222"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9BN2"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN2"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419969349222"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9BN2"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN2"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419969349222"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9BN2"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN2"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419969349222"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9BN2"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN2"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419969349222"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9BN2"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN2"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419969349222"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9BN2"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN2"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419969349222"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9BN2"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN2"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419969349222"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9BN2"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN2"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419969349222"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9BN2"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN2"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419969349222"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9BN2"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN2"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419969349222"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9BN2"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN2"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9BN5" desc="Stellaris LM3S9BN5" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419969945371">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9BN5</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419969945371"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9BN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN5"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419969945371"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9BN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN5"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419969945371"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9BN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN5"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419970049291">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9BN5</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419970049291"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9BN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN5"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419970049291"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9BN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN5"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419970049291"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9BN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN5"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419970049291"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9BN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN5"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419970049291"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9BN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN5"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419970049291"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9BN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN5"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419970049291"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9BN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN5"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419970049291"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9BN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN5"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419970049291"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9BN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN5"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419970049291"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9BN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN5"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419970049291"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9BN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN5"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419970049291"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9BN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN5"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9BN6" desc="Stellaris LM3S9BN6" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419970483359">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9BN6</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419970483359"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9BN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN6"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419970483359"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9BN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN6"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419970483359"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9BN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN6"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419970583002">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9BN6</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419970583002"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9BN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN6"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419970583002"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9BN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN6"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419970583002"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9BN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN6"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419970583002"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9BN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN6"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419970583002"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9BN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN6"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419970583002"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9BN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN6"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419970583002"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9BN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN6"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419970583002"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9BN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN6"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419970583002"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9BN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN6"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419970583002"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9BN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN6"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419970583002"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9BN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN6"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419970583002"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9BN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9BN6"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9C97" desc="Stellaris LM3S9C97" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419971012794">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9C97</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419971012794"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9C97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9C97"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419971012794"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9C97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9C97"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419971012794"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9C97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9C97"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419971112865">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9C97</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419971112865"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9C97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9C97"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419971112865"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9C97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9C97"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419971112865"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9C97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9C97"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419971112865"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9C97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9C97"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419971112865"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9C97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9C97"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419971112865"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9C97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9C97"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419971112865"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9C97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9C97"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419971112865"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9C97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9C97"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419971112865"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9C97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9C97"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419971112865"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9C97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9C97"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419971112865"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9C97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9C97"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419971112865"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9C97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9C97"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9D81" desc="Stellaris LM3S9D81" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419971605094">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9D81</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419971605094"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9D81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D81"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419971605094"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9D81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D81"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419971605094"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9D81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D81"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419971849712">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9D81</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419971849712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9D81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D81"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419971849712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9D81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D81"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419971849712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9D81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D81"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419971849712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9D81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D81"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419971849712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9D81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D81"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419971849712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9D81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D81"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419971849712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9D81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D81"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419971849712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9D81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D81"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419971849712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9D81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D81"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419971849712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9D81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D81"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419971849712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9D81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D81"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419971849712"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9D81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D81"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9D90" desc="Stellaris LM3S9D90" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419974971582">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9D90</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419974971582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9D90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D90"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419974971582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9D90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D90"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419974971582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9D90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D90"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419975214062">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9D90</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419975214062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9D90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D90"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419975214062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9D90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D90"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419975214062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9D90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D90"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419975214062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9D90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D90"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419975214062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9D90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D90"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419975214062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9D90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D90"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419975214062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9D90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D90"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419975214062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9D90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D90"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419975214062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9D90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D90"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419975214062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9D90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D90"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419975214062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9D90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D90"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419975214062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9D90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D90"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9D92" desc="Stellaris LM3S9D92" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419976246845">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9D92</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419976246845"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9D92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D92"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419976246845"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9D92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D92"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419976246845"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9D92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D92"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419976458533">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9D92</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419976458533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9D92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D92"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419976458533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9D92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D92"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419976458533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9D92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D92"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419976458533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9D92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D92"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419976458533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9D92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D92"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419976458533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9D92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D92"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419976458533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9D92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D92"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419976458533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9D92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D92"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419976458533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9D92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D92"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419976458533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9D92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D92"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419976458533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9D92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D92"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419976458533"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9D92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D92"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9D96" desc="Stellaris LM3S9D96" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419977288181">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9D96</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419977288181"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9D96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D96"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419977288181"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9D96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D96"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419977288181"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9D96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D96"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419977488323">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9D96</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419977488323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9D96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D96"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419977488323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9D96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D96"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419977488323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9D96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D96"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419977488323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9D96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D96"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419977488323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9D96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D96"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419977488323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9D96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D96"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419977488323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9D96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D96"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419977488323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9D96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D96"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419977488323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9D96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D96"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419977488323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9D96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D96"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419977488323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9D96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D96"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419977488323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9D96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9D96"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9DN5" desc="Stellaris LM3S9DN5" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419978309417">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9DN5</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419978309417"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9DN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN5"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419978309417"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9DN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN5"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419978309417"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9DN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN5"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419978501861">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9DN5</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419978501861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9DN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN5"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419978501861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9DN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN5"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419978501861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9DN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN5"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419978501861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9DN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN5"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419978501861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9DN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN5"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419978501861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9DN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN5"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419978501861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9DN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN5"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419978501861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9DN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN5"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419978501861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9DN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN5"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419978501861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9DN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN5"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419978501861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9DN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN5"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419978501861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9DN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN5"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9DN6" desc="Stellaris LM3S9DN6" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419979317824">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9DN6</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419979317824"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9DN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN6"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419979317824"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9DN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN6"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419979317824"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9DN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN6"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419979510696">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9DN6</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419979510696"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9DN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN6"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419979510696"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9DN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN6"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419979510696"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9DN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN6"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419979510696"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9DN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN6"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419979510696"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9DN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN6"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419979510696"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9DN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN6"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419979510696"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9DN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN6"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419979510696"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9DN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN6"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419979510696"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9DN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN6"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419979510696"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9DN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN6"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419979510696"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9DN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN6"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419979510696"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9DN6"/>
							<attribute key="device.variant" value="Cortex M.LM3S9DN6"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9G97" desc="Stellaris LM3S9G97" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419980365147">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9G97</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419980365147"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9G97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9G97"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419980365147"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9G97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9G97"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419980365147"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9G97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9G97"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419980554598">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9G97</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419980554598"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9G97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9G97"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419980554598"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9G97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9G97"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419980554598"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9G97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9G97"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419980554598"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9G97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9G97"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419980554598"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9G97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9G97"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419980554598"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9G97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9G97"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419980554598"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9G97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9G97"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419980554598"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9G97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9G97"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419980554598"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9G97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9G97"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419980554598"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9G97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9G97"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419980554598"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9G97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9G97"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419980554598"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9G97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9G97"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9GN5" desc="Stellaris LM3S9GN5" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419981345757">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9GN5</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419981345757"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9GN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9GN5"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419981345757"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9GN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9GN5"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419981345757"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9GN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9GN5"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419981533496">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9GN5</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419981533496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9GN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9GN5"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419981533496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9GN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9GN5"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419981533496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9GN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9GN5"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419981533496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9GN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9GN5"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419981533496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9GN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9GN5"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419981533496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9GN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9GN5"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419981533496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9GN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9GN5"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419981533496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9GN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9GN5"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419981533496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9GN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9GN5"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419981533496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9GN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9GN5"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419981533496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9GN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9GN5"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419981533496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9GN5"/>
							<attribute key="device.variant" value="Cortex M.LM3S9GN5"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9L71" desc="Stellaris LM3S9L71" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419982312681">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9L71</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419982312681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9L71"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L71"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419982312681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9L71"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L71"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419982312681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9L71"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L71"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419982498283">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9L71</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419982498283"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9L71"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L71"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419982498283"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9L71"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L71"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419982498283"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9L71"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L71"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419982498283"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9L71"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L71"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419982498283"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9L71"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L71"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419982498283"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9L71"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L71"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419982498283"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9L71"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L71"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419982498283"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9L71"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L71"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419982498283"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9L71"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L71"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419982498283"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9L71"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L71"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419982498283"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9L71"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L71"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419982498283"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9L71"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L71"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9L97" desc="Stellaris LM3S9L97" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419983277895">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9L97</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419983277895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9L97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L97"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419983277895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9L97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L97"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419983277895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9L97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L97"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419983473760">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9L97</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419983473760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9L97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L97"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419983473760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9L97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L97"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419983473760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9L97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L97"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419983473760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9L97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L97"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419983473760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9L97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L97"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419983473760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9L97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L97"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419983473760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9L97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L97"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419983473760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9L97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L97"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419983473760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9L97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L97"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419983473760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9L97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L97"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419983473760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9L97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L97"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419983473760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9L97"/>
							<attribute key="device.variant" value="Cortex M.LM3S9L97"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9U81" desc="Stellaris LM3S9U81" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419987528342">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9U81</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419987528342"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9U81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U81"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419987528342"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9U81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U81"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419987528342"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9U81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U81"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419987818292">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9U81</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419987818292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9U81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U81"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419987818292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9U81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U81"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419987818292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9U81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U81"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419987818292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9U81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U81"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419987818292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9U81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U81"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419987818292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9U81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U81"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419987818292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9U81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U81"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419987818292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9U81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U81"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419987818292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9U81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U81"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419987818292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9U81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U81"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419987818292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9U81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U81"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419987818292"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9U81"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U81"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9U90" desc="Stellaris LM3S9U90" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419988675736">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9U90</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419988675736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9U90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U90"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419988675736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9U90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U90"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419988675736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9U90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U90"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419988874168">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9U90</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419988874168"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9U90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U90"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419988874168"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9U90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U90"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419988874168"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9U90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U90"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419988874168"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9U90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U90"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419988874168"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9U90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U90"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419988874168"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9U90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U90"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419988874168"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9U90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U90"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419988874168"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9U90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U90"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419988874168"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9U90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U90"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419988874168"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9U90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U90"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419988874168"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9U90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U90"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419988874168"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9U90"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U90"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9U92" desc="Stellaris LM3S9U92" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419989484857">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9U92</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419989484857"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9U92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U92"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419989484857"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9U92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U92"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419989484857"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9U92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U92"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419989599896">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9U92</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419989599896"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9U92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U92"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419989599896"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9U92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U92"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419989599896"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9U92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U92"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419989599896"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9U92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U92"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419989599896"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9U92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U92"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419989599896"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9U92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U92"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419989599896"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9U92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U92"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419989599896"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9U92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U92"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419989599896"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9U92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U92"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419989599896"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9U92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U92"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419989599896"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9U92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U92"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419989599896"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9U92"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U92"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S9U96" desc="Stellaris LM3S9U96" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419990057485">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9U96</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419990057485"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S9U96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U96"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419990057485"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S9U96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U96"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419990057485"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S9U96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U96"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419990165253">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S9U96</tag>
					<tag>Stellaris Cortex LM3S9xxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419990165253"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S9U96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U96"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419990165253"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S9U96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U96"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419990165253"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S9U96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U96"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419990165253"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S9U96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U96"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419990165253"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S9U96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U96"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419990165253"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S9U96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U96"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419990165253"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S9U96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U96"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419990165253"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S9U96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U96"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419990165253"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S9U96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U96"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419990165253"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S9U96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U96"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419990165253"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S9U96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U96"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419990165253"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S9U96"/>
							<attribute key="device.variant" value="Cortex M.LM3S9U96"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>
	<contents name="Stellaris Cortex LM3Sxxx" desc="Stellaris Cortex LM3Sxxx" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="Stellaris LM3S101" desc="Stellaris LM3S101" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419997483259">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S101</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419997483259"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S101"/>
							<attribute key="device.variant" value="Cortex M.LM3S101"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419997483259"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S101"/>
							<attribute key="device.variant" value="Cortex M.LM3S101"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419997483259"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S101"/>
							<attribute key="device.variant" value="Cortex M.LM3S101"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419997712909">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S101</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419997712909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S101"/>
							<attribute key="device.variant" value="Cortex M.LM3S101"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419997712909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S101"/>
							<attribute key="device.variant" value="Cortex M.LM3S101"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419997712909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S101"/>
							<attribute key="device.variant" value="Cortex M.LM3S101"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419997712909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S101"/>
							<attribute key="device.variant" value="Cortex M.LM3S101"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419997712909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S101"/>
							<attribute key="device.variant" value="Cortex M.LM3S101"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419997712909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S101"/>
							<attribute key="device.variant" value="Cortex M.LM3S101"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419997712909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S101"/>
							<attribute key="device.variant" value="Cortex M.LM3S101"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419997712909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S101"/>
							<attribute key="device.variant" value="Cortex M.LM3S101"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419997712909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S101"/>
							<attribute key="device.variant" value="Cortex M.LM3S101"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419997712909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S101"/>
							<attribute key="device.variant" value="Cortex M.LM3S101"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419997712909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S101"/>
							<attribute key="device.variant" value="Cortex M.LM3S101"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419997712909"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S101"/>
							<attribute key="device.variant" value="Cortex M.LM3S101"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S102" desc="Stellaris LM3S102" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721419999111336">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S102</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721419999111336"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S102"/>
							<attribute key="device.variant" value="Cortex M.LM3S102"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721419999111336"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S102"/>
							<attribute key="device.variant" value="Cortex M.LM3S102"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721419999111336"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S102"/>
							<attribute key="device.variant" value="Cortex M.LM3S102"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721419999326018">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S102</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721419999326018"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S102"/>
							<attribute key="device.variant" value="Cortex M.LM3S102"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721419999326018"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S102"/>
							<attribute key="device.variant" value="Cortex M.LM3S102"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721419999326018"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S102"/>
							<attribute key="device.variant" value="Cortex M.LM3S102"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721419999326018"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S102"/>
							<attribute key="device.variant" value="Cortex M.LM3S102"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721419999326018"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S102"/>
							<attribute key="device.variant" value="Cortex M.LM3S102"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721419999326018"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S102"/>
							<attribute key="device.variant" value="Cortex M.LM3S102"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721419999326018"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S102"/>
							<attribute key="device.variant" value="Cortex M.LM3S102"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721419999326018"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S102"/>
							<attribute key="device.variant" value="Cortex M.LM3S102"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721419999326018"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S102"/>
							<attribute key="device.variant" value="Cortex M.LM3S102"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721419999326018"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S102"/>
							<attribute key="device.variant" value="Cortex M.LM3S102"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721419999326018"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S102"/>
							<attribute key="device.variant" value="Cortex M.LM3S102"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721419999326018"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S102"/>
							<attribute key="device.variant" value="Cortex M.LM3S102"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S2966" desc="Stellaris LM3S2966" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420000194582">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2966</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420000194582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S2966"/>
							<attribute key="device.variant" value="Cortex M.LM3S2966"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420000194582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S2966"/>
							<attribute key="device.variant" value="Cortex M.LM3S2966"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420000194582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S2966"/>
							<attribute key="device.variant" value="Cortex M.LM3S2966"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420000405415">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S2966</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420000405415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S2966"/>
							<attribute key="device.variant" value="Cortex M.LM3S2966"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420000405415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S2966"/>
							<attribute key="device.variant" value="Cortex M.LM3S2966"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420000405415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S2966"/>
							<attribute key="device.variant" value="Cortex M.LM3S2966"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420000405415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S2966"/>
							<attribute key="device.variant" value="Cortex M.LM3S2966"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420000405415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S2966"/>
							<attribute key="device.variant" value="Cortex M.LM3S2966"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420000405415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S2966"/>
							<attribute key="device.variant" value="Cortex M.LM3S2966"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420000405415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S2966"/>
							<attribute key="device.variant" value="Cortex M.LM3S2966"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420000405415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S2966"/>
							<attribute key="device.variant" value="Cortex M.LM3S2966"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420000405415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S2966"/>
							<attribute key="device.variant" value="Cortex M.LM3S2966"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420000405415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S2966"/>
							<attribute key="device.variant" value="Cortex M.LM3S2966"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420000405415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S2966"/>
							<attribute key="device.variant" value="Cortex M.LM3S2966"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420000405415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S2966"/>
							<attribute key="device.variant" value="Cortex M.LM3S2966"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S300" desc="Stellaris LM3S300" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420004264132">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S300</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420004264132"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S300"/>
							<attribute key="device.variant" value="Cortex M.LM3S300"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420004264132"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S300"/>
							<attribute key="device.variant" value="Cortex M.LM3S300"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420004264132"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S300"/>
							<attribute key="device.variant" value="Cortex M.LM3S300"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420004418515">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S300</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420004418515"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S300"/>
							<attribute key="device.variant" value="Cortex M.LM3S300"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420004418515"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S300"/>
							<attribute key="device.variant" value="Cortex M.LM3S300"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420004418515"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S300"/>
							<attribute key="device.variant" value="Cortex M.LM3S300"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420004418515"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S300"/>
							<attribute key="device.variant" value="Cortex M.LM3S300"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420004418515"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S300"/>
							<attribute key="device.variant" value="Cortex M.LM3S300"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420004418515"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S300"/>
							<attribute key="device.variant" value="Cortex M.LM3S300"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420004418515"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S300"/>
							<attribute key="device.variant" value="Cortex M.LM3S300"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420004418515"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S300"/>
							<attribute key="device.variant" value="Cortex M.LM3S300"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420004418515"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S300"/>
							<attribute key="device.variant" value="Cortex M.LM3S300"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420004418515"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S300"/>
							<attribute key="device.variant" value="Cortex M.LM3S300"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420004418515"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S300"/>
							<attribute key="device.variant" value="Cortex M.LM3S300"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420004418515"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S300"/>
							<attribute key="device.variant" value="Cortex M.LM3S300"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S301" desc="Stellaris LM3S301" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420005021506">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S301</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420005021506"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S301"/>
							<attribute key="device.variant" value="Cortex M.LM3S301"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420005021506"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S301"/>
							<attribute key="device.variant" value="Cortex M.LM3S301"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420005021506"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S301"/>
							<attribute key="device.variant" value="Cortex M.LM3S301"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420005137400">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S301</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420005137400"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S301"/>
							<attribute key="device.variant" value="Cortex M.LM3S301"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420005137400"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S301"/>
							<attribute key="device.variant" value="Cortex M.LM3S301"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420005137400"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S301"/>
							<attribute key="device.variant" value="Cortex M.LM3S301"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420005137400"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S301"/>
							<attribute key="device.variant" value="Cortex M.LM3S301"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420005137400"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S301"/>
							<attribute key="device.variant" value="Cortex M.LM3S301"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420005137400"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S301"/>
							<attribute key="device.variant" value="Cortex M.LM3S301"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420005137400"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S301"/>
							<attribute key="device.variant" value="Cortex M.LM3S301"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420005137400"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S301"/>
							<attribute key="device.variant" value="Cortex M.LM3S301"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420005137400"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S301"/>
							<attribute key="device.variant" value="Cortex M.LM3S301"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420005137400"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S301"/>
							<attribute key="device.variant" value="Cortex M.LM3S301"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420005137400"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S301"/>
							<attribute key="device.variant" value="Cortex M.LM3S301"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420005137400"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S301"/>
							<attribute key="device.variant" value="Cortex M.LM3S301"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S308" desc="Stellaris LM3S308" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420005640321">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S308</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420005640321"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S308"/>
							<attribute key="device.variant" value="Cortex M.LM3S308"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420005640321"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S308"/>
							<attribute key="device.variant" value="Cortex M.LM3S308"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420005640321"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S308"/>
							<attribute key="device.variant" value="Cortex M.LM3S308"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420005749372">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S308</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420005749372"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S308"/>
							<attribute key="device.variant" value="Cortex M.LM3S308"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420005749372"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S308"/>
							<attribute key="device.variant" value="Cortex M.LM3S308"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420005749372"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S308"/>
							<attribute key="device.variant" value="Cortex M.LM3S308"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420005749372"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S308"/>
							<attribute key="device.variant" value="Cortex M.LM3S308"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420005749372"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S308"/>
							<attribute key="device.variant" value="Cortex M.LM3S308"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420005749372"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S308"/>
							<attribute key="device.variant" value="Cortex M.LM3S308"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420005749372"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S308"/>
							<attribute key="device.variant" value="Cortex M.LM3S308"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420005749372"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S308"/>
							<attribute key="device.variant" value="Cortex M.LM3S308"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420005749372"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S308"/>
							<attribute key="device.variant" value="Cortex M.LM3S308"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420005749372"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S308"/>
							<attribute key="device.variant" value="Cortex M.LM3S308"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420005749372"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S308"/>
							<attribute key="device.variant" value="Cortex M.LM3S308"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420005749372"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S308"/>
							<attribute key="device.variant" value="Cortex M.LM3S308"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S310" desc="Stellaris LM3S310" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420006450296">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S310</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420006450296"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S310"/>
							<attribute key="device.variant" value="Cortex M.LM3S310"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420006450296"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S310"/>
							<attribute key="device.variant" value="Cortex M.LM3S310"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420006450296"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S310"/>
							<attribute key="device.variant" value="Cortex M.LM3S310"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420006560631">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S310</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420006560631"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S310"/>
							<attribute key="device.variant" value="Cortex M.LM3S310"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420006560631"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S310"/>
							<attribute key="device.variant" value="Cortex M.LM3S310"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420006560631"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S310"/>
							<attribute key="device.variant" value="Cortex M.LM3S310"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420006560631"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S310"/>
							<attribute key="device.variant" value="Cortex M.LM3S310"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420006560631"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S310"/>
							<attribute key="device.variant" value="Cortex M.LM3S310"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420006560631"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S310"/>
							<attribute key="device.variant" value="Cortex M.LM3S310"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420006560631"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S310"/>
							<attribute key="device.variant" value="Cortex M.LM3S310"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420006560631"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S310"/>
							<attribute key="device.variant" value="Cortex M.LM3S310"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420006560631"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S310"/>
							<attribute key="device.variant" value="Cortex M.LM3S310"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420006560631"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S310"/>
							<attribute key="device.variant" value="Cortex M.LM3S310"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420006560631"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S310"/>
							<attribute key="device.variant" value="Cortex M.LM3S310"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420006560631"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S310"/>
							<attribute key="device.variant" value="Cortex M.LM3S310"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S315" desc="Stellaris LM3S315" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420007010522">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S315</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420007010522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S315"/>
							<attribute key="device.variant" value="Cortex M.LM3S315"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420007010522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S315"/>
							<attribute key="device.variant" value="Cortex M.LM3S315"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420007010522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S315"/>
							<attribute key="device.variant" value="Cortex M.LM3S315"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420007117436">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S315</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420007117436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S315"/>
							<attribute key="device.variant" value="Cortex M.LM3S315"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420007117436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S315"/>
							<attribute key="device.variant" value="Cortex M.LM3S315"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420007117436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S315"/>
							<attribute key="device.variant" value="Cortex M.LM3S315"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420007117436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S315"/>
							<attribute key="device.variant" value="Cortex M.LM3S315"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420007117436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S315"/>
							<attribute key="device.variant" value="Cortex M.LM3S315"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420007117436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S315"/>
							<attribute key="device.variant" value="Cortex M.LM3S315"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420007117436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S315"/>
							<attribute key="device.variant" value="Cortex M.LM3S315"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420007117436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S315"/>
							<attribute key="device.variant" value="Cortex M.LM3S315"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420007117436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S315"/>
							<attribute key="device.variant" value="Cortex M.LM3S315"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420007117436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S315"/>
							<attribute key="device.variant" value="Cortex M.LM3S315"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420007117436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S315"/>
							<attribute key="device.variant" value="Cortex M.LM3S315"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420007117436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S315"/>
							<attribute key="device.variant" value="Cortex M.LM3S315"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S316" desc="Stellaris LM3S316" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420007630192">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S316</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420007630192"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S316"/>
							<attribute key="device.variant" value="Cortex M.LM3S316"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420007630192"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S316"/>
							<attribute key="device.variant" value="Cortex M.LM3S316"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420007630192"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S316"/>
							<attribute key="device.variant" value="Cortex M.LM3S316"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420007736678">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S316</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420007736678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S316"/>
							<attribute key="device.variant" value="Cortex M.LM3S316"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420007736678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S316"/>
							<attribute key="device.variant" value="Cortex M.LM3S316"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420007736678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S316"/>
							<attribute key="device.variant" value="Cortex M.LM3S316"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420007736678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S316"/>
							<attribute key="device.variant" value="Cortex M.LM3S316"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420007736678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S316"/>
							<attribute key="device.variant" value="Cortex M.LM3S316"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420007736678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S316"/>
							<attribute key="device.variant" value="Cortex M.LM3S316"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420007736678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S316"/>
							<attribute key="device.variant" value="Cortex M.LM3S316"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420007736678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S316"/>
							<attribute key="device.variant" value="Cortex M.LM3S316"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420007736678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S316"/>
							<attribute key="device.variant" value="Cortex M.LM3S316"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420007736678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S316"/>
							<attribute key="device.variant" value="Cortex M.LM3S316"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420007736678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S316"/>
							<attribute key="device.variant" value="Cortex M.LM3S316"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420007736678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S316"/>
							<attribute key="device.variant" value="Cortex M.LM3S316"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S317" desc="Stellaris LM3S317" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420008181865">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S317</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420008181865"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S317"/>
							<attribute key="device.variant" value="Cortex M.LM3S317"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420008181865"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S317"/>
							<attribute key="device.variant" value="Cortex M.LM3S317"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420008181865"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S317"/>
							<attribute key="device.variant" value="Cortex M.LM3S317"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420008284930">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S317</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420008284930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S317"/>
							<attribute key="device.variant" value="Cortex M.LM3S317"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420008284930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S317"/>
							<attribute key="device.variant" value="Cortex M.LM3S317"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420008284930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S317"/>
							<attribute key="device.variant" value="Cortex M.LM3S317"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420008284930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S317"/>
							<attribute key="device.variant" value="Cortex M.LM3S317"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420008284930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S317"/>
							<attribute key="device.variant" value="Cortex M.LM3S317"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420008284930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S317"/>
							<attribute key="device.variant" value="Cortex M.LM3S317"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420008284930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S317"/>
							<attribute key="device.variant" value="Cortex M.LM3S317"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420008284930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S317"/>
							<attribute key="device.variant" value="Cortex M.LM3S317"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420008284930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S317"/>
							<attribute key="device.variant" value="Cortex M.LM3S317"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420008284930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S317"/>
							<attribute key="device.variant" value="Cortex M.LM3S317"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420008284930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S317"/>
							<attribute key="device.variant" value="Cortex M.LM3S317"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420008284930"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S317"/>
							<attribute key="device.variant" value="Cortex M.LM3S317"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S328" desc="Stellaris LM3S328" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420008722847">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S328</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420008722847"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S328"/>
							<attribute key="device.variant" value="Cortex M.LM3S328"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420008722847"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S328"/>
							<attribute key="device.variant" value="Cortex M.LM3S328"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420008722847"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S328"/>
							<attribute key="device.variant" value="Cortex M.LM3S328"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420008825056">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S328</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420008825056"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S328"/>
							<attribute key="device.variant" value="Cortex M.LM3S328"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420008825056"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S328"/>
							<attribute key="device.variant" value="Cortex M.LM3S328"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420008825056"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S328"/>
							<attribute key="device.variant" value="Cortex M.LM3S328"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420008825056"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S328"/>
							<attribute key="device.variant" value="Cortex M.LM3S328"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420008825056"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S328"/>
							<attribute key="device.variant" value="Cortex M.LM3S328"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420008825056"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S328"/>
							<attribute key="device.variant" value="Cortex M.LM3S328"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420008825056"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S328"/>
							<attribute key="device.variant" value="Cortex M.LM3S328"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420008825056"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S328"/>
							<attribute key="device.variant" value="Cortex M.LM3S328"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420008825056"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S328"/>
							<attribute key="device.variant" value="Cortex M.LM3S328"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420008825056"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S328"/>
							<attribute key="device.variant" value="Cortex M.LM3S328"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420008825056"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S328"/>
							<attribute key="device.variant" value="Cortex M.LM3S328"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420008825056"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S328"/>
							<attribute key="device.variant" value="Cortex M.LM3S328"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S600" desc="Stellaris LM3S600" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420009504170">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S600</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420009504170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S600"/>
							<attribute key="device.variant" value="Cortex M.LM3S600"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420009504170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S600"/>
							<attribute key="device.variant" value="Cortex M.LM3S600"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420009504170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S600"/>
							<attribute key="device.variant" value="Cortex M.LM3S600"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420009749643">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S600</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420009749643"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S600"/>
							<attribute key="device.variant" value="Cortex M.LM3S600"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420009749643"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S600"/>
							<attribute key="device.variant" value="Cortex M.LM3S600"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420009749643"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S600"/>
							<attribute key="device.variant" value="Cortex M.LM3S600"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420009749643"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S600"/>
							<attribute key="device.variant" value="Cortex M.LM3S600"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420009749643"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S600"/>
							<attribute key="device.variant" value="Cortex M.LM3S600"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420009749643"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S600"/>
							<attribute key="device.variant" value="Cortex M.LM3S600"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420009749643"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S600"/>
							<attribute key="device.variant" value="Cortex M.LM3S600"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420009749643"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S600"/>
							<attribute key="device.variant" value="Cortex M.LM3S600"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420009749643"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S600"/>
							<attribute key="device.variant" value="Cortex M.LM3S600"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420009749643"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S600"/>
							<attribute key="device.variant" value="Cortex M.LM3S600"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420009749643"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S600"/>
							<attribute key="device.variant" value="Cortex M.LM3S600"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420009749643"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S600"/>
							<attribute key="device.variant" value="Cortex M.LM3S600"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S601" desc="Stellaris LM3S601" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420010583567">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S601</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420010583567"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S601"/>
							<attribute key="device.variant" value="Cortex M.LM3S601"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420010583567"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S601"/>
							<attribute key="device.variant" value="Cortex M.LM3S601"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420010583567"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S601"/>
							<attribute key="device.variant" value="Cortex M.LM3S601"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420010777722">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S601</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420010777722"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S601"/>
							<attribute key="device.variant" value="Cortex M.LM3S601"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420010777722"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S601"/>
							<attribute key="device.variant" value="Cortex M.LM3S601"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420010777722"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S601"/>
							<attribute key="device.variant" value="Cortex M.LM3S601"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420010777722"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S601"/>
							<attribute key="device.variant" value="Cortex M.LM3S601"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420010777722"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S601"/>
							<attribute key="device.variant" value="Cortex M.LM3S601"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420010777722"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S601"/>
							<attribute key="device.variant" value="Cortex M.LM3S601"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420010777722"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S601"/>
							<attribute key="device.variant" value="Cortex M.LM3S601"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420010777722"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S601"/>
							<attribute key="device.variant" value="Cortex M.LM3S601"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420010777722"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S601"/>
							<attribute key="device.variant" value="Cortex M.LM3S601"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420010777722"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S601"/>
							<attribute key="device.variant" value="Cortex M.LM3S601"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420010777722"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S601"/>
							<attribute key="device.variant" value="Cortex M.LM3S601"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420010777722"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S601"/>
							<attribute key="device.variant" value="Cortex M.LM3S601"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S608" desc="Stellaris LM3S608" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420014610352">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S608</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420014610352"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S608"/>
							<attribute key="device.variant" value="Cortex M.LM3S608"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420014610352"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S608"/>
							<attribute key="device.variant" value="Cortex M.LM3S608"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420014610352"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S608"/>
							<attribute key="device.variant" value="Cortex M.LM3S608"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420014731378">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S608</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420014731378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S608"/>
							<attribute key="device.variant" value="Cortex M.LM3S608"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420014731378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S608"/>
							<attribute key="device.variant" value="Cortex M.LM3S608"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420014731378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S608"/>
							<attribute key="device.variant" value="Cortex M.LM3S608"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420014731378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S608"/>
							<attribute key="device.variant" value="Cortex M.LM3S608"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420014731378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S608"/>
							<attribute key="device.variant" value="Cortex M.LM3S608"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420014731378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S608"/>
							<attribute key="device.variant" value="Cortex M.LM3S608"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420014731378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S608"/>
							<attribute key="device.variant" value="Cortex M.LM3S608"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420014731378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S608"/>
							<attribute key="device.variant" value="Cortex M.LM3S608"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420014731378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S608"/>
							<attribute key="device.variant" value="Cortex M.LM3S608"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420014731378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S608"/>
							<attribute key="device.variant" value="Cortex M.LM3S608"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420014731378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S608"/>
							<attribute key="device.variant" value="Cortex M.LM3S608"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420014731378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S608"/>
							<attribute key="device.variant" value="Cortex M.LM3S608"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S610" desc="Stellaris LM3S610" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420015191960">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S610</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420015191960"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S610"/>
							<attribute key="device.variant" value="Cortex M.LM3S610"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420015191960"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S610"/>
							<attribute key="device.variant" value="Cortex M.LM3S610"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420015191960"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S610"/>
							<attribute key="device.variant" value="Cortex M.LM3S610"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420015292031">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S610</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420015292031"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S610"/>
							<attribute key="device.variant" value="Cortex M.LM3S610"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420015292031"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S610"/>
							<attribute key="device.variant" value="Cortex M.LM3S610"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420015292031"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S610"/>
							<attribute key="device.variant" value="Cortex M.LM3S610"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420015292031"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S610"/>
							<attribute key="device.variant" value="Cortex M.LM3S610"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420015292031"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S610"/>
							<attribute key="device.variant" value="Cortex M.LM3S610"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420015292031"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S610"/>
							<attribute key="device.variant" value="Cortex M.LM3S610"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420015292031"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S610"/>
							<attribute key="device.variant" value="Cortex M.LM3S610"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420015292031"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S610"/>
							<attribute key="device.variant" value="Cortex M.LM3S610"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420015292031"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S610"/>
							<attribute key="device.variant" value="Cortex M.LM3S610"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420015292031"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S610"/>
							<attribute key="device.variant" value="Cortex M.LM3S610"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420015292031"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S610"/>
							<attribute key="device.variant" value="Cortex M.LM3S610"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420015292031"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S610"/>
							<attribute key="device.variant" value="Cortex M.LM3S610"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S611" desc="Stellaris LM3S611" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420015717547">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S611</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420015717547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S611"/>
							<attribute key="device.variant" value="Cortex M.LM3S611"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420015717547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S611"/>
							<attribute key="device.variant" value="Cortex M.LM3S611"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420015717547"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S611"/>
							<attribute key="device.variant" value="Cortex M.LM3S611"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420015815479">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S611</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420015815479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S611"/>
							<attribute key="device.variant" value="Cortex M.LM3S611"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420015815479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S611"/>
							<attribute key="device.variant" value="Cortex M.LM3S611"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420015815479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S611"/>
							<attribute key="device.variant" value="Cortex M.LM3S611"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420015815479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S611"/>
							<attribute key="device.variant" value="Cortex M.LM3S611"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420015815479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S611"/>
							<attribute key="device.variant" value="Cortex M.LM3S611"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420015815479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S611"/>
							<attribute key="device.variant" value="Cortex M.LM3S611"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420015815479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S611"/>
							<attribute key="device.variant" value="Cortex M.LM3S611"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420015815479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S611"/>
							<attribute key="device.variant" value="Cortex M.LM3S611"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420015815479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S611"/>
							<attribute key="device.variant" value="Cortex M.LM3S611"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420015815479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S611"/>
							<attribute key="device.variant" value="Cortex M.LM3S611"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420015815479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S611"/>
							<attribute key="device.variant" value="Cortex M.LM3S611"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420015815479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S611"/>
							<attribute key="device.variant" value="Cortex M.LM3S611"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S612" desc="Stellaris LM3S612" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420016372284">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S612</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420016372284"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S612"/>
							<attribute key="device.variant" value="Cortex M.LM3S612"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420016372284"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S612"/>
							<attribute key="device.variant" value="Cortex M.LM3S612"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420016372284"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S612"/>
							<attribute key="device.variant" value="Cortex M.LM3S612"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420016502718">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S612</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420016502718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S612"/>
							<attribute key="device.variant" value="Cortex M.LM3S612"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420016502718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S612"/>
							<attribute key="device.variant" value="Cortex M.LM3S612"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420016502718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S612"/>
							<attribute key="device.variant" value="Cortex M.LM3S612"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420016502718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S612"/>
							<attribute key="device.variant" value="Cortex M.LM3S612"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420016502718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S612"/>
							<attribute key="device.variant" value="Cortex M.LM3S612"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420016502718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S612"/>
							<attribute key="device.variant" value="Cortex M.LM3S612"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420016502718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S612"/>
							<attribute key="device.variant" value="Cortex M.LM3S612"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420016502718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S612"/>
							<attribute key="device.variant" value="Cortex M.LM3S612"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420016502718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S612"/>
							<attribute key="device.variant" value="Cortex M.LM3S612"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420016502718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S612"/>
							<attribute key="device.variant" value="Cortex M.LM3S612"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420016502718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S612"/>
							<attribute key="device.variant" value="Cortex M.LM3S612"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420016502718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S612"/>
							<attribute key="device.variant" value="Cortex M.LM3S612"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S613" desc="Stellaris LM3S613" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420016943629">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S613</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420016943629"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S613"/>
							<attribute key="device.variant" value="Cortex M.LM3S613"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420016943629"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S613"/>
							<attribute key="device.variant" value="Cortex M.LM3S613"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420016943629"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S613"/>
							<attribute key="device.variant" value="Cortex M.LM3S613"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420017044983">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S613</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420017044983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S613"/>
							<attribute key="device.variant" value="Cortex M.LM3S613"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420017044983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S613"/>
							<attribute key="device.variant" value="Cortex M.LM3S613"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420017044983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S613"/>
							<attribute key="device.variant" value="Cortex M.LM3S613"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420017044983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S613"/>
							<attribute key="device.variant" value="Cortex M.LM3S613"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420017044983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S613"/>
							<attribute key="device.variant" value="Cortex M.LM3S613"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420017044983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S613"/>
							<attribute key="device.variant" value="Cortex M.LM3S613"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420017044983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S613"/>
							<attribute key="device.variant" value="Cortex M.LM3S613"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420017044983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S613"/>
							<attribute key="device.variant" value="Cortex M.LM3S613"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420017044983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S613"/>
							<attribute key="device.variant" value="Cortex M.LM3S613"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420017044983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S613"/>
							<attribute key="device.variant" value="Cortex M.LM3S613"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420017044983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S613"/>
							<attribute key="device.variant" value="Cortex M.LM3S613"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420017044983"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S613"/>
							<attribute key="device.variant" value="Cortex M.LM3S613"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S615" desc="Stellaris LM3S615" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420017590241">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S615</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420017590241"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S615"/>
							<attribute key="device.variant" value="Cortex M.LM3S615"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420017590241"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S615"/>
							<attribute key="device.variant" value="Cortex M.LM3S615"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420017590241"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S615"/>
							<attribute key="device.variant" value="Cortex M.LM3S615"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420017773704">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S615</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420017773704"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S615"/>
							<attribute key="device.variant" value="Cortex M.LM3S615"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420017773704"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S615"/>
							<attribute key="device.variant" value="Cortex M.LM3S615"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420017773704"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S615"/>
							<attribute key="device.variant" value="Cortex M.LM3S615"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420017773704"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S615"/>
							<attribute key="device.variant" value="Cortex M.LM3S615"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420017773704"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S615"/>
							<attribute key="device.variant" value="Cortex M.LM3S615"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420017773704"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S615"/>
							<attribute key="device.variant" value="Cortex M.LM3S615"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420017773704"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S615"/>
							<attribute key="device.variant" value="Cortex M.LM3S615"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420017773704"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S615"/>
							<attribute key="device.variant" value="Cortex M.LM3S615"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420017773704"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S615"/>
							<attribute key="device.variant" value="Cortex M.LM3S615"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420017773704"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S615"/>
							<attribute key="device.variant" value="Cortex M.LM3S615"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420017773704"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S615"/>
							<attribute key="device.variant" value="Cortex M.LM3S615"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420017773704"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S615"/>
							<attribute key="device.variant" value="Cortex M.LM3S615"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S617" desc="Stellaris LM3S617" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420018243268">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S617</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420018243268"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S617"/>
							<attribute key="device.variant" value="Cortex M.LM3S617"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420018243268"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S617"/>
							<attribute key="device.variant" value="Cortex M.LM3S617"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420018243268"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S617"/>
							<attribute key="device.variant" value="Cortex M.LM3S617"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420018347188">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S617</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420018347188"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S617"/>
							<attribute key="device.variant" value="Cortex M.LM3S617"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420018347188"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S617"/>
							<attribute key="device.variant" value="Cortex M.LM3S617"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420018347188"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S617"/>
							<attribute key="device.variant" value="Cortex M.LM3S617"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420018347188"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S617"/>
							<attribute key="device.variant" value="Cortex M.LM3S617"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420018347188"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S617"/>
							<attribute key="device.variant" value="Cortex M.LM3S617"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420018347188"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S617"/>
							<attribute key="device.variant" value="Cortex M.LM3S617"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420018347188"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S617"/>
							<attribute key="device.variant" value="Cortex M.LM3S617"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420018347188"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S617"/>
							<attribute key="device.variant" value="Cortex M.LM3S617"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420018347188"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S617"/>
							<attribute key="device.variant" value="Cortex M.LM3S617"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420018347188"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S617"/>
							<attribute key="device.variant" value="Cortex M.LM3S617"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420018347188"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S617"/>
							<attribute key="device.variant" value="Cortex M.LM3S617"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420018347188"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S617"/>
							<attribute key="device.variant" value="Cortex M.LM3S617"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S618" desc="Stellaris LM3S618" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420018775696">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S618</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420018775696"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S618"/>
							<attribute key="device.variant" value="Cortex M.LM3S618"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420018775696"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S618"/>
							<attribute key="device.variant" value="Cortex M.LM3S618"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420018775696"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S618"/>
							<attribute key="device.variant" value="Cortex M.LM3S618"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420018876195">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S618</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420018876195"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S618"/>
							<attribute key="device.variant" value="Cortex M.LM3S618"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420018876195"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S618"/>
							<attribute key="device.variant" value="Cortex M.LM3S618"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420018876195"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S618"/>
							<attribute key="device.variant" value="Cortex M.LM3S618"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420018876195"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S618"/>
							<attribute key="device.variant" value="Cortex M.LM3S618"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420018876195"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S618"/>
							<attribute key="device.variant" value="Cortex M.LM3S618"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420018876195"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S618"/>
							<attribute key="device.variant" value="Cortex M.LM3S618"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420018876195"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S618"/>
							<attribute key="device.variant" value="Cortex M.LM3S618"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420018876195"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S618"/>
							<attribute key="device.variant" value="Cortex M.LM3S618"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420018876195"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S618"/>
							<attribute key="device.variant" value="Cortex M.LM3S618"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420018876195"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S618"/>
							<attribute key="device.variant" value="Cortex M.LM3S618"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420018876195"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S618"/>
							<attribute key="device.variant" value="Cortex M.LM3S618"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420018876195"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S618"/>
							<attribute key="device.variant" value="Cortex M.LM3S618"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S628" desc="Stellaris LM3S628" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420019342765">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S628</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420019342765"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S628"/>
							<attribute key="device.variant" value="Cortex M.LM3S628"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420019342765"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S628"/>
							<attribute key="device.variant" value="Cortex M.LM3S628"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420019342765"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S628"/>
							<attribute key="device.variant" value="Cortex M.LM3S628"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420019446685">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S628</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420019446685"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S628"/>
							<attribute key="device.variant" value="Cortex M.LM3S628"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420019446685"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S628"/>
							<attribute key="device.variant" value="Cortex M.LM3S628"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420019446685"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S628"/>
							<attribute key="device.variant" value="Cortex M.LM3S628"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420019446685"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S628"/>
							<attribute key="device.variant" value="Cortex M.LM3S628"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420019446685"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S628"/>
							<attribute key="device.variant" value="Cortex M.LM3S628"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420019446685"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S628"/>
							<attribute key="device.variant" value="Cortex M.LM3S628"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420019446685"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S628"/>
							<attribute key="device.variant" value="Cortex M.LM3S628"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420019446685"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S628"/>
							<attribute key="device.variant" value="Cortex M.LM3S628"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420019446685"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S628"/>
							<attribute key="device.variant" value="Cortex M.LM3S628"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420019446685"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S628"/>
							<attribute key="device.variant" value="Cortex M.LM3S628"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420019446685"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S628"/>
							<attribute key="device.variant" value="Cortex M.LM3S628"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420019446685"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S628"/>
							<attribute key="device.variant" value="Cortex M.LM3S628"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S800" desc="Stellaris LM3S800" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420020245969">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S800</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420020245969"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S800"/>
							<attribute key="device.variant" value="Cortex M.LM3S800"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420020245969"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S800"/>
							<attribute key="device.variant" value="Cortex M.LM3S800"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420020245969"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S800"/>
							<attribute key="device.variant" value="Cortex M.LM3S800"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420020434136">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S800</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420020434136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S800"/>
							<attribute key="device.variant" value="Cortex M.LM3S800"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420020434136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S800"/>
							<attribute key="device.variant" value="Cortex M.LM3S800"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420020434136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S800"/>
							<attribute key="device.variant" value="Cortex M.LM3S800"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420020434136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S800"/>
							<attribute key="device.variant" value="Cortex M.LM3S800"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420020434136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S800"/>
							<attribute key="device.variant" value="Cortex M.LM3S800"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420020434136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S800"/>
							<attribute key="device.variant" value="Cortex M.LM3S800"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420020434136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S800"/>
							<attribute key="device.variant" value="Cortex M.LM3S800"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420020434136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S800"/>
							<attribute key="device.variant" value="Cortex M.LM3S800"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420020434136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S800"/>
							<attribute key="device.variant" value="Cortex M.LM3S800"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420020434136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S800"/>
							<attribute key="device.variant" value="Cortex M.LM3S800"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420020434136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S800"/>
							<attribute key="device.variant" value="Cortex M.LM3S800"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420020434136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S800"/>
							<attribute key="device.variant" value="Cortex M.LM3S800"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S801" desc="Stellaris LM3S801" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420023649235">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S801</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420023649235"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S801"/>
							<attribute key="device.variant" value="Cortex M.LM3S801"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420023649235"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S801"/>
							<attribute key="device.variant" value="Cortex M.LM3S801"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420023649235"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S801"/>
							<attribute key="device.variant" value="Cortex M.LM3S801"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420023851087">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S801</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420023851087"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S801"/>
							<attribute key="device.variant" value="Cortex M.LM3S801"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420023851087"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S801"/>
							<attribute key="device.variant" value="Cortex M.LM3S801"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420023851087"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S801"/>
							<attribute key="device.variant" value="Cortex M.LM3S801"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420023851087"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S801"/>
							<attribute key="device.variant" value="Cortex M.LM3S801"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420023851087"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S801"/>
							<attribute key="device.variant" value="Cortex M.LM3S801"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420023851087"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S801"/>
							<attribute key="device.variant" value="Cortex M.LM3S801"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420023851087"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S801"/>
							<attribute key="device.variant" value="Cortex M.LM3S801"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420023851087"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S801"/>
							<attribute key="device.variant" value="Cortex M.LM3S801"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420023851087"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S801"/>
							<attribute key="device.variant" value="Cortex M.LM3S801"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420023851087"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S801"/>
							<attribute key="device.variant" value="Cortex M.LM3S801"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420023851087"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S801"/>
							<attribute key="device.variant" value="Cortex M.LM3S801"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420023851087"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S801"/>
							<attribute key="device.variant" value="Cortex M.LM3S801"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S808" desc="Stellaris LM3S808" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420024643101">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S808</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420024643101"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S808"/>
							<attribute key="device.variant" value="Cortex M.LM3S808"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420024643101"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S808"/>
							<attribute key="device.variant" value="Cortex M.LM3S808"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420024643101"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S808"/>
							<attribute key="device.variant" value="Cortex M.LM3S808"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420024833835">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S808</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420024833835"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S808"/>
							<attribute key="device.variant" value="Cortex M.LM3S808"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420024833835"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S808"/>
							<attribute key="device.variant" value="Cortex M.LM3S808"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420024833835"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S808"/>
							<attribute key="device.variant" value="Cortex M.LM3S808"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420024833835"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S808"/>
							<attribute key="device.variant" value="Cortex M.LM3S808"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420024833835"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S808"/>
							<attribute key="device.variant" value="Cortex M.LM3S808"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420024833835"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S808"/>
							<attribute key="device.variant" value="Cortex M.LM3S808"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420024833835"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S808"/>
							<attribute key="device.variant" value="Cortex M.LM3S808"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420024833835"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S808"/>
							<attribute key="device.variant" value="Cortex M.LM3S808"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420024833835"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S808"/>
							<attribute key="device.variant" value="Cortex M.LM3S808"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420024833835"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S808"/>
							<attribute key="device.variant" value="Cortex M.LM3S808"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420024833835"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S808"/>
							<attribute key="device.variant" value="Cortex M.LM3S808"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420024833835"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S808"/>
							<attribute key="device.variant" value="Cortex M.LM3S808"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S811" desc="Stellaris LM3S811" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420025624566">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S811</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420025624566"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S811"/>
							<attribute key="device.variant" value="Cortex M.LM3S811"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420025624566"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S811"/>
							<attribute key="device.variant" value="Cortex M.LM3S811"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420025624566"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S811"/>
							<attribute key="device.variant" value="Cortex M.LM3S811"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420025816582">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S811</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420025816582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S811"/>
							<attribute key="device.variant" value="Cortex M.LM3S811"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420025816582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S811"/>
							<attribute key="device.variant" value="Cortex M.LM3S811"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420025816582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S811"/>
							<attribute key="device.variant" value="Cortex M.LM3S811"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420025816582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S811"/>
							<attribute key="device.variant" value="Cortex M.LM3S811"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420025816582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S811"/>
							<attribute key="device.variant" value="Cortex M.LM3S811"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420025816582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S811"/>
							<attribute key="device.variant" value="Cortex M.LM3S811"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420025816582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S811"/>
							<attribute key="device.variant" value="Cortex M.LM3S811"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420025816582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S811"/>
							<attribute key="device.variant" value="Cortex M.LM3S811"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420025816582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S811"/>
							<attribute key="device.variant" value="Cortex M.LM3S811"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420025816582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S811"/>
							<attribute key="device.variant" value="Cortex M.LM3S811"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420025816582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S811"/>
							<attribute key="device.variant" value="Cortex M.LM3S811"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420025816582"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S811"/>
							<attribute key="device.variant" value="Cortex M.LM3S811"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S812" desc="Stellaris LM3S812" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420026597478">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S812</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420026597478"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S812"/>
							<attribute key="device.variant" value="Cortex M.LM3S812"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420026597478"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S812"/>
							<attribute key="device.variant" value="Cortex M.LM3S812"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420026597478"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S812"/>
							<attribute key="device.variant" value="Cortex M.LM3S812"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420026777520">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S812</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420026777520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S812"/>
							<attribute key="device.variant" value="Cortex M.LM3S812"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420026777520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S812"/>
							<attribute key="device.variant" value="Cortex M.LM3S812"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420026777520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S812"/>
							<attribute key="device.variant" value="Cortex M.LM3S812"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420026777520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S812"/>
							<attribute key="device.variant" value="Cortex M.LM3S812"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420026777520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S812"/>
							<attribute key="device.variant" value="Cortex M.LM3S812"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420026777520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S812"/>
							<attribute key="device.variant" value="Cortex M.LM3S812"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420026777520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S812"/>
							<attribute key="device.variant" value="Cortex M.LM3S812"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420026777520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S812"/>
							<attribute key="device.variant" value="Cortex M.LM3S812"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420026777520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S812"/>
							<attribute key="device.variant" value="Cortex M.LM3S812"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420026777520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S812"/>
							<attribute key="device.variant" value="Cortex M.LM3S812"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420026777520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S812"/>
							<attribute key="device.variant" value="Cortex M.LM3S812"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420026777520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S812"/>
							<attribute key="device.variant" value="Cortex M.LM3S812"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S815" desc="Stellaris LM3S815" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420027541736">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S815</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420027541736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S815"/>
							<attribute key="device.variant" value="Cortex M.LM3S815"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420027541736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S815"/>
							<attribute key="device.variant" value="Cortex M.LM3S815"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420027541736"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S815"/>
							<attribute key="device.variant" value="Cortex M.LM3S815"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420027788492">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S815</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420027788492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S815"/>
							<attribute key="device.variant" value="Cortex M.LM3S815"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420027788492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S815"/>
							<attribute key="device.variant" value="Cortex M.LM3S815"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420027788492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S815"/>
							<attribute key="device.variant" value="Cortex M.LM3S815"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420027788492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S815"/>
							<attribute key="device.variant" value="Cortex M.LM3S815"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420027788492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S815"/>
							<attribute key="device.variant" value="Cortex M.LM3S815"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420027788492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S815"/>
							<attribute key="device.variant" value="Cortex M.LM3S815"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420027788492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S815"/>
							<attribute key="device.variant" value="Cortex M.LM3S815"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420027788492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S815"/>
							<attribute key="device.variant" value="Cortex M.LM3S815"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420027788492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S815"/>
							<attribute key="device.variant" value="Cortex M.LM3S815"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420027788492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S815"/>
							<attribute key="device.variant" value="Cortex M.LM3S815"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420027788492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S815"/>
							<attribute key="device.variant" value="Cortex M.LM3S815"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420027788492"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S815"/>
							<attribute key="device.variant" value="Cortex M.LM3S815"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S817" desc="Stellaris LM3S817" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420028686565">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S817</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420028686565"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S817"/>
							<attribute key="device.variant" value="Cortex M.LM3S817"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420028686565"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S817"/>
							<attribute key="device.variant" value="Cortex M.LM3S817"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420028686565"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S817"/>
							<attribute key="device.variant" value="Cortex M.LM3S817"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420028887134">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S817</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420028887134"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S817"/>
							<attribute key="device.variant" value="Cortex M.LM3S817"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420028887134"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S817"/>
							<attribute key="device.variant" value="Cortex M.LM3S817"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420028887134"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S817"/>
							<attribute key="device.variant" value="Cortex M.LM3S817"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420028887134"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S817"/>
							<attribute key="device.variant" value="Cortex M.LM3S817"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420028887134"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S817"/>
							<attribute key="device.variant" value="Cortex M.LM3S817"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420028887134"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S817"/>
							<attribute key="device.variant" value="Cortex M.LM3S817"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420028887134"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S817"/>
							<attribute key="device.variant" value="Cortex M.LM3S817"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420028887134"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S817"/>
							<attribute key="device.variant" value="Cortex M.LM3S817"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420028887134"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S817"/>
							<attribute key="device.variant" value="Cortex M.LM3S817"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420028887134"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S817"/>
							<attribute key="device.variant" value="Cortex M.LM3S817"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420028887134"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S817"/>
							<attribute key="device.variant" value="Cortex M.LM3S817"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420028887134"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S817"/>
							<attribute key="device.variant" value="Cortex M.LM3S817"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S818" desc="Stellaris LM3S818" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420029674444">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S818</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420029674444"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S818"/>
							<attribute key="device.variant" value="Cortex M.LM3S818"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420029674444"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S818"/>
							<attribute key="device.variant" value="Cortex M.LM3S818"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420029674444"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S818"/>
							<attribute key="device.variant" value="Cortex M.LM3S818"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420029863895">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S818</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420029863895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S818"/>
							<attribute key="device.variant" value="Cortex M.LM3S818"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420029863895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S818"/>
							<attribute key="device.variant" value="Cortex M.LM3S818"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420029863895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S818"/>
							<attribute key="device.variant" value="Cortex M.LM3S818"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420029863895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S818"/>
							<attribute key="device.variant" value="Cortex M.LM3S818"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420029863895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S818"/>
							<attribute key="device.variant" value="Cortex M.LM3S818"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420029863895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S818"/>
							<attribute key="device.variant" value="Cortex M.LM3S818"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420029863895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S818"/>
							<attribute key="device.variant" value="Cortex M.LM3S818"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420029863895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S818"/>
							<attribute key="device.variant" value="Cortex M.LM3S818"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420029863895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S818"/>
							<attribute key="device.variant" value="Cortex M.LM3S818"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420029863895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S818"/>
							<attribute key="device.variant" value="Cortex M.LM3S818"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420029863895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S818"/>
							<attribute key="device.variant" value="Cortex M.LM3S818"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420029863895"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S818"/>
							<attribute key="device.variant" value="Cortex M.LM3S818"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM3S828" desc="Stellaris LM3S828" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420030641369">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S828</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420030641369"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM3S828"/>
							<attribute key="device.variant" value="Cortex M.LM3S828"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420030641369"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM3S828"/>
							<attribute key="device.variant" value="Cortex M.LM3S828"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420030641369"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM3S828"/>
							<attribute key="device.variant" value="Cortex M.LM3S828"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420030828681">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM3S828</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420030828681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM3S828"/>
							<attribute key="device.variant" value="Cortex M.LM3S828"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420030828681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM3S828"/>
							<attribute key="device.variant" value="Cortex M.LM3S828"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420030828681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM3S828"/>
							<attribute key="device.variant" value="Cortex M.LM3S828"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420030828681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM3S828"/>
							<attribute key="device.variant" value="Cortex M.LM3S828"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420030828681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM3S828"/>
							<attribute key="device.variant" value="Cortex M.LM3S828"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420030828681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM3S828"/>
							<attribute key="device.variant" value="Cortex M.LM3S828"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420030828681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM3S828"/>
							<attribute key="device.variant" value="Cortex M.LM3S828"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420030828681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM3S828"/>
							<attribute key="device.variant" value="Cortex M.LM3S828"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420030828681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM3S828"/>
							<attribute key="device.variant" value="Cortex M.LM3S828"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420030828681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM3S828"/>
							<attribute key="device.variant" value="Cortex M.LM3S828"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420030828681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM3S828"/>
							<attribute key="device.variant" value="Cortex M.LM3S828"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420030828681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM3S828"/>
							<attribute key="device.variant" value="Cortex M.LM3S828"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS1DH5BB" desc="Stellaris LM4FS1DH5BB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420031580923">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS1DH5BB</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420031580923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS1DH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1DH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420031580923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS1DH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1DH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420031580923"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS1DH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1DH5BB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420031785769">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS1DH5BB</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420031785769"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS1DH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1DH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420031785769"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS1DH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1DH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420031785769"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS1DH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1DH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420031785769"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS1DH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1DH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420031785769"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS1DH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1DH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420031785769"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS1DH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1DH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420031785769"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS1DH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1DH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420031785769"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS1DH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1DH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420031785769"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS1DH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1DH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420031785769"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS1DH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1DH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420031785769"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS1DH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1DH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420031785769"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS1DH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1DH5BB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FX210MPDT" desc="Stellaris LM4FX210MPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420037247759">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FX210MPDT</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420037247759"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FX210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420037247759"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FX210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420037247759"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FX210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420037501357">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FX210MPDT</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420037501357"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FX210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420037501357"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FX210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420037501357"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FX210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420037501357"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FX210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420037501357"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FX210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420037501357"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FX210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420037501357"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FX210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420037501357"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FX210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420037501357"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FX210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420037501357"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FX210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420037501357"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FX210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420037501357"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FX210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FX210MZRB" desc="Stellaris LM4FX210MZRB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420038443478">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FX210MZRB</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420038443478"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FX210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420038443478"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FX210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420038443478"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FX210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MZRB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420038653456">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FX210MZRB</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420038653456"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FX210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420038653456"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FX210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420038653456"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FX210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420038653456"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FX210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420038653456"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FX210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420038653456"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FX210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420038653456"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FX210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420038653456"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FX210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420038653456"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FX210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420038653456"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FX210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420038653456"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FX210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420038653456"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FX210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX210MZRB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FX220MPDT" desc="Stellaris LM4FX220MPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420039552383">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FX220MPDT</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420039552383"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FX220MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420039552383"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FX220MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420039552383"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FX220MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420039756374">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FX220MPDT</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420039756374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FX220MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420039756374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FX220MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420039756374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FX220MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420039756374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FX220MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420039756374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FX220MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420039756374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FX220MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420039756374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FX220MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420039756374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FX220MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420039756374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FX220MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420039756374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FX220MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420039756374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FX220MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420039756374"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FX220MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FX220MZRB" desc="Stellaris LM4FX220MZRB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420040646321">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FX220MZRB</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420040646321"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FX220MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420040646321"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FX220MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420040646321"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FX220MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MZRB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420040852877">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FX220MZRB</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420040852877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FX220MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420040852877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FX220MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420040852877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FX220MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420040852877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FX220MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420040852877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FX220MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420040852877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FX220MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420040852877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FX220MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420040852877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FX220MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420040852877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FX220MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420040852877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FX220MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420040852877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FX220MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420040852877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FX220MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX220MZRB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FX230MPDT" desc="Stellaris LM4FX230MPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420041573901">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FX230MPDT</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420041573901"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FX230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420041573901"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FX230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420041573901"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FX230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420041762496">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FX230MPDT</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420041762496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FX230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420041762496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FX230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420041762496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FX230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420041762496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FX230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420041762496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FX230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420041762496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FX230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420041762496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FX230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420041762496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FX230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420041762496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FX230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420041762496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FX230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420041762496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FX230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420041762496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FX230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FX230MZRB" desc="Stellaris LM4FX230MZRB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420042650305">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FX230MZRB</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420042650305"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FX230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420042650305"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FX230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420042650305"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FX230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MZRB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420042862421">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FX230MZRB</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420042862421"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FX230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420042862421"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FX230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420042862421"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FX230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420042862421"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FX230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420042862421"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FX230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420042862421"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FX230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420042862421"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FX230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420042862421"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FX230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420042862421"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FX230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420042862421"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FX230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420042862421"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FX230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420042862421"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FX230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FX230MZRB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris SC01120E5QR" desc="Stellaris SC01120E5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420043754506">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris SC01120E5QR</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<filter.ref ref.id="filter_1721420043754506"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisSC01120E5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<filter.ref ref.id="filter_1721420043754506"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisSC01120E5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<filter.ref ref.id="filter_1721420043754506"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisSC01120E5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01120E5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420043896487">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris SC01120E5QR</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<filter.ref ref.id="filter_1721420043896487"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisSC01120E5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<filter.ref ref.id="filter_1721420043896487"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisSC01120E5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<filter.ref ref.id="filter_1721420043896487"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisSC01120E5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<filter.ref ref.id="filter_1721420043896487"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisSC01120E5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<filter.ref ref.id="filter_1721420043896487"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisSC01120E5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<filter.ref ref.id="filter_1721420043896487"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisSC01120E5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<filter.ref ref.id="filter_1721420043896487"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisSC01120E5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<filter.ref ref.id="filter_1721420043896487"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisSC01120E5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<filter.ref ref.id="filter_1721420043896487"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisSC01120E5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<filter.ref ref.id="filter_1721420043896487"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisSC01120E5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<filter.ref ref.id="filter_1721420043896487"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisSC01120E5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<filter.ref ref.id="filter_1721420043896487"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisSC01120E5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01120E5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris SC01230H5QR" desc="Stellaris SC01230H5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420044525565">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris SC01230H5QR</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<filter.ref ref.id="filter_1721420044525565"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisSC01230H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<filter.ref ref.id="filter_1721420044525565"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisSC01230H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<filter.ref ref.id="filter_1721420044525565"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisSC01230H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01230H5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420044656855">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris SC01230H5QR</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<filter.ref ref.id="filter_1721420044656855"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisSC01230H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<filter.ref ref.id="filter_1721420044656855"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisSC01230H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<filter.ref ref.id="filter_1721420044656855"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisSC01230H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<filter.ref ref.id="filter_1721420044656855"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisSC01230H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<filter.ref ref.id="filter_1721420044656855"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisSC01230H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<filter.ref ref.id="filter_1721420044656855"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisSC01230H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<filter.ref ref.id="filter_1721420044656855"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisSC01230H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<filter.ref ref.id="filter_1721420044656855"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisSC01230H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<filter.ref ref.id="filter_1721420044656855"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisSC01230H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<filter.ref ref.id="filter_1721420044656855"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisSC01230H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<filter.ref ref.id="filter_1721420044656855"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisSC01230H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<filter.ref ref.id="filter_1721420044656855"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisSC01230H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01230H5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris SC01231H5QR" desc="Stellaris SC01231H5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420045754213">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris SC01231H5QR</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<filter.ref ref.id="filter_1721420045754213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisSC01231H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<filter.ref ref.id="filter_1721420045754213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisSC01231H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<filter.ref ref.id="filter_1721420045754213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisSC01231H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01231H5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420046076237">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris SC01231H5QR</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<filter.ref ref.id="filter_1721420046076237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisSC01231H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<filter.ref ref.id="filter_1721420046076237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisSC01231H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<filter.ref ref.id="filter_1721420046076237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisSC01231H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<filter.ref ref.id="filter_1721420046076237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisSC01231H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<filter.ref ref.id="filter_1721420046076237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisSC01231H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<filter.ref ref.id="filter_1721420046076237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisSC01231H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<filter.ref ref.id="filter_1721420046076237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisSC01231H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<filter.ref ref.id="filter_1721420046076237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisSC01231H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<filter.ref ref.id="filter_1721420046076237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisSC01231H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<filter.ref ref.id="filter_1721420046076237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisSC01231H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<filter.ref ref.id="filter_1721420046076237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisSC01231H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<filter.ref ref.id="filter_1721420046076237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisSC01231H5QR"/>
							<attribute key="device.variant" value="Cortex M.SC01231H5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris SC01232H5BB" desc="Stellaris SC01232H5BB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420051994960">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris SC01232H5BB</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<filter.ref ref.id="filter_1721420051994960"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisSC01232H5BB"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<filter.ref ref.id="filter_1721420051994960"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisSC01232H5BB"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<filter.ref ref.id="filter_1721420051994960"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisSC01232H5BB"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5BB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420052241716">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris SC01232H5BB</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<filter.ref ref.id="filter_1721420052241716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisSC01232H5BB"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<filter.ref ref.id="filter_1721420052241716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisSC01232H5BB"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<filter.ref ref.id="filter_1721420052241716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisSC01232H5BB"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<filter.ref ref.id="filter_1721420052241716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisSC01232H5BB"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<filter.ref ref.id="filter_1721420052241716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisSC01232H5BB"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<filter.ref ref.id="filter_1721420052241716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisSC01232H5BB"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<filter.ref ref.id="filter_1721420052241716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisSC01232H5BB"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<filter.ref ref.id="filter_1721420052241716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisSC01232H5BB"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<filter.ref ref.id="filter_1721420052241716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisSC01232H5BB"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<filter.ref ref.id="filter_1721420052241716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisSC01232H5BB"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<filter.ref ref.id="filter_1721420052241716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisSC01232H5BB"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<filter.ref ref.id="filter_1721420052241716"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisSC01232H5BB"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5BB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris SC01232H5QC" desc="Stellaris SC01232H5QC" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420053115412">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris SC01232H5QC</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<filter.ref ref.id="filter_1721420053115412"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisSC01232H5QC"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<filter.ref ref.id="filter_1721420053115412"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisSC01232H5QC"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<filter.ref ref.id="filter_1721420053115412"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisSC01232H5QC"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5QC"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420053343779">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris SC01232H5QC</tag>
					<tag>Stellaris Cortex LM3Sxxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<filter.ref ref.id="filter_1721420053343779"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisSC01232H5QC"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<filter.ref ref.id="filter_1721420053343779"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisSC01232H5QC"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<filter.ref ref.id="filter_1721420053343779"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisSC01232H5QC"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<filter.ref ref.id="filter_1721420053343779"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisSC01232H5QC"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<filter.ref ref.id="filter_1721420053343779"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisSC01232H5QC"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<filter.ref ref.id="filter_1721420053343779"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisSC01232H5QC"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<filter.ref ref.id="filter_1721420053343779"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisSC01232H5QC"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<filter.ref ref.id="filter_1721420053343779"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisSC01232H5QC"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<filter.ref ref.id="filter_1721420053343779"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisSC01232H5QC"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<filter.ref ref.id="filter_1721420053343779"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisSC01232H5QC"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<filter.ref ref.id="filter_1721420053343779"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisSC01232H5QC"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<filter.ref ref.id="filter_1721420053343779"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisSC01232H5QC"/>
							<attribute key="device.variant" value="Cortex M.SC01232H5QC"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>
	<contents name="Stellaris Cortex LM4F11x" desc="Stellaris Cortex LM4F11x" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="Stellaris LM4F110B2QR" desc="Stellaris LM4F110B2QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420059846677">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F110B2QR</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420059846677"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F110B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420059846677"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F110B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420059846677"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F110B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110B2QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420059995501">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F110B2QR</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420059995501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F110B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420059995501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F110B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420059995501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F110B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420059995501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F110B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420059995501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F110B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420059995501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F110B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420059995501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F110B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420059995501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F110B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420059995501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F110B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420059995501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F110B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420059995501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F110B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420059995501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F110B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110B2QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F110C4QR" desc="Stellaris LM4F110C4QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420060524080">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F110C4QR</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420060524080"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F110C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420060524080"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F110C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420060524080"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F110C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110C4QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420060638264">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F110C4QR</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420060638264"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F110C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420060638264"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F110C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420060638264"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F110C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420060638264"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F110C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420060638264"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F110C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420060638264"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F110C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420060638264"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F110C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420060638264"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F110C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420060638264"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F110C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420060638264"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F110C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420060638264"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F110C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420060638264"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F110C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110C4QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F110E5QR" desc="Stellaris LM4F110E5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420061167699">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F110E5QR</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420061167699"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F110E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420061167699"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F110E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420061167699"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F110E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110E5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420061287014">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F110E5QR</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420061287014"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F110E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420061287014"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F110E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420061287014"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F110E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420061287014"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F110E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420061287014"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F110E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420061287014"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F110E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420061287014"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F110E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420061287014"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F110E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420061287014"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F110E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420061287014"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F110E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420061287014"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F110E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420061287014"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F110E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110E5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F110H5QR" desc="Stellaris LM4F110H5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420061765986">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F110H5QR</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420061765986"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F110H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420061765986"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F110H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420061765986"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F110H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110H5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420061875893">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F110H5QR</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420061875893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F110H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420061875893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F110H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420061875893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F110H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420061875893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F110H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420061875893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F110H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420061875893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F110H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420061875893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F110H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420061875893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F110H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420061875893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F110H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420061875893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F110H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420061875893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F110H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420061875893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F110H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F110H5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F111B2QR" desc="Stellaris LM4F111B2QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420064763837">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F111B2QR</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420064763837"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F111B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420064763837"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F111B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420064763837"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F111B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111B2QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420064907100">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F111B2QR</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420064907100"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F111B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420064907100"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F111B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420064907100"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F111B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420064907100"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F111B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420064907100"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F111B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420064907100"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F111B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420064907100"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F111B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420064907100"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F111B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420064907100"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F111B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420064907100"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F111B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420064907100"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F111B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420064907100"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F111B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111B2QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F111C4QR" desc="Stellaris LM4F111C4QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420065419857">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F111C4QR</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420065419857"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F111C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420065419857"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F111C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420065419857"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F111C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111C4QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420065532758">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F111C4QR</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420065532758"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F111C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420065532758"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F111C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420065532758"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F111C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420065532758"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F111C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420065532758"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F111C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420065532758"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F111C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420065532758"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F111C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420065532758"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F111C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420065532758"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F111C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420065532758"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F111C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420065532758"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F111C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420065532758"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F111C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111C4QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F111E5QR" desc="Stellaris LM4F111E5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420066122491">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F111E5QR</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420066122491"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F111E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420066122491"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F111E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420066122491"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F111E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111E5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420066233681">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F111E5QR</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420066233681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F111E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420066233681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F111E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420066233681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F111E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420066233681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F111E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420066233681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F111E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420066233681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F111E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420066233681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F111E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420066233681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F111E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420066233681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F111E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420066233681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F111E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420066233681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F111E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420066233681"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F111E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111E5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F111H5QR" desc="Stellaris LM4F111H5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420066715219">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F111H5QR</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420066715219"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F111H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420066715219"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F111H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420066715219"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F111H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111H5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420066822560">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F111H5QR</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420066822560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F111H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420066822560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F111H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420066822560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F111H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420066822560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F111H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420066822560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F111H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420066822560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F111H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420066822560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F111H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420066822560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F111H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420066822560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F111H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420066822560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F111H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420066822560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F111H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420066822560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F111H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F111H5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F112C4QC" desc="Stellaris LM4F112C4QC" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420067356699">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F112C4QC</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420067356699"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F112C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420067356699"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F112C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420067356699"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F112C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112C4QC"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420067465323">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F112C4QC</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420067465323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F112C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420067465323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F112C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420067465323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F112C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420067465323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F112C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420067465323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F112C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420067465323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F112C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420067465323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F112C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420067465323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F112C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420067465323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F112C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420067465323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F112C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420067465323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F112C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420067465323"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F112C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112C4QC"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F112E5QC" desc="Stellaris LM4F112E5QC" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420068081572">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F112E5QC</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420068081572"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F112E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420068081572"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F112E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420068081572"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F112E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112E5QC"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420068191479">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F112E5QC</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420068191479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F112E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420068191479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F112E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420068191479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F112E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420068191479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F112E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420068191479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F112E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420068191479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F112E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420068191479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F112E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420068191479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F112E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420068191479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F112E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420068191479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F112E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420068191479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F112E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420068191479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F112E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112E5QC"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F112H5QC" desc="Stellaris LM4F112H5QC" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420068662325">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F112H5QC</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420068662325"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F112H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420068662325"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F112H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420068662325"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F112H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QC"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420068768383">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F112H5QC</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420068768383"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F112H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420068768383"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F112H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420068768383"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F112H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420068768383"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F112H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420068768383"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F112H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420068768383"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F112H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420068768383"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F112H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420068768383"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F112H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420068768383"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F112H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420068768383"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F112H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420068768383"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F112H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420068768383"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F112H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QC"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F112H5QD" desc="Stellaris LM4F112H5QD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420069234953">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F112H5QD</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420069234953"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F112H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420069234953"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F112H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420069234953"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F112H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420069342294">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F112H5QD</tag>
					<tag>Stellaris Cortex LM4F11x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420069342294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F112H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420069342294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F112H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420069342294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F112H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420069342294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F112H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420069342294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F112H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420069342294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F112H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420069342294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F112H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420069342294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F112H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420069342294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F112H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420069342294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F112H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420069342294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F112H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420069342294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F112H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F112H5QD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>
	<contents name="Stellaris Cortex LM4F12x" desc="Stellaris Cortex LM4F12x" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="Stellaris LM4F120B2QR" desc="Stellaris LM4F120B2QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420074094807">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F120B2QR</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420074094807"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F120B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420074094807"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F120B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420074094807"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F120B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120B2QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420074328306">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F120B2QR</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420074328306"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F120B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420074328306"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F120B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420074328306"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F120B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420074328306"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F120B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420074328306"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F120B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420074328306"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F120B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420074328306"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F120B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420074328306"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F120B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420074328306"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F120B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420074328306"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F120B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420074328306"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F120B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420074328306"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F120B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120B2QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F120C4QR" desc="Stellaris LM4F120C4QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420075260163">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F120C4QR</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420075260163"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F120C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420075260163"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F120C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420075260163"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F120C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120C4QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420075473562">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F120C4QR</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420075473562"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F120C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420075473562"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F120C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420075473562"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F120C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420075473562"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F120C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420075473562"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F120C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420075473562"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F120C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420075473562"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F120C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420075473562"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F120C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420075473562"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F120C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420075473562"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F120C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420075473562"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F120C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420075473562"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F120C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120C4QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F120E5QR" desc="Stellaris LM4F120E5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420076472560">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F120E5QR</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420076472560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F120E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420076472560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F120E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420076472560"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F120E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120E5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420076678689">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F120E5QR</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420076678689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F120E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420076678689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F120E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420076678689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F120E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420076678689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F120E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420076678689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F120E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420076678689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F120E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420076678689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F120E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420076678689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F120E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420076678689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F120E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420076678689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F120E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420076678689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F120E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420076678689"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F120E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120E5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F120H5QR" desc="Stellaris LM4F120H5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420077516890">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F120H5QR</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420077516890"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F120H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420077516890"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F120H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420077516890"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F120H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120H5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420077704202">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F120H5QR</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420077704202"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F120H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420077704202"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F120H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420077704202"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F120H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420077704202"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F120H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420077704202"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F120H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420077704202"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F120H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420077704202"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F120H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420077704202"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F120H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420077704202"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F120H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420077704202"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F120H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420077704202"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F120H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420077704202"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F120H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F120H5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F121B2QR" desc="Stellaris LM4F121B2QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420078566779">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F121B2QR</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420078566779"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F121B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420078566779"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F121B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420078566779"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F121B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121B2QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420078749815">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F121B2QR</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420078749815"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F121B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420078749815"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F121B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420078749815"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F121B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420078749815"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F121B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420078749815"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F121B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420078749815"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F121B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420078749815"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F121B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420078749815"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F121B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420078749815"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F121B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420078749815"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F121B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420078749815"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F121B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420078749815"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F121B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121B2QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F121C4QR" desc="Stellaris LM4F121C4QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420079572620">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F121C4QR</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420079572620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F121C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420079572620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F121C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420079572620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F121C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121C4QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420079755228">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F121C4QR</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420079755228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F121C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420079755228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F121C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420079755228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F121C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420079755228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F121C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420079755228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F121C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420079755228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F121C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420079755228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F121C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420079755228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F121C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420079755228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F121C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420079755228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F121C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420079755228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F121C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420079755228"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F121C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121C4QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F121E5QR" desc="Stellaris LM4F121E5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420080578033">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F121E5QR</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420080578033"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F121E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420080578033"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F121E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420080578033"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F121E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121E5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420080760213">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F121E5QR</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420080760213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F121E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420080760213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F121E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420080760213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F121E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420080760213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F121E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420080760213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F121E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420080760213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F121E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420080760213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F121E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420080760213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F121E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420080760213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F121E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420080760213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F121E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420080760213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F121E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420080760213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F121E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121E5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F121H5QR" desc="Stellaris LM4F121H5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420081587295">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F121H5QR</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420081587295"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F121H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420081587295"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F121H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420081587295"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F121H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121H5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420081769903">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F121H5QR</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420081769903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F121H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420081769903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F121H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420081769903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F121H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420081769903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F121H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420081769903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F121H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420081769903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F121H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420081769903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F121H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420081769903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F121H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420081769903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F121H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420081769903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F121H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420081769903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F121H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420081769903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F121H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F121H5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F122C4QC" desc="Stellaris LM4F122C4QC" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420085503745">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F122C4QC</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420085503745"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F122C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420085503745"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F122C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420085503745"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F122C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122C4QC"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420085664543">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F122C4QC</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420085664543"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F122C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420085664543"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F122C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420085664543"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F122C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420085664543"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F122C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420085664543"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F122C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420085664543"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F122C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420085664543"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F122C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420085664543"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F122C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420085664543"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F122C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420085664543"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F122C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420085664543"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F122C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420085664543"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F122C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122C4QC"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F122E5QC" desc="Stellaris LM4F122E5QC" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420086358197">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F122E5QC</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420086358197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F122E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420086358197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F122E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420086358197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F122E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122E5QC"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420086473663">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F122E5QC</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420086473663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F122E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420086473663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F122E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420086473663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F122E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420086473663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F122E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420086473663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F122E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420086473663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F122E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420086473663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F122E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420086473663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F122E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420086473663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F122E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420086473663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F122E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420086473663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F122E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420086473663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F122E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122E5QC"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F122H5QC" desc="Stellaris LM4F122H5QC" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420086966320">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F122H5QC</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420086966320"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F122H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420086966320"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F122H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420086966320"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F122H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QC"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420087075800">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F122H5QC</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420087075800"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F122H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420087075800"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F122H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420087075800"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F122H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420087075800"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F122H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420087075800"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F122H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420087075800"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F122H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420087075800"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F122H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420087075800"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F122H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420087075800"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F122H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420087075800"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F122H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420087075800"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F122H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420087075800"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F122H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QC"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F122H5QD" desc="Stellaris LM4F122H5QD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420087557765">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F122H5QD</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420087557765"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F122H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420087557765"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F122H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420087557765"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F122H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420087664678">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F122H5QD</tag>
					<tag>Stellaris Cortex LM4F12x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420087664678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F122H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420087664678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F122H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420087664678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F122H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420087664678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F122H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420087664678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F122H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420087664678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F122H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420087664678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F122H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420087664678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F122H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420087664678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F122H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420087664678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F122H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420087664678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F122H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420087664678"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F122H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F122H5QD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>
	<contents name="Stellaris Cortex LM4F13x" desc="Stellaris Cortex LM4F13x" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="Stellaris LM4F130C4QR" desc="Stellaris LM4F130C4QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420089535662">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F130C4QR</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420089535662"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F130C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420089535662"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F130C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420089535662"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F130C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130C4QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420089659254">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F130C4QR</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420089659254"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F130C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420089659254"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F130C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420089659254"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F130C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420089659254"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F130C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420089659254"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F130C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420089659254"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F130C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420089659254"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F130C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420089659254"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F130C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420089659254"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F130C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420089659254"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F130C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420089659254"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F130C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420089659254"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F130C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130C4QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F130E5QR" desc="Stellaris LM4F130E5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420090158325">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F130E5QR</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420090158325"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F130E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420090158325"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F130E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420090158325"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F130E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130E5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420090266522">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F130E5QR</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420090266522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F130E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420090266522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F130E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420090266522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F130E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420090266522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F130E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420090266522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F130E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420090266522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F130E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420090266522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F130E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420090266522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F130E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420090266522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F130E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420090266522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F130E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420090266522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F130E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420090266522"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F130E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130E5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F130H5QR" desc="Stellaris LM4F130H5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420090758751">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F130H5QR</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420090758751"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F130H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420090758751"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F130H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420090758751"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F130H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130H5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420090865237">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F130H5QR</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420090865237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F130H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420090865237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F130H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420090865237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F130H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420090865237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F130H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420090865237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F130H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420090865237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F130H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420090865237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F130H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420090865237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F130H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420090865237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F130H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420090865237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F130H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420090865237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F130H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420090865237"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F130H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F130H5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F131C4QR" desc="Stellaris LM4F131C4QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420091338649">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F131C4QR</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420091338649"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F131C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420091338649"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F131C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420091338649"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F131C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131C4QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420091443852">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F131C4QR</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420091443852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F131C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420091443852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F131C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420091443852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F131C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420091443852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F131C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420091443852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F131C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420091443852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F131C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420091443852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F131C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420091443852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F131C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420091443852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F131C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420091443852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F131C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420091443852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F131C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420091443852"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F131C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131C4QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F131E5QR" desc="Stellaris LM4F131E5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420094211625">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F131E5QR</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420094211625"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F131E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420094211625"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F131E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420094211625"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F131E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131E5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420094339493">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F131E5QR</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420094339493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F131E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420094339493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F131E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420094339493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F131E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420094339493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F131E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420094339493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F131E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420094339493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F131E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420094339493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F131E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420094339493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F131E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420094339493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F131E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420094339493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F131E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420094339493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F131E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420094339493"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F131E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131E5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F131H5QR" desc="Stellaris LM4F131H5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420094833433">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F131H5QR</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420094833433"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F131H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420094833433"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F131H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420094833433"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F131H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131H5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420094936070">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F131H5QR</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420094936070"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F131H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420094936070"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F131H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420094936070"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F131H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420094936070"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F131H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420094936070"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F131H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420094936070"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F131H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420094936070"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F131H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420094936070"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F131H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420094936070"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F131H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420094936070"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F131H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420094936070"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F131H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420094936070"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F131H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F131H5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F132C4QC" desc="Stellaris LM4F132C4QC" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420095394514">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F132C4QC</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420095394514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F132C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420095394514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F132C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420095394514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F132C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132C4QC"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420095495868">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F132C4QC</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420095495868"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F132C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420095495868"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F132C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420095495868"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F132C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420095495868"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F132C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420095495868"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F132C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420095495868"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F132C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420095495868"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F132C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420095495868"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F132C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420095495868"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F132C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420095495868"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F132C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420095495868"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F132C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420095495868"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F132C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132C4QC"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F132E5QC" desc="Stellaris LM4F132E5QC" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420095952174">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F132E5QC</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420095952174"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F132E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420095952174"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F132E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420095952174"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F132E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132E5QC"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420096053528">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F132E5QC</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420096053528"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F132E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420096053528"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F132E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420096053528"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F132E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420096053528"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F132E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420096053528"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F132E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420096053528"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F132E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420096053528"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F132E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420096053528"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F132E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420096053528"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F132E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420096053528"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F132E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420096053528"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F132E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420096053528"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F132E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132E5QC"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F132H5QC" desc="Stellaris LM4F132H5QC" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420096566285">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F132H5QC</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420096566285"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F132H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420096566285"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F132H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420096566285"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F132H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QC"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420096666355">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F132H5QC</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420096666355"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F132H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420096666355"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F132H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420096666355"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F132H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420096666355"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F132H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420096666355"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F132H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420096666355"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F132H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420096666355"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F132H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420096666355"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F132H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420096666355"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F132H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420096666355"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F132H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420096666355"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F132H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420096666355"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F132H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QC"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F132H5QD" desc="Stellaris LM4F132H5QD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420097119240">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F132H5QD</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420097119240"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F132H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420097119240"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F132H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420097119240"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F132H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420097218884">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F132H5QD</tag>
					<tag>Stellaris Cortex LM4F13x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420097218884"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F132H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420097218884"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F132H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420097218884"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F132H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420097218884"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F132H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420097218884"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F132H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420097218884"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F132H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420097218884"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F132H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420097218884"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F132H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420097218884"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F132H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420097218884"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F132H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420097218884"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F132H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420097218884"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F132H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F132H5QD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>
	<contents name="Stellaris Cortex LM4F21x" desc="Stellaris Cortex LM4F21x" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="Stellaris LM4F210B2QR" desc="Stellaris LM4F210B2QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420098898707">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F210B2QR</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420098898707"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F210B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420098898707"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F210B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420098898707"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F210B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210B2QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420099077893">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F210B2QR</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420099077893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F210B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420099077893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F210B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420099077893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F210B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420099077893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F210B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420099077893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F210B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420099077893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F210B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420099077893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F210B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420099077893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F210B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420099077893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F210B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420099077893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F210B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420099077893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F210B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420099077893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F210B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210B2QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F210C4QR" desc="Stellaris LM4F210C4QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420099899843">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F210C4QR</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420099899843"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F210C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420099899843"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F210C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420099899843"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F210C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210C4QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420100089294">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F210C4QR</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420100089294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F210C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420100089294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F210C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420100089294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F210C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420100089294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F210C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420100089294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F210C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420100089294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F210C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420100089294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F210C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420100089294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F210C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420100089294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F210C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420100089294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F210C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420100089294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F210C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420100089294"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F210C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210C4QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F210E5QR" desc="Stellaris LM4F210E5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420103609737">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F210E5QR</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420103609737"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F210E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420103609737"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F210E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420103609737"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F210E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210E5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420103829551">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F210E5QR</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420103829551"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F210E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420103829551"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F210E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420103829551"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F210E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420103829551"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F210E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420103829551"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F210E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420103829551"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F210E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420103829551"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F210E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420103829551"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F210E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420103829551"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F210E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420103829551"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F210E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420103829551"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F210E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420103829551"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F210E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210E5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F210H5QR" desc="Stellaris LM4F210H5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420104695977">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F210H5QR</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420104695977"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F210H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420104695977"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F210H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420104695977"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F210H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210H5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420104902105">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F210H5QR</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420104902105"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F210H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420104902105"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F210H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420104902105"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F210H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420104902105"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F210H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420104902105"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F210H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420104902105"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F210H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420104902105"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F210H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420104902105"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F210H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420104902105"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F210H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420104902105"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F210H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420104902105"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F210H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420104902105"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F210H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F210H5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F211B2QR" desc="Stellaris LM4F211B2QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420105794618">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F211B2QR</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420105794618"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F211B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420105794618"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F211B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420105794618"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F211B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211B2QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420105993905">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F211B2QR</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420105993905"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F211B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420105993905"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F211B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420105993905"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F211B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420105993905"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F211B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420105993905"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F211B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420105993905"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F211B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420105993905"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F211B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420105993905"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F211B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420105993905"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F211B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420105993905"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F211B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420105993905"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F211B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211B2QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420105993905"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F211B2QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211B2QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F211C4QR" desc="Stellaris LM4F211C4QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420106863752">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F211C4QR</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420106863752"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F211C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420106863752"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F211C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420106863752"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F211C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211C4QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420107087415">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F211C4QR</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420107087415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F211C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420107087415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F211C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420107087415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F211C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420107087415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F211C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420107087415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F211C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420107087415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F211C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420107087415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F211C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420107087415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F211C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420107087415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F211C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420107087415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F211C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420107087415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F211C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211C4QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420107087415"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F211C4QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211C4QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F211E5QR" desc="Stellaris LM4F211E5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420107926043">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F211E5QR</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420107926043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F211E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420107926043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F211E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420107926043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F211E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211E5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420108103519">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F211E5QR</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420108103519"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F211E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420108103519"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F211E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420108103519"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F211E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420108103519"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F211E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420108103519"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F211E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420108103519"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F211E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420108103519"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F211E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420108103519"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F211E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420108103519"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F211E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420108103519"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F211E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420108103519"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F211E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420108103519"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F211E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211E5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F211H5QR" desc="Stellaris LM4F211H5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420108918199">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F211H5QR</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420108918199"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F211H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420108918199"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F211H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420108918199"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F211H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211H5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420109111498">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F211H5QR</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420109111498"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F211H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420109111498"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F211H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420109111498"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F211H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420109111498"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F211H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420109111498"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F211H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420109111498"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F211H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420109111498"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F211H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420109111498"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F211H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420109111498"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F211H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420109111498"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F211H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420109111498"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F211H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420109111498"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F211H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F211H5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F212C4QC" desc="Stellaris LM4F212C4QC" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420109983484">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F212C4QC</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420109983484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F212C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420109983484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F212C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420109983484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F212C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212C4QC"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420110172079">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F212C4QC</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420110172079"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F212C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420110172079"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F212C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420110172079"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F212C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420110172079"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F212C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420110172079"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F212C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420110172079"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F212C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420110172079"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F212C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420110172079"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F212C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420110172079"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F212C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420110172079"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F212C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420110172079"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F212C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212C4QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420110172079"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F212C4QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212C4QC"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F212E5QC" desc="Stellaris LM4F212E5QC" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420110940572">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F212E5QC</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420110940572"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F212E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420110940572"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F212E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420110940572"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F212E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212E5QC"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420111113772">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F212E5QC</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420111113772"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F212E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420111113772"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F212E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420111113772"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F212E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420111113772"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F212E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420111113772"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F212E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420111113772"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F212E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420111113772"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F212E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420111113772"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F212E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420111113772"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F212E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420111113772"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F212E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420111113772"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F212E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420111113772"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F212E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212E5QC"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F212H5BB" desc="Stellaris LM4F212H5BB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420111931017">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F212H5BB</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420111931017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F212H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420111931017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F212H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420111931017"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F212H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5BB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420115642622">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F212H5BB</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420115642622"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F212H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420115642622"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F212H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420115642622"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F212H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420115642622"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F212H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420115642622"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F212H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420115642622"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F212H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420115642622"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F212H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420115642622"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F212H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420115642622"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F212H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420115642622"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F212H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420115642622"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F212H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420115642622"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F212H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5BB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F212H5QC" desc="Stellaris LM4F212H5QC" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420116459440">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F212H5QC</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420116459440"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F212H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420116459440"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F212H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420116459440"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F212H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QC"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420116641620">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F212H5QC</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420116641620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F212H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420116641620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F212H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420116641620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F212H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420116641620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F212H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420116641620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F212H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420116641620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F212H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420116641620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F212H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420116641620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F212H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420116641620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F212H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420116641620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F212H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420116641620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F212H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420116641620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F212H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QC"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F212H5QD" desc="Stellaris LM4F212H5QD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420117240335">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F212H5QD</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420117240335"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F212H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420117240335"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F212H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420117240335"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F212H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420117366920">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F212H5QD</tag>
					<tag>Stellaris Cortex LM4F21x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420117366920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F212H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420117366920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F212H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420117366920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F212H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420117366920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F212H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420117366920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F212H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420117366920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F212H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420117366920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F212H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420117366920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F212H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420117366920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F212H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420117366920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F212H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420117366920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F212H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420117366920"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F212H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F212H5QD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>
	<contents name="Stellaris Cortex LM4F23x" desc="Stellaris Cortex LM4F23x" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="Stellaris LM4F230E5QR" desc="Stellaris LM4F230E5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420119489364">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F230E5QR</tag>
					<tag>Stellaris Cortex LM4F23x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420119489364"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F230E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420119489364"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F230E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420119489364"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F230E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230E5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420119624075">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F230E5QR</tag>
					<tag>Stellaris Cortex LM4F23x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420119624075"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F230E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420119624075"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F230E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420119624075"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F230E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420119624075"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F230E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420119624075"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F230E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420119624075"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F230E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420119624075"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F230E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420119624075"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F230E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420119624075"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F230E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420119624075"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F230E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420119624075"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F230E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420119624075"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F230E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230E5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F230H5QR" desc="Stellaris LM4F230H5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420120174893">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F230H5QR</tag>
					<tag>Stellaris Cortex LM4F23x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420120174893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F230H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420120174893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F230H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420120174893"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F230H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230H5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420120292925">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F230H5QR</tag>
					<tag>Stellaris Cortex LM4F23x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420120292925"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F230H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420120292925"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F230H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420120292925"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F230H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420120292925"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F230H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420120292925"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F230H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420120292925"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F230H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420120292925"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F230H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420120292925"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F230H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420120292925"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F230H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420120292925"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F230H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420120292925"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F230H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420120292925"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F230H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F230H5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F231E5QR" desc="Stellaris LM4F231E5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420120779167">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F231E5QR</tag>
					<tag>Stellaris Cortex LM4F23x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420120779167"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F231E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420120779167"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F231E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420120779167"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F231E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231E5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420120947663">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F231E5QR</tag>
					<tag>Stellaris Cortex LM4F23x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420120947663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F231E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420120947663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F231E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420120947663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F231E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420120947663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F231E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420120947663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F231E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420120947663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F231E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420120947663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F231E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420120947663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F231E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420120947663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F231E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420120947663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F231E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420120947663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F231E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231E5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420120947663"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F231E5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231E5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F231H5QR" desc="Stellaris LM4F231H5QR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420121471966">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F231H5QR</tag>
					<tag>Stellaris Cortex LM4F23x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420121471966"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F231H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420121471966"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F231H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420121471966"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F231H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231H5QR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420121660988">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F231H5QR</tag>
					<tag>Stellaris Cortex LM4F23x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420121660988"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F231H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420121660988"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F231H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420121660988"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F231H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420121660988"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F231H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420121660988"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F231H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420121660988"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F231H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420121660988"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F231H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420121660988"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F231H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420121660988"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F231H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420121660988"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F231H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420121660988"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F231H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231H5QR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420121660988"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F231H5QR"/>
							<attribute key="device.variant" value="Cortex M.LM4F231H5QR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F232E5QC" desc="Stellaris LM4F232E5QC" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420122704890">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F232E5QC</tag>
					<tag>Stellaris Cortex LM4F23x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420122704890"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F232E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420122704890"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F232E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420122704890"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F232E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232E5QC"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420122996978">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F232E5QC</tag>
					<tag>Stellaris Cortex LM4F23x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420122996978"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F232E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420122996978"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F232E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420122996978"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F232E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420122996978"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F232E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420122996978"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F232E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420122996978"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F232E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420122996978"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F232E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420122996978"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F232E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420122996978"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F232E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420122996978"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F232E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420122996978"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F232E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232E5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420122996978"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F232E5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232E5QC"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F232H5BB" desc="Stellaris LM4F232H5BB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420123820638">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F232H5BB</tag>
					<tag>Stellaris Cortex LM4F23x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420123820638"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F232H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420123820638"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F232H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420123820638"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F232H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5BB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420123939954">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F232H5BB</tag>
					<tag>Stellaris Cortex LM4F23x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420123939954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F232H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420123939954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F232H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420123939954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F232H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420123939954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F232H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420123939954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F232H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420123939954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F232H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420123939954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F232H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420123939954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F232H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420123939954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F232H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420123939954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F232H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420123939954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F232H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420123939954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F232H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5BB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F232H5QC" desc="Stellaris LM4F232H5QC" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420127043862">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F232H5QC</tag>
					<tag>Stellaris Cortex LM4F23x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420127043862"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F232H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420127043862"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F232H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420127043862"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F232H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QC"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420127249136">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F232H5QC</tag>
					<tag>Stellaris Cortex LM4F23x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420127249136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F232H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420127249136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F232H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420127249136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F232H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420127249136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F232H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420127249136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F232H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420127249136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F232H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420127249136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F232H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420127249136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F232H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420127249136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F232H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420127249136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F232H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420127249136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F232H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QC"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420127249136"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F232H5QC"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QC"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4F232H5QD" desc="Stellaris LM4F232H5QD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420128103160">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F232H5QD</tag>
					<tag>Stellaris Cortex LM4F23x</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420128103160"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4F232H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420128103160"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4F232H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420128103160"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4F232H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420128289617">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4F232H5QD</tag>
					<tag>Stellaris Cortex LM4F23x</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420128289617"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4F232H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420128289617"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4F232H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420128289617"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4F232H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420128289617"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4F232H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420128289617"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4F232H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420128289617"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4F232H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420128289617"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4F232H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420128289617"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4F232H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420128289617"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4F232H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420128289617"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4F232H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420128289617"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4F232H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420128289617"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4F232H5QD"/>
							<attribute key="device.variant" value="Cortex M.LM4F232H5QD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>
	<contents name="Stellaris Cortex LM4FSxx" desc="Stellaris Cortex LM4FSxx" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="Stellaris LM4FS11H5BB" desc="Stellaris LM4FS11H5BB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420130861525">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS11H5BB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420130861525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS11H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS11H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420130861525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS11H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS11H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420130861525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS11H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS11H5BB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420131078773">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS11H5BB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420131078773"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS11H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS11H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420131078773"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS11H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS11H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420131078773"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS11H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS11H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420131078773"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS11H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS11H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420131078773"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS11H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS11H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420131078773"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS11H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS11H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420131078773"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS11H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS11H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420131078773"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS11H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS11H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420131078773"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS11H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS11H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420131078773"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS11H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS11H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420131078773"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS11H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS11H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420131078773"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS11H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS11H5BB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS1GE5BB" desc="Stellaris LM4FS1GE5BB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420131970858">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS1GE5BB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420131970858"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS1GE5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GE5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420131970858"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS1GE5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GE5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420131970858"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS1GE5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GE5BB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420132171000">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS1GE5BB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420132171000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS1GE5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GE5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420132171000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS1GE5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GE5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420132171000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS1GE5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GE5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420132171000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS1GE5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GE5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420132171000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS1GE5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GE5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420132171000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS1GE5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GE5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420132171000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS1GE5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GE5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420132171000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS1GE5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GE5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420132171000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS1GE5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GE5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420132171000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS1GE5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GE5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420132171000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS1GE5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GE5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420132171000"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS1GE5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GE5BB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS1GH5BB" desc="Stellaris LM4FS1GH5BB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420133036570">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS1GH5BB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420133036570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS1GH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420133036570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS1GH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420133036570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS1GH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GH5BB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420133224737">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS1GH5BB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420133224737"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS1GH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420133224737"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS1GH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420133224737"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS1GH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420133224737"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS1GH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420133224737"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS1GH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420133224737"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS1GH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420133224737"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS1GH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420133224737"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS1GH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420133224737"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS1GH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420133224737"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS1GH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420133224737"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS1GH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420133224737"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS1GH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS1GH5BB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS200MPDT" desc="Stellaris LM4FS200MPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420134201070">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS200MPDT</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420134201070"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS200MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420134201070"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS200MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420134201070"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS200MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420134392659">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS200MPDT</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420134392659"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS200MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420134392659"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS200MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420134392659"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS200MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420134392659"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS200MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420134392659"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS200MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420134392659"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS200MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420134392659"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS200MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420134392659"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS200MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420134392659"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS200MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420134392659"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS200MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420134392659"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS200MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420134392659"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS200MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS200MZRB" desc="Stellaris LM4FS200MZRB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420135147040">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS200MZRB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420135147040"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS200MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420135147040"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS200MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420135147040"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS200MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MZRB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420135265927">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS200MZRB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420135265927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS200MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420135265927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS200MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420135265927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS200MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420135265927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS200MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420135265927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS200MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420135265927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS200MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420135265927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS200MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420135265927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS200MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420135265927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS200MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420135265927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS200MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420135265927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS200MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420135265927"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS200MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS200MZRB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS210MPDT" desc="Stellaris LM4FS210MPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420135821877">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS210MPDT</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420135821877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420135821877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420135821877"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420135930501">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS210MPDT</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420135930501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420135930501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420135930501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420135930501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420135930501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420135930501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420135930501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420135930501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420135930501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420135930501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420135930501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420135930501"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS210MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS210MZRB" desc="Stellaris LM4FS210MZRB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420138771830">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS210MZRB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420138771830"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420138771830"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420138771830"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MZRB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420138906969">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS210MZRB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420138906969"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420138906969"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420138906969"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420138906969"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420138906969"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420138906969"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420138906969"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420138906969"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420138906969"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420138906969"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420138906969"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420138906969"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS210MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS210MZRB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS230MPDT" desc="Stellaris LM4FS230MPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420139415449">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS230MPDT</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420139415449"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420139415449"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420139415449"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420139518085">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS230MPDT</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420139518085"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420139518085"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420139518085"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420139518085"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420139518085"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420139518085"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420139518085"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420139518085"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420139518085"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420139518085"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420139518085"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420139518085"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS230MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS230MZRB" desc="Stellaris LM4FS230MZRB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420140037257">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS230MZRB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420140037257"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420140037257"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420140037257"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MZRB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420140139894">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS230MZRB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420140139894"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420140139894"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420140139894"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420140139894"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420140139894"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420140139894"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420140139894"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420140139894"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420140139894"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420140139894"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420140139894"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420140139894"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS230MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS230MZRB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS250MPDT" desc="Stellaris LM4FS250MPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420140600476">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS250MPDT</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420140600476"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS250MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420140600476"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS250MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420140600476"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS250MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420140702258">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS250MPDT</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420140702258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS250MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420140702258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS250MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420140702258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS250MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420140702258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS250MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420140702258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS250MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420140702258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS250MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420140702258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS250MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420140702258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS250MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420140702258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS250MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420140702258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS250MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420140702258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS250MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420140702258"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS250MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS250MZRB" desc="Stellaris LM4FS250MZRB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420141160702">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS250MZRB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420141160702"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS250MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420141160702"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS250MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420141160702"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS250MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MZRB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420141262484">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS250MZRB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420141262484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS250MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420141262484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS250MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420141262484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS250MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420141262484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS250MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420141262484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS250MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420141262484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS250MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420141262484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS250MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420141262484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS250MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420141262484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS250MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420141262484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS250MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420141262484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS250MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420141262484"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS250MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS250MZRB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS270MPDT" desc="Stellaris LM4FS270MPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420141722639">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS270MPDT</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420141722639"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS270MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420141722639"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS270MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420141722639"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS270MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420141823993">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS270MPDT</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420141823993"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS270MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420141823993"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS270MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420141823993"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS270MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420141823993"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS270MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420141823993"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS270MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420141823993"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS270MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420141823993"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS270MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420141823993"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS270MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420141823993"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS270MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420141823993"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS270MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420141823993"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS270MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420141823993"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS270MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS270MZRB" desc="Stellaris LM4FS270MZRB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420142282010">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS270MZRB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420142282010"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS270MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420142282010"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS270MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420142282010"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS270MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MZRB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420142382936">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS270MZRB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420142382936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS270MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420142382936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS270MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420142382936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS270MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420142382936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS270MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420142382936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS270MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420142382936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS270MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420142382936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS270MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420142382936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS270MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420142382936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS270MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420142382936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS270MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420142382936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS270MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420142382936"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS270MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS270MZRB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS2H0MPDT" desc="Stellaris LM4FS2H0MPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420142840953">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS2H0MPDT</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420142840953"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS2H0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420142840953"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS2H0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420142840953"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS2H0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420142942307">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS2H0MPDT</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420142942307"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS2H0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420142942307"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS2H0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420142942307"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS2H0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420142942307"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS2H0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420142942307"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS2H0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420142942307"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS2H0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420142942307"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS2H0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420142942307"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS2H0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420142942307"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS2H0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420142942307"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS2H0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420142942307"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS2H0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420142942307"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS2H0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS2H0MZRB" desc="Stellaris LM4FS2H0MZRB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420143398613">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS2H0MZRB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420143398613"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS2H0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420143398613"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS2H0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420143398613"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS2H0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MZRB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420143499111">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS2H0MZRB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420143499111"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS2H0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420143499111"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS2H0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420143499111"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS2H0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420143499111"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS2H0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420143499111"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS2H0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420143499111"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS2H0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420143499111"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS2H0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420143499111"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS2H0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420143499111"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS2H0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420143499111"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS2H0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420143499111"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS2H0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420143499111"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS2H0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2H0MZRB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS2J0MPDT" desc="Stellaris LM4FS2J0MPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420143959694">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS2J0MPDT</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420143959694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS2J0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420143959694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS2J0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420143959694"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS2J0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420144060620">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS2J0MPDT</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420144060620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS2J0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420144060620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS2J0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420144060620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS2J0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420144060620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS2J0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420144060620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS2J0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420144060620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS2J0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420144060620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS2J0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420144060620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS2J0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420144060620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS2J0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420144060620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS2J0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420144060620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS2J0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420144060620"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS2J0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS2J0MZRB" desc="Stellaris LM4FS2J0MZRB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420146763390">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS2J0MZRB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420146763390"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS2J0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420146763390"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS2J0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420146763390"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS2J0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MZRB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420146925043">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS2J0MZRB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420146925043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS2J0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420146925043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS2J0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420146925043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS2J0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420146925043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS2J0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420146925043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS2J0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420146925043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS2J0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420146925043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS2J0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420146925043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS2J0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420146925043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS2J0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420146925043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS2J0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420146925043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS2J0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420146925043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS2J0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2J0MZRB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS2K0MPDT" desc="Stellaris LM4FS2K0MPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420147457899">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS2K0MPDT</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420147457899"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS2K0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420147457899"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS2K0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420147457899"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS2K0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420147562674">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS2K0MPDT</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420147562674"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS2K0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420147562674"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS2K0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420147562674"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS2K0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420147562674"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS2K0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420147562674"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS2K0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420147562674"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS2K0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420147562674"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS2K0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420147562674"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS2K0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420147562674"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS2K0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420147562674"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS2K0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420147562674"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS2K0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420147562674"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS2K0MPDT"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS2K0MZRB" desc="Stellaris LM4FS2K0MZRB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420148024540">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS2K0MZRB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420148024540"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS2K0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420148024540"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS2K0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420148024540"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS2K0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MZRB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420148126322">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS2K0MZRB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420148126322"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS2K0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420148126322"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS2K0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420148126322"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS2K0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420148126322"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS2K0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420148126322"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS2K0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420148126322"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS2K0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420148126322"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS2K0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420148126322"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS2K0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420148126322"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS2K0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420148126322"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS2K0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420148126322"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS2K0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420148126322"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS2K0MZRB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS2K0MZRB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FS99H5BB" desc="Stellaris LM4FS99H5BB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420148585621">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS99H5BB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420148585621"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FS99H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS99H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420148585621"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FS99H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS99H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420148585621"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FS99H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS99H5BB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420148685692">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FS99H5BB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420148685692"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FS99H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS99H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420148685692"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FS99H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS99H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420148685692"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FS99H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS99H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420148685692"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FS99H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS99H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420148685692"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FS99H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS99H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420148685692"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FS99H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS99H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420148685692"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FS99H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS99H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420148685692"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FS99H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS99H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420148685692"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FS99H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS99H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420148685692"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FS99H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS99H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420148685692"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FS99H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS99H5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420148685692"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FS99H5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FS99H5BB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Stellaris LM4FSXLH5BB" desc="Stellaris LM4FSXLH5BB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420149136439">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FSXLH5BB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420149136439"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_StellarisLM4FSXLH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FSXLH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420149136439"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_StellarisLM4FSXLH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FSXLH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420149136439"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_StellarisLM4FSXLH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FSXLH5BB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420149236938">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Stellaris LM4FSXLH5BB</tag>
					<tag>Stellaris Cortex LM4FSxx</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420149236938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_StellarisLM4FSXLH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FSXLH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420149236938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_StellarisLM4FSXLH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FSXLH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420149236938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_StellarisLM4FSXLH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FSXLH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420149236938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_StellarisLM4FSXLH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FSXLH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420149236938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_StellarisLM4FSXLH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FSXLH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420149236938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_StellarisLM4FSXLH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FSXLH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420149236938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_StellarisLM4FSXLH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FSXLH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420149236938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_StellarisLM4FSXLH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FSXLH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420149236938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_StellarisLM4FSXLH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FSXLH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420149236938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_StellarisLM4FSXLH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FSXLH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420149236938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_StellarisLM4FSXLH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FSXLH5BB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420149236938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_StellarisLM4FSXLH5BB"/>
							<attribute key="device.variant" value="Cortex M.LM4FSXLH5BB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>
	<contents name="Tiva C Series" desc="Tiva C Series" icon="plugin://icons/obj16/targetFamily.png">
		<contents name="Tiva SC4C1290KCPDT" desc="Tiva SC4C1290KCPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420152343412">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva SC4C1290KCPDT</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<filter.ref ref.id="filter_1721420152343412"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaSC4C1290KCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1290KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<filter.ref ref.id="filter_1721420152343412"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaSC4C1290KCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1290KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<filter.ref ref.id="filter_1721420152343412"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaSC4C1290KCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1290KCPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420152484538">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva SC4C1290KCPDT</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<filter.ref ref.id="filter_1721420152484538"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaSC4C1290KCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1290KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<filter.ref ref.id="filter_1721420152484538"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaSC4C1290KCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1290KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<filter.ref ref.id="filter_1721420152484538"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaSC4C1290KCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1290KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<filter.ref ref.id="filter_1721420152484538"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaSC4C1290KCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1290KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<filter.ref ref.id="filter_1721420152484538"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaSC4C1290KCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1290KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<filter.ref ref.id="filter_1721420152484538"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaSC4C1290KCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1290KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<filter.ref ref.id="filter_1721420152484538"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaSC4C1290KCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1290KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<filter.ref ref.id="filter_1721420152484538"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaSC4C1290KCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1290KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<filter.ref ref.id="filter_1721420152484538"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaSC4C1290KCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1290KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<filter.ref ref.id="filter_1721420152484538"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaSC4C1290KCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1290KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<filter.ref ref.id="filter_1721420152484538"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaSC4C1290KCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1290KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<filter.ref ref.id="filter_1721420152484538"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaSC4C1290KCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1290KCPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva SC4C1294NCPDT" desc="Tiva SC4C1294NCPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420153026375">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva SC4C1294NCPDT</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<filter.ref ref.id="filter_1721420153026375"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaSC4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<filter.ref ref.id="filter_1721420153026375"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaSC4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<filter.ref ref.id="filter_1721420153026375"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaSC4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420153146118">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva SC4C1294NCPDT</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<filter.ref ref.id="filter_1721420153146118"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaSC4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<filter.ref ref.id="filter_1721420153146118"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaSC4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<filter.ref ref.id="filter_1721420153146118"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaSC4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<filter.ref ref.id="filter_1721420153146118"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaSC4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<filter.ref ref.id="filter_1721420153146118"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaSC4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<filter.ref ref.id="filter_1721420153146118"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaSC4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<filter.ref ref.id="filter_1721420153146118"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaSC4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<filter.ref ref.id="filter_1721420153146118"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaSC4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<filter.ref ref.id="filter_1721420153146118"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaSC4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<filter.ref ref.id="filter_1721420153146118"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaSC4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<filter.ref ref.id="filter_1721420153146118"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaSC4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<filter.ref ref.id="filter_1721420153146118"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaSC4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva SC4CA294NCPDT" desc="Tiva SC4CA294NCPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420153667855">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva SC4CA294NCPDT</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<filter.ref ref.id="filter_1721420153667855"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaSC4CA294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4CA294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<filter.ref ref.id="filter_1721420153667855"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaSC4CA294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4CA294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<filter.ref ref.id="filter_1721420153667855"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaSC4CA294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4CA294NCPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420153787170">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva SC4CA294NCPDT</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<filter.ref ref.id="filter_1721420153787170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaSC4CA294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4CA294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<filter.ref ref.id="filter_1721420153787170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaSC4CA294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4CA294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<filter.ref ref.id="filter_1721420153787170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaSC4CA294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4CA294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<filter.ref ref.id="filter_1721420153787170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaSC4CA294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4CA294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<filter.ref ref.id="filter_1721420153787170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaSC4CA294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4CA294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<filter.ref ref.id="filter_1721420153787170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaSC4CA294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4CA294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<filter.ref ref.id="filter_1721420153787170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaSC4CA294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4CA294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<filter.ref ref.id="filter_1721420153787170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaSC4CA294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4CA294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<filter.ref ref.id="filter_1721420153787170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaSC4CA294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4CA294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<filter.ref ref.id="filter_1721420153787170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaSC4CA294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4CA294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<filter.ref ref.id="filter_1721420153787170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaSC4CA294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4CA294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<filter.ref ref.id="filter_1721420153787170"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaSC4CA294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.SC4CA294NCPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva SC4CB297NCZAD" desc="Tiva SC4CB297NCZAD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420154291801">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva SC4CB297NCZAD</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<filter.ref ref.id="filter_1721420154291801"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaSC4CB297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.SC4CB297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<filter.ref ref.id="filter_1721420154291801"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaSC4CB297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.SC4CB297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<filter.ref ref.id="filter_1721420154291801"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaSC4CB297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.SC4CB297NCZAD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420154410261">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva SC4CB297NCZAD</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<filter.ref ref.id="filter_1721420154410261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaSC4CB297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.SC4CB297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<filter.ref ref.id="filter_1721420154410261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaSC4CB297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.SC4CB297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<filter.ref ref.id="filter_1721420154410261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaSC4CB297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.SC4CB297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<filter.ref ref.id="filter_1721420154410261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaSC4CB297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.SC4CB297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<filter.ref ref.id="filter_1721420154410261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaSC4CB297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.SC4CB297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<filter.ref ref.id="filter_1721420154410261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaSC4CB297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.SC4CB297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<filter.ref ref.id="filter_1721420154410261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaSC4CB297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.SC4CB297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<filter.ref ref.id="filter_1721420154410261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaSC4CB297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.SC4CB297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<filter.ref ref.id="filter_1721420154410261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaSC4CB297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.SC4CB297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<filter.ref ref.id="filter_1721420154410261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaSC4CB297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.SC4CB297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<filter.ref ref.id="filter_1721420154410261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaSC4CB297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.SC4CB297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<filter.ref ref.id="filter_1721420154410261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaSC4CB297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.SC4CB297NCZAD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva SC4CC231E6PM" desc="Tiva SC4CC231E6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420156977465">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva SC4CC231E6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<filter.ref ref.id="filter_1721420156977465"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaSC4CC231E6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CC231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<filter.ref ref.id="filter_1721420156977465"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaSC4CC231E6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CC231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<filter.ref ref.id="filter_1721420156977465"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaSC4CC231E6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CC231E6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420157148954">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva SC4CC231E6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<filter.ref ref.id="filter_1721420157148954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaSC4CC231E6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CC231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<filter.ref ref.id="filter_1721420157148954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaSC4CC231E6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CC231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<filter.ref ref.id="filter_1721420157148954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaSC4CC231E6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CC231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<filter.ref ref.id="filter_1721420157148954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaSC4CC231E6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CC231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<filter.ref ref.id="filter_1721420157148954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaSC4CC231E6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CC231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<filter.ref ref.id="filter_1721420157148954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaSC4CC231E6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CC231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<filter.ref ref.id="filter_1721420157148954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaSC4CC231E6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CC231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<filter.ref ref.id="filter_1721420157148954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaSC4CC231E6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CC231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<filter.ref ref.id="filter_1721420157148954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaSC4CC231E6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CC231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<filter.ref ref.id="filter_1721420157148954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaSC4CC231E6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CC231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<filter.ref ref.id="filter_1721420157148954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaSC4CC231E6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CC231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<filter.ref ref.id="filter_1721420157148954"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaSC4CC231E6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CC231E6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva SC4CE290NCPZ" desc="Tiva SC4CE290NCPZ" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420157720299">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva SC4CE290NCPZ</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<filter.ref ref.id="filter_1721420157720299"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaSC4CE290NCPZ"/>
							<attribute key="device.variant" value="Cortex M.SC4CE290NCPZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<filter.ref ref.id="filter_1721420157720299"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaSC4CE290NCPZ"/>
							<attribute key="device.variant" value="Cortex M.SC4CE290NCPZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<filter.ref ref.id="filter_1721420157720299"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaSC4CE290NCPZ"/>
							<attribute key="device.variant" value="Cortex M.SC4CE290NCPZ"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420157840469">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva SC4CE290NCPZ</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<filter.ref ref.id="filter_1721420157840469"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaSC4CE290NCPZ"/>
							<attribute key="device.variant" value="Cortex M.SC4CE290NCPZ"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<filter.ref ref.id="filter_1721420157840469"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaSC4CE290NCPZ"/>
							<attribute key="device.variant" value="Cortex M.SC4CE290NCPZ"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<filter.ref ref.id="filter_1721420157840469"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaSC4CE290NCPZ"/>
							<attribute key="device.variant" value="Cortex M.SC4CE290NCPZ"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<filter.ref ref.id="filter_1721420157840469"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaSC4CE290NCPZ"/>
							<attribute key="device.variant" value="Cortex M.SC4CE290NCPZ"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<filter.ref ref.id="filter_1721420157840469"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaSC4CE290NCPZ"/>
							<attribute key="device.variant" value="Cortex M.SC4CE290NCPZ"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<filter.ref ref.id="filter_1721420157840469"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaSC4CE290NCPZ"/>
							<attribute key="device.variant" value="Cortex M.SC4CE290NCPZ"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<filter.ref ref.id="filter_1721420157840469"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaSC4CE290NCPZ"/>
							<attribute key="device.variant" value="Cortex M.SC4CE290NCPZ"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<filter.ref ref.id="filter_1721420157840469"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaSC4CE290NCPZ"/>
							<attribute key="device.variant" value="Cortex M.SC4CE290NCPZ"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<filter.ref ref.id="filter_1721420157840469"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaSC4CE290NCPZ"/>
							<attribute key="device.variant" value="Cortex M.SC4CE290NCPZ"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<filter.ref ref.id="filter_1721420157840469"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaSC4CE290NCPZ"/>
							<attribute key="device.variant" value="Cortex M.SC4CE290NCPZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<filter.ref ref.id="filter_1721420157840469"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaSC4CE290NCPZ"/>
							<attribute key="device.variant" value="Cortex M.SC4CE290NCPZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<filter.ref ref.id="filter_1721420157840469"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaSC4CE290NCPZ"/>
							<attribute key="device.variant" value="Cortex M.SC4CE290NCPZ"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva SC4CE93XH6PM" desc="Tiva SC4CE93XH6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420158363917">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva SC4CE93XH6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_0.projectspec">
					<filter.ref ref.id="filter_1721420158363917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaSC4CE93XH6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CE93XH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_1.projectspec">
					<filter.ref ref.id="filter_1721420158363917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaSC4CE93XH6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CE93XH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_2.projectspec">
					<filter.ref ref.id="filter_1721420158363917"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaSC4CE93XH6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CE93XH6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420158482805">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva SC4CE93XH6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_3.projectspec">
					<filter.ref ref.id="filter_1721420158482805"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaSC4CE93XH6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CE93XH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_4.projectspec">
					<filter.ref ref.id="filter_1721420158482805"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaSC4CE93XH6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CE93XH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_5.projectspec">
					<filter.ref ref.id="filter_1721420158482805"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaSC4CE93XH6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CE93XH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_6.projectspec">
					<filter.ref ref.id="filter_1721420158482805"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaSC4CE93XH6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CE93XH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_7.projectspec">
					<filter.ref ref.id="filter_1721420158482805"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaSC4CE93XH6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CE93XH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_8.projectspec">
					<filter.ref ref.id="filter_1721420158482805"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaSC4CE93XH6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CE93XH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_9.projectspec">
					<filter.ref ref.id="filter_1721420158482805"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaSC4CE93XH6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CE93XH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_12.projectspec">
					<filter.ref ref.id="filter_1721420158482805"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaSC4CE93XH6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CE93XH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_13.projectspec">
					<filter.ref ref.id="filter_1721420158482805"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaSC4CE93XH6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CE93XH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_14.projectspec">
					<filter.ref ref.id="filter_1721420158482805"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaSC4CE93XH6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CE93XH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_10.projectspec">
					<filter.ref ref.id="filter_1721420158482805"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaSC4CE93XH6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CE93XH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_11.projectspec">
					<filter.ref ref.id="filter_1721420158482805"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaSC4CE93XH6PM"/>
							<attribute key="device.variant" value="Cortex M.SC4CE93XH6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1230C3PM" desc="Tiva TM4C1230C3PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420159008391">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1230C3PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420159008391"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1230C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420159008391"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1230C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420159008391"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1230C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230C3PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420159120436">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1230C3PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420159120436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1230C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420159120436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1230C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420159120436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1230C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420159120436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1230C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420159120436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1230C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420159120436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1230C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420159120436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1230C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420159120436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1230C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420159120436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1230C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420159120436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1230C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420159120436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1230C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420159120436"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1230C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230C3PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1230D5PM" desc="Tiva TM4C1230D5PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420159649871">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1230D5PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420159649871"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1230D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420159649871"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1230D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420159649871"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1230D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230D5PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420159764055">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1230D5PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420159764055"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1230D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420159764055"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1230D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420159764055"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1230D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420159764055"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1230D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420159764055"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1230D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420159764055"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1230D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420159764055"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1230D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420159764055"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1230D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420159764055"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1230D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420159764055"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1230D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420159764055"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1230D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420159764055"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1230D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230D5PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1230E6PM" desc="Tiva TM4C1230E6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420160285792">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1230E6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420160285792"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1230E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420160285792"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1230E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420160285792"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1230E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230E6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420160396982">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1230E6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420160396982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1230E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420160396982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1230E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420160396982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1230E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420160396982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1230E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420160396982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1230E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420160396982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1230E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420160396982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1230E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420160396982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1230E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420160396982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1230E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420160396982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1230E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420160396982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1230E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420160396982"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1230E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230E6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1230H6PM" desc="Tiva TM4C1230H6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420160883651">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1230H6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420160883651"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1230H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420160883651"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1230H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420160883651"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1230H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230H6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420160993558">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1230H6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420160993558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1230H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420160993558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1230H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420160993558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1230H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420160993558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1230H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420160993558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1230H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420160993558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1230H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420160993558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1230H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420160993558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1230H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420160993558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1230H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420160993558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1230H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420160993558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1230H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420160993558"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1230H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1230H6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1231C3PM" desc="Tiva TM4C1231C3PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420162045586">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1231C3PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420162045586"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1231C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420162045586"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1231C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420162045586"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1231C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231C3PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420162263261">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1231C3PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420162263261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1231C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420162263261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1231C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420162263261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1231C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420162263261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1231C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420162263261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1231C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420162263261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1231C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420162263261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1231C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420162263261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1231C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420162263261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1231C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420162263261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1231C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420162263261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1231C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420162263261"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1231C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231C3PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1231D5PM" desc="Tiva TM4C1231D5PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420163129687">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1231D5PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420163129687"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1231D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420163129687"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1231D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420163129687"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1231D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420163343514">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1231D5PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420163343514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1231D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420163343514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1231D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420163343514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1231D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420163343514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1231D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420163343514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1231D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420163343514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1231D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420163343514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1231D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420163343514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1231D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420163343514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1231D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420163343514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1231D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420163343514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1231D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420163343514"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1231D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1231D5PZ" desc="Tiva TM4C1231D5PZ" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420164482783">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1231D5PZ</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420164482783"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1231D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420164482783"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1231D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420164482783"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1231D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PZ"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420164699175">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1231D5PZ</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420164699175"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1231D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420164699175"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1231D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420164699175"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1231D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420164699175"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1231D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420164699175"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1231D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420164699175"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1231D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420164699175"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1231D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420164699175"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1231D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420164699175"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1231D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420164699175"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1231D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420164699175"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1231D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420164699175"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1231D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231D5PZ"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1231E6PM" desc="Tiva TM4C1231E6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420165518559">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1231E6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420165518559"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1231E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420165518559"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1231E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420165518559"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1231E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420165735807">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1231E6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420165735807"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1231E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420165735807"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1231E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420165735807"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1231E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420165735807"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1231E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420165735807"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1231E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420165735807"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1231E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420165735807"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1231E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420165735807"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1231E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420165735807"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1231E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420165735807"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1231E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420165735807"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1231E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420165735807"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1231E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1231E6PZ" desc="Tiva TM4C1231E6PZ" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420169644132">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1231E6PZ</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420169644132"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1231E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420169644132"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1231E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420169644132"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1231E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PZ"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420169793811">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1231E6PZ</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420169793811"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1231E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420169793811"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1231E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420169793811"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1231E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420169793811"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1231E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420169793811"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1231E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420169793811"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1231E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420169793811"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1231E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420169793811"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1231E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420169793811"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1231E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420169793811"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1231E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420169793811"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1231E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420169793811"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1231E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231E6PZ"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1231H6PGE" desc="Tiva TM4C1231H6PGE" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420170292027">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1231H6PGE</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420170292027"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1231H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420170292027"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1231H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420170292027"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1231H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PGE"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420170403217">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1231H6PGE</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420170403217"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1231H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420170403217"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1231H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420170403217"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1231H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420170403217"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1231H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420170403217"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1231H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420170403217"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1231H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420170403217"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1231H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420170403217"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1231H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420170403217"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1231H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420170403217"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1231H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420170403217"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1231H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420170403217"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1231H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PGE"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1231H6PM" desc="Tiva TM4C1231H6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420171031012">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1231H6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420171031012"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1231H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420171031012"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1231H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420171031012"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1231H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420171150755">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1231H6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420171150755"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1231H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420171150755"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1231H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420171150755"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1231H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420171150755"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1231H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420171150755"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1231H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420171150755"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1231H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420171150755"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1231H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420171150755"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1231H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420171150755"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1231H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420171150755"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1231H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420171150755"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1231H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420171150755"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1231H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1231H6PZ" desc="Tiva TM4C1231H6PZ" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420171620319">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1231H6PZ</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420171620319"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1231H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420171620319"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1231H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420171620319"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1231H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PZ"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420171727660">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1231H6PZ</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420171727660"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1231H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420171727660"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1231H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420171727660"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1231H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420171727660"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1231H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420171727660"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1231H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420171727660"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1231H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420171727660"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1231H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420171727660"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1231H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420171727660"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1231H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420171727660"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1231H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420171727660"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1231H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420171727660"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1231H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1231H6PZ"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1232C3PM" desc="Tiva TM4C1232C3PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420172179262">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1232C3PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420172179262"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1232C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420172179262"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1232C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420172179262"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1232C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232C3PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420172284892">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1232C3PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420172284892"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1232C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420172284892"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1232C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420172284892"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1232C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420172284892"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1232C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420172284892"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1232C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420172284892"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1232C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420172284892"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1232C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420172284892"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1232C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420172284892"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1232C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420172284892"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1232C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420172284892"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1232C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420172284892"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1232C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232C3PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1232D5PM" desc="Tiva TM4C1232D5PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420172736922">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1232D5PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420172736922"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1232D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420172736922"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1232D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420172736922"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1232D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232D5PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420172844690">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1232D5PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420172844690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1232D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420172844690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1232D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420172844690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1232D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420172844690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1232D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420172844690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1232D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420172844690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1232D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420172844690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1232D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420172844690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1232D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420172844690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1232D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420172844690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1232D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420172844690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1232D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420172844690"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1232D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232D5PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1232E6PM" desc="Tiva TM4C1232E6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420173300569">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1232E6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420173300569"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1232E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420173300569"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1232E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420173300569"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1232E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232E6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420173422450">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1232E6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420173422450"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1232E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420173422450"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1232E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420173422450"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1232E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420173422450"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1232E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420173422450"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1232E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420173422450"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1232E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420173422450"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1232E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420173422450"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1232E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420173422450"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1232E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420173422450"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1232E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420173422450"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1232E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420173422450"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1232E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232E6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1232H6PM" desc="Tiva TM4C1232H6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420173906554">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1232H6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420173906554"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1232H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420173906554"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1232H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420173906554"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1232H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232H6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420174021593">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1232H6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420174021593"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1232H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420174021593"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1232H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420174021593"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1232H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420174021593"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1232H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420174021593"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1232H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420174021593"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1232H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420174021593"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1232H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420174021593"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1232H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420174021593"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1232H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420174021593"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1232H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420174021593"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1232H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420174021593"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1232H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1232H6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1233C3PM" desc="Tiva TM4C1233C3PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420174567706">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1233C3PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420174567706"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1233C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420174567706"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1233C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420174567706"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1233C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233C3PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420174713536">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1233C3PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420174713536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1233C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420174713536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1233C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420174713536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1233C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420174713536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1233C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420174713536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1233C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420174713536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1233C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420174713536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1233C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420174713536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1233C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420174713536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1233C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420174713536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1233C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420174713536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1233C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233C3PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420174713536"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1233C3PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233C3PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1233D5PM" desc="Tiva TM4C1233D5PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420175247247">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1233D5PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420175247247"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1233D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420175247247"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1233D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420175247247"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1233D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420175383669">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1233D5PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420175383669"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1233D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420175383669"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1233D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420175383669"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1233D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420175383669"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1233D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420175383669"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1233D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420175383669"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1233D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420175383669"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1233D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420175383669"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1233D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420175383669"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1233D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420175383669"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1233D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420175383669"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1233D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420175383669"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1233D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1233D5PZ" desc="Tiva TM4C1233D5PZ" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420175880174">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1233D5PZ</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420175880174"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1233D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420175880174"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1233D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420175880174"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1233D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PZ"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420175976397">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1233D5PZ</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420175976397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1233D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420175976397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1233D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420175976397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1233D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420175976397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1233D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420175976397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1233D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420175976397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1233D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420175976397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1233D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420175976397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1233D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420175976397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1233D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420175976397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1233D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420175976397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1233D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420175976397"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1233D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233D5PZ"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1233E6PM" desc="Tiva TM4C1233E6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420178931054">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1233E6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420178931054"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1233E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420178931054"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1233E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420178931054"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1233E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420179062344">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1233E6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420179062344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1233E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420179062344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1233E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420179062344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1233E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420179062344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1233E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420179062344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1233E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420179062344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1233E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420179062344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1233E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420179062344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1233E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420179062344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1233E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420179062344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1233E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420179062344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1233E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420179062344"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1233E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1233E6PZ" desc="Tiva TM4C1233E6PZ" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420179554145">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1233E6PZ</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420179554145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1233E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420179554145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1233E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420179554145"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1233E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PZ"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420179651223">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1233E6PZ</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420179651223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1233E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420179651223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1233E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420179651223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1233E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420179651223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1233E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420179651223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1233E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420179651223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1233E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420179651223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1233E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420179651223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1233E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420179651223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1233E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420179651223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1233E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420179651223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1233E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420179651223"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1233E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233E6PZ"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1233H6PGE" desc="Tiva TM4C1233H6PGE" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420180176381">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1233H6PGE</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420180176381"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1233H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420180176381"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1233H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420180176381"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1233H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PGE"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420180276452">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1233H6PGE</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420180276452"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1233H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420180276452"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1233H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420180276452"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1233H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420180276452"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1233H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420180276452"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1233H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420180276452"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1233H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420180276452"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1233H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420180276452"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1233H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420180276452"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1233H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420180276452"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1233H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420180276452"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1233H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420180276452"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1233H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PGE"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1233H6PM" desc="Tiva TM4C1233H6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420180805887">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1233H6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420180805887"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1233H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420180805887"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1233H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420180805887"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1233H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420180903819">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1233H6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420180903819"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1233H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420180903819"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1233H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420180903819"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1233H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420180903819"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1233H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420180903819"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1233H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420180903819"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1233H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420180903819"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1233H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420180903819"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1233H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420180903819"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1233H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420180903819"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1233H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420180903819"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1233H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420180903819"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1233H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1233H6PZ" desc="Tiva TM4C1233H6PZ" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420181402463">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1233H6PZ</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420181402463"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1233H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420181402463"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1233H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420181402463"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1233H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PZ"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420181520496">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1233H6PZ</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420181520496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1233H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420181520496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1233H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420181520496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1233H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420181520496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1233H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420181520496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1233H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420181520496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1233H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420181520496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1233H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420181520496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1233H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420181520496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1233H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420181520496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1233H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420181520496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1233H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420181520496"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1233H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1233H6PZ"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1236D5PM" desc="Tiva TM4C1236D5PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420182023416">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1236D5PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420182023416"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1236D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420182023416"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1236D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420182023416"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1236D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236D5PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420182119211">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1236D5PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420182119211"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1236D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420182119211"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1236D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420182119211"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1236D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420182119211"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1236D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420182119211"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1236D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420182119211"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1236D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420182119211"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1236D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420182119211"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1236D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420182119211"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1236D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420182119211"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1236D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420182119211"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1236D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420182119211"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1236D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236D5PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1236E6PM" desc="Tiva TM4C1236E6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420182521632">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1236E6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420182521632"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1236E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420182521632"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1236E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420182521632"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1236E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236E6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420182614861">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1236E6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420182614861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1236E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420182614861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1236E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420182614861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1236E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420182614861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1236E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420182614861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1236E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420182614861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1236E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420182614861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1236E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420182614861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1236E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420182614861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1236E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420182614861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1236E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420182614861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1236E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420182614861"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1236E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236E6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1236H6PM" desc="Tiva TM4C1236H6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420183245650">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1236H6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420183245650"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1236H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420183245650"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1236H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420183245650"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1236H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236H6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420183347859">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1236H6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420183347859"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1236H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420183347859"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1236H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420183347859"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1236H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420183347859"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1236H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420183347859"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1236H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420183347859"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1236H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420183347859"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1236H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420183347859"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1236H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420183347859"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1236H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420183347859"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1236H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420183347859"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1236H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420183347859"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1236H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1236H6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1237D5PM" desc="Tiva TM4C1237D5PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420183754557">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1237D5PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420183754557"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1237D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420183754557"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1237D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420183754557"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1237D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420183848213">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1237D5PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420183848213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1237D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420183848213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1237D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420183848213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1237D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420183848213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1237D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420183848213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1237D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420183848213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1237D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420183848213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1237D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420183848213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1237D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420183848213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1237D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420183848213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1237D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420183848213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1237D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420183848213"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1237D5PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1237D5PZ" desc="Tiva TM4C1237D5PZ" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420184247642">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1237D5PZ</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420184247642"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1237D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420184247642"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1237D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420184247642"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1237D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PZ"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420184345574">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1237D5PZ</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420184345574"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1237D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420184345574"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1237D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420184345574"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1237D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420184345574"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1237D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420184345574"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1237D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420184345574"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1237D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420184345574"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1237D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420184345574"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1237D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420184345574"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1237D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420184345574"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1237D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420184345574"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1237D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420184345574"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1237D5PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237D5PZ"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1237E6PM" desc="Tiva TM4C1237E6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420188279986">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1237E6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420188279986"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1237E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420188279986"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1237E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420188279986"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1237E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420188406999">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1237E6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420188406999"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1237E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420188406999"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1237E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420188406999"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1237E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420188406999"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1237E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420188406999"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1237E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420188406999"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1237E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420188406999"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1237E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420188406999"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1237E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420188406999"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1237E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420188406999"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1237E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420188406999"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1237E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420188406999"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1237E6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1237E6PZ" desc="Tiva TM4C1237E6PZ" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420188918045">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1237E6PZ</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420188918045"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1237E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420188918045"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1237E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420188918045"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1237E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PZ"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420189034367">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1237E6PZ</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420189034367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1237E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420189034367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1237E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420189034367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1237E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420189034367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1237E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420189034367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1237E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420189034367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1237E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420189034367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1237E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420189034367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1237E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420189034367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1237E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420189034367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1237E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420189034367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1237E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420189034367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1237E6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237E6PZ"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1237H6PGE" desc="Tiva TM4C1237H6PGE" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420189525313">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1237H6PGE</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420189525313"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1237H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420189525313"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1237H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420189525313"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1237H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PGE"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420189621535">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1237H6PGE</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420189621535"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1237H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420189621535"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1237H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420189621535"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1237H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420189621535"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1237H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420189621535"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1237H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420189621535"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1237H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420189621535"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1237H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420189621535"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1237H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420189621535"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1237H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420189621535"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1237H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420189621535"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1237H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420189621535"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1237H6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PGE"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1237H6PM" desc="Tiva TM4C1237H6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420190029088">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1237H6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420190029088"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1237H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420190029088"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1237H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420190029088"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1237H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420190122317">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1237H6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420190122317"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1237H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420190122317"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1237H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420190122317"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1237H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420190122317"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1237H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420190122317"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1237H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420190122317"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1237H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420190122317"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1237H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420190122317"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1237H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420190122317"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1237H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420190122317"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1237H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420190122317"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1237H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420190122317"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1237H6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1237H6PZ" desc="Tiva TM4C1237H6PZ" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420190523884">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1237H6PZ</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420190523884"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1237H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420190523884"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1237H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420190523884"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1237H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PZ"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420190617540">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1237H6PZ</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420190617540"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1237H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420190617540"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1237H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420190617540"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1237H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420190617540"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1237H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420190617540"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1237H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420190617540"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1237H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420190617540"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1237H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420190617540"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1237H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420190617540"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1237H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420190617540"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1237H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420190617540"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1237H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420190617540"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1237H6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C1237H6PZ"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123AE6PM" desc="Tiva TM4C123AE6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420191016968">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123AE6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420191016968"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123AE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420191016968"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123AE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420191016968"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123AE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AE6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420191110197">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123AE6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420191110197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123AE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420191110197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123AE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420191110197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123AE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420191110197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123AE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420191110197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123AE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420191110197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123AE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420191110197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123AE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420191110197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123AE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420191110197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123AE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420191110197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123AE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420191110197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123AE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420191110197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123AE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AE6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123AH6PM" desc="Tiva TM4C123AH6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420191509625">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123AH6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420191509625"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123AH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420191509625"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123AH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420191509625"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123AH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AH6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420191602853">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123AH6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420191602853"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123AH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420191602853"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123AH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420191602853"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123AH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420191602853"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123AH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420191602853"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123AH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420191602853"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123AH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420191602853"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123AH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420191602853"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123AH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420191602853"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123AH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420191602853"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123AH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420191602853"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123AH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420191602853"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123AH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123AH6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123BE6PM" desc="Tiva TM4C123BE6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420192003137">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123BE6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420192003137"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123BE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420192003137"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123BE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420192003137"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123BE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420192095938">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123BE6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420192095938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123BE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420192095938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123BE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420192095938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123BE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420192095938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123BE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420192095938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123BE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420192095938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123BE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420192095938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123BE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420192095938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123BE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420192095938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123BE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420192095938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123BE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420192095938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123BE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420192095938"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123BE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123BE6PZ" desc="Tiva TM4C123BE6PZ" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420192494511">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123BE6PZ</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420192494511"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123BE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420192494511"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123BE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420192494511"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123BE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PZ"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420192587739">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123BE6PZ</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420192587739"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123BE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420192587739"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123BE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420192587739"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123BE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420192587739"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123BE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420192587739"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123BE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420192587739"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123BE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420192587739"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123BE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420192587739"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123BE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420192587739"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123BE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420192587739"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123BE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420192587739"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123BE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420192587739"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123BE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BE6PZ"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123BH6PGE" desc="Tiva TM4C123BH6PGE" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420193036775">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123BH6PGE</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420193036775"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123BH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420193036775"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123BH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420193036775"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123BH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PGE"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420193132570">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123BH6PGE</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420193132570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123BH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420193132570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123BH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420193132570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123BH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420193132570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123BH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420193132570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123BH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420193132570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123BH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420193132570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123BH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420193132570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123BH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420193132570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123BH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420193132570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123BH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420193132570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123BH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420193132570"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123BH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PGE"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123BH6PM" desc="Tiva TM4C123BH6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420193539268">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123BH6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420193539268"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123BH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420193539268"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123BH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420193539268"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123BH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420193632069">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123BH6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420193632069"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123BH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420193632069"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123BH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420193632069"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123BH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420193632069"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123BH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420193632069"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123BH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420193632069"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123BH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420193632069"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123BH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420193632069"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123BH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420193632069"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123BH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420193632069"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123BH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420193632069"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123BH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420193632069"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123BH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123BH6PZ" desc="Tiva TM4C123BH6PZ" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420194033635">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123BH6PZ</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420194033635"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123BH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420194033635"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123BH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420194033635"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123BH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PZ"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420194131140">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123BH6PZ</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420194131140"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123BH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420194131140"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123BH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420194131140"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123BH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420194131140"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123BH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420194131140"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123BH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420194131140"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123BH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420194131140"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123BH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420194131140"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123BH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420194131140"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123BH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420194131140"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123BH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420194131140"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123BH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420194131140"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123BH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6PZ"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123BH6ZRB" desc="Tiva TM4C123BH6ZRB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420197244885">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123BH6ZRB</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420197244885"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123BH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420197244885"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123BH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420197244885"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123BH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6ZRB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420197377458">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123BH6ZRB</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420197377458"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123BH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420197377458"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123BH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420197377458"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123BH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420197377458"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123BH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420197377458"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123BH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420197377458"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123BH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420197377458"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123BH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420197377458"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123BH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420197377458"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123BH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420197377458"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123BH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420197377458"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123BH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420197377458"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123BH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123BH6ZRB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123FE6PM" desc="Tiva TM4C123FE6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420197880378">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123FE6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420197880378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123FE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420197880378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123FE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420197880378"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123FE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FE6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420197983015">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123FE6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420197983015"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123FE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420197983015"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123FE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420197983015"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123FE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420197983015"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123FE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420197983015"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123FE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420197983015"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123FE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420197983015"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123FE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420197983015"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123FE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420197983015"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123FE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420197983015"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123FE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420197983015"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123FE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420197983015"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123FE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FE6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123FH6PM" desc="Tiva TM4C123FH6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420198415800">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123FH6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420198415800"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123FH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420198415800"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123FH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420198415800"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123FH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FH6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420198516726">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123FH6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420198516726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123FH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420198516726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123FH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420198516726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123FH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420198516726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123FH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420198516726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123FH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420198516726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123FH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420198516726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123FH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420198516726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123FH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420198516726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123FH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420198516726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123FH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420198516726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123FH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420198516726"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123FH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123FH6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123GE6PM" desc="Tiva TM4C123GE6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420198934116">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123GE6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420198934116"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123GE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420198934116"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123GE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420198934116"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123GE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420199026062">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123GE6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420199026062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123GE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420199026062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123GE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420199026062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123GE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420199026062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123GE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420199026062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123GE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420199026062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123GE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420199026062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123GE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420199026062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123GE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420199026062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123GE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420199026062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123GE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420199026062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123GE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420199026062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123GE6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123GE6PZ" desc="Tiva TM4C123GE6PZ" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420199425062">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123GE6PZ</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420199425062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123GE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420199425062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123GE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420199425062"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123GE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PZ"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420199518718">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123GE6PZ</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420199518718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123GE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420199518718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123GE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420199518718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123GE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420199518718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123GE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420199518718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123GE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420199518718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123GE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420199518718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123GE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420199518718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123GE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420199518718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123GE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420199518718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123GE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420199518718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123GE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420199518718"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123GE6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GE6PZ"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123GH6PGE" desc="Tiva TM4C123GH6PGE" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420199915153">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123GH6PGE</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420199915153"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123GH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420199915153"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123GH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420199915153"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123GH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PGE"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420200010520">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123GH6PGE</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420200010520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123GH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420200010520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123GH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420200010520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123GH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420200010520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123GH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420200010520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123GH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420200010520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123GH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420200010520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123GH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420200010520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123GH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420200010520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123GH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420200010520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123GH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420200010520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123GH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PGE"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420200010520"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123GH6PGE"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PGE"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123GH6PM" desc="Tiva TM4C123GH6PM" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420200417218">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123GH6PM</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420200417218"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123GH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420200417218"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123GH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420200417218"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123GH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PM"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420200510874">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123GH6PM</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420200510874"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123GH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420200510874"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123GH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420200510874"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123GH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420200510874"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123GH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420200510874"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123GH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420200510874"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123GH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420200510874"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123GH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420200510874"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123GH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420200510874"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123GH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420200510874"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123GH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420200510874"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123GH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PM"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420200510874"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123GH6PM"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PM"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123GH6PZ" desc="Tiva TM4C123GH6PZ" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420200909447">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123GH6PZ</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420200909447"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123GH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420200909447"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123GH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420200909447"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123GH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PZ"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420201003104">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123GH6PZ</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420201003104"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123GH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420201003104"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123GH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420201003104"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123GH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420201003104"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123GH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420201003104"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123GH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420201003104"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123GH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420201003104"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123GH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420201003104"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123GH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420201003104"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123GH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420201003104"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123GH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420201003104"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123GH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PZ"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420201003104"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123GH6PZ"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6PZ"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123GH6ZRB" desc="Tiva TM4C123GH6ZRB" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420201402532">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123GH6ZRB</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420201402532"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123GH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420201402532"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123GH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420201402532"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123GH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZRB"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420201497043">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123GH6ZRB</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420201497043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123GH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420201497043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123GH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420201497043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123GH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420201497043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123GH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420201497043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123GH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420201497043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123GH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420201497043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123GH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420201497043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123GH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420201497043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123GH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420201497043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123GH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420201497043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123GH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZRB"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420201497043"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123GH6ZRB"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZRB"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C123GH6ZXR" desc="Tiva TM4C123GH6ZXR" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420201902031">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123GH6ZXR</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420201902031"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C123GH6ZXR"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZXR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420201902031"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C123GH6ZXR"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZXR"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420201902031"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C123GH6ZXR"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZXR"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420201996115">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C123GH6ZXR</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420201996115"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C123GH6ZXR"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZXR"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420201996115"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C123GH6ZXR"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZXR"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420201996115"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C123GH6ZXR"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZXR"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420201996115"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C123GH6ZXR"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZXR"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420201996115"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C123GH6ZXR"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZXR"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420201996115"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C123GH6ZXR"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZXR"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420201996115"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C123GH6ZXR"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZXR"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420201996115"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C123GH6ZXR"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZXR"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420201996115"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C123GH6ZXR"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZXR"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420201996115"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C123GH6ZXR"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZXR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420201996115"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C123GH6ZXR"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZXR"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420201996115"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C123GH6ZXR"/>
							<attribute key="device.variant" value="Cortex M.TM4C123GH6ZXR"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1290NCPDT" desc="Tiva TM4C1290NCPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420202533675">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1290NCPDT</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420202533675"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1290NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420202533675"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1290NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420202533675"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1290NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420202651708">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1290NCPDT</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420202651708"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1290NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420202651708"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1290NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420202651708"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1290NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420202651708"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1290NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420202651708"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1290NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420202651708"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1290NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420202651708"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1290NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420202651708"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1290NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420202651708"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1290NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420202651708"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1290NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420202651708"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1290NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420202651708"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1290NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1290NCZAD" desc="Tiva TM4C1290NCZAD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420203089197">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1290NCZAD</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420203089197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1290NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420203089197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1290NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420203089197"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1290NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCZAD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420203185419">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1290NCZAD</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420203185419"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1290NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420203185419"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1290NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420203185419"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1290NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420203185419"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1290NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420203185419"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1290NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420203185419"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1290NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420203185419"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1290NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420203185419"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1290NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420203185419"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1290NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420203185419"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1290NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420203185419"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1290NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420203185419"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1290NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1290NCZAD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1292NCPDT" desc="Tiva TM4C1292NCPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420206385550">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1292NCPDT</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420206385550"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1292NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420206385550"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1292NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420206385550"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1292NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420206522399">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1292NCPDT</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420206522399"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1292NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420206522399"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1292NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420206522399"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1292NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420206522399"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1292NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420206522399"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1292NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420206522399"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1292NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420206522399"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1292NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420206522399"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1292NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420206522399"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1292NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420206522399"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1292NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420206522399"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1292NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420206522399"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1292NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1292NCZAD" desc="Tiva TM4C1292NCZAD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420207022753">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1292NCZAD</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420207022753"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1292NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420207022753"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1292NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420207022753"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1292NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCZAD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420207124107">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1292NCZAD</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420207124107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1292NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420207124107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1292NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420207124107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1292NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420207124107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1292NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420207124107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1292NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420207124107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1292NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420207124107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1292NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420207124107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1292NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420207124107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1292NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420207124107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1292NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420207124107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1292NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420207124107"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1292NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1292NCZAD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1294KCPDT" desc="Tiva TM4C1294KCPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420207547912">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1294KCPDT</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420207547912"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1294KCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420207547912"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1294KCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420207547912"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1294KCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294KCPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420207647555">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1294KCPDT</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420207647555"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1294KCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420207647555"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1294KCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420207647555"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1294KCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420207647555"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1294KCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420207647555"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1294KCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420207647555"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1294KCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420207647555"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1294KCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420207647555"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1294KCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420207647555"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1294KCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420207647555"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1294KCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420207647555"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1294KCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294KCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420207647555"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1294KCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294KCPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1294NCPDT" desc="Tiva TM4C1294NCPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420208069221">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1294NCPDT</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420208069221"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420208069221"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420208069221"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420208165016">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1294NCPDT</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420208165016"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420208165016"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420208165016"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420208165016"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420208165016"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420208165016"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420208165016"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420208165016"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420208165016"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420208165016"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420208165016"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420208165016"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1294NCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1294NCZAD" desc="Tiva TM4C1294NCZAD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420208743203">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1294NCZAD</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420208743203"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1294NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420208743203"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1294NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420208743203"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1294NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCZAD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420208903573">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1294NCZAD</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420208903573"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1294NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420208903573"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1294NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420208903573"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1294NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420208903573"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1294NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420208903573"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1294NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420208903573"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1294NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420208903573"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1294NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420208903573"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1294NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420208903573"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1294NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420208903573"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1294NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420208903573"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1294NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420208903573"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1294NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1294NCZAD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1297NCZAD" desc="Tiva TM4C1297NCZAD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420210283183">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1297NCZAD</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420210283183"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420210283183"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420210283183"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1297NCZAD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420210432862">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1297NCZAD</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420210432862"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420210432862"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420210432862"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420210432862"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420210432862"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420210432862"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420210432862"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420210432862"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420210432862"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420210432862"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420210432862"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1297NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420210432862"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1297NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1297NCZAD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1299KCZAD" desc="Tiva TM4C1299KCZAD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420210966146">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1299KCZAD</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420210966146"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1299KCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299KCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420210966146"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1299KCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299KCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420210966146"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1299KCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299KCZAD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420211078619">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1299KCZAD</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420211078619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1299KCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299KCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420211078619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1299KCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299KCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420211078619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1299KCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299KCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420211078619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1299KCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299KCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420211078619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1299KCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299KCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420211078619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1299KCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299KCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420211078619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1299KCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299KCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420211078619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1299KCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299KCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420211078619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1299KCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299KCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420211078619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1299KCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299KCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420211078619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1299KCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299KCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420211078619"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1299KCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299KCZAD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C1299NCZAD" desc="Tiva TM4C1299NCZAD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420215691289">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1299NCZAD</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420215691289"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C1299NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420215691289"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C1299NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420215691289"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C1299NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299NCZAD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420215879029">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C1299NCZAD</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420215879029"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C1299NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420215879029"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C1299NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420215879029"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C1299NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420215879029"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C1299NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420215879029"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C1299NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420215879029"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C1299NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420215879029"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C1299NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420215879029"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C1299NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420215879029"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C1299NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420215879029"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C1299NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420215879029"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C1299NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299NCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420215879029"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C1299NCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C1299NCZAD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C129CNCPDT" desc="Tiva TM4C129CNCPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420216742033">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129CNCPDT</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420216742033"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C129CNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420216742033"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C129CNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420216742033"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C129CNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420216942603">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129CNCPDT</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420216942603"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C129CNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420216942603"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C129CNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420216942603"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C129CNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420216942603"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C129CNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420216942603"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C129CNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420216942603"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C129CNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420216942603"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C129CNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420216942603"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C129CNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420216942603"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C129CNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420216942603"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C129CNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420216942603"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C129CNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420216942603"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C129CNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C129CNCZAD" desc="Tiva TM4C129CNCZAD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420217679022">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129CNCZAD</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420217679022"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C129CNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420217679022"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C129CNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420217679022"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C129CNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCZAD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420217885578">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129CNCZAD</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420217885578"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C129CNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420217885578"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C129CNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420217885578"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C129CNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420217885578"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C129CNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420217885578"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C129CNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420217885578"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C129CNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420217885578"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C129CNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420217885578"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C129CNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420217885578"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C129CNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420217885578"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C129CNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420217885578"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C129CNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420217885578"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C129CNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129CNCZAD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C129DNCPDT" desc="Tiva TM4C129DNCPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420218741313">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129DNCPDT</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420218741313"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C129DNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420218741313"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C129DNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420218741313"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C129DNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420218964548">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129DNCPDT</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420218964548"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C129DNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420218964548"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C129DNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420218964548"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C129DNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420218964548"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C129DNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420218964548"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C129DNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420218964548"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C129DNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420218964548"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C129DNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420218964548"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C129DNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420218964548"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C129DNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420218964548"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C129DNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420218964548"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C129DNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420218964548"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C129DNCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C129DNCZAD" desc="Tiva TM4C129DNCZAD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420219801466">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129DNCZAD</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420219801466"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C129DNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420219801466"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C129DNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420219801466"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C129DNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCZAD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420219996903">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129DNCZAD</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420219996903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C129DNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420219996903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C129DNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420219996903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C129DNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420219996903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C129DNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420219996903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C129DNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420219996903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C129DNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420219996903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C129DNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420219996903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C129DNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420219996903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C129DNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420219996903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C129DNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420219996903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C129DNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420219996903"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C129DNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129DNCZAD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C129EKCPDT" desc="Tiva TM4C129EKCPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420220646937">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129EKCPDT</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420220646937"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C129EKCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129EKCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420220646937"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C129EKCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129EKCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420220646937"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C129EKCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129EKCPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420220795760">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129EKCPDT</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420220795760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C129EKCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129EKCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420220795760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C129EKCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129EKCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420220795760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C129EKCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129EKCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420220795760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C129EKCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129EKCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420220795760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C129EKCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129EKCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420220795760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C129EKCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129EKCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420220795760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C129EKCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129EKCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420220795760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C129EKCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129EKCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420220795760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C129EKCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129EKCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420220795760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C129EKCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129EKCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420220795760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C129EKCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129EKCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420220795760"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C129EKCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129EKCPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C129ENCPDT" desc="Tiva TM4C129ENCPDT" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420221416285">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129ENCPDT</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420221416285"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C129ENCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420221416285"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C129ENCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420221416285"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C129ENCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCPDT"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420221533462">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129ENCPDT</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420221533462"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C129ENCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420221533462"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C129ENCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420221533462"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C129ENCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420221533462"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C129ENCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420221533462"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C129ENCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420221533462"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C129ENCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420221533462"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C129ENCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420221533462"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C129ENCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420221533462"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C129ENCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420221533462"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C129ENCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420221533462"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C129ENCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCPDT"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420221533462"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C129ENCPDT"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCPDT"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C129ENCZAD" desc="Tiva TM4C129ENCZAD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420222001315">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129ENCZAD</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420222001315"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C129ENCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420222001315"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C129ENCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420222001315"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C129ENCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCZAD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420222110367">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129ENCZAD</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420222110367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C129ENCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420222110367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C129ENCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420222110367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C129ENCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420222110367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C129ENCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420222110367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C129ENCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420222110367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C129ENCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420222110367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C129ENCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420222110367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C129ENCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420222110367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C129ENCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420222110367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C129ENCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420222110367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C129ENCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420222110367"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C129ENCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129ENCZAD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C129LNCZAD" desc="Tiva TM4C129LNCZAD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420222569666">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129LNCZAD</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420222569666"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C129LNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129LNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420222569666"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C129LNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129LNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420222569666"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C129LNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129LNCZAD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420222677435">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129LNCZAD</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420222677435"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C129LNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129LNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420222677435"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C129LNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129LNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420222677435"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C129LNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129LNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420222677435"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C129LNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129LNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420222677435"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C129LNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129LNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420222677435"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C129LNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129LNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420222677435"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C129LNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129LNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420222677435"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C129LNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129LNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420222677435"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C129LNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129LNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420222677435"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C129LNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129LNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420222677435"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C129LNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129LNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420222677435"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C129LNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129LNCZAD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C129XKCZAD" desc="Tiva TM4C129XKCZAD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420223173085">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129XKCZAD</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420223173085"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C129XKCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XKCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420223173085"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C129XKCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XKCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420223173085"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C129XKCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XKCZAD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420223295394">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129XKCZAD</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420223295394"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C129XKCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XKCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420223295394"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C129XKCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XKCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420223295394"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C129XKCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XKCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420223295394"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C129XKCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XKCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420223295394"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C129XKCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XKCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420223295394"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C129XKCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XKCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420223295394"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C129XKCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XKCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420223295394"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C129XKCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XKCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420223295394"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C129XKCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XKCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420223295394"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C129XKCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XKCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420223295394"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C129XKCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XKCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420223295394"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C129XKCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XKCZAD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
		<contents name="Tiva TM4C129XNCZAD" desc="Tiva TM4C129XNCZAD" icon="plugin://icons/obj16/target.png">
				<filter id="filter_1721420223921479">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129XNCZAD</tag>
					<tag>Tiva C Series</tag>
					</search.tags>
				</filter>
				<content name="Minimal" desc="This example has a fairly minimal .cfg which is set up for a static application where all objects are defined statically (via configuration tool and/or target structures).  Dynamic memory allocation has been disabled. The .cfg file creates a single task which has a couple of print statements and a Task_sleep() call." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_52.projectspec">
					<filter.ref ref.id="filter_1721420223921479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="minimal_TivaTM4C129XNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical" desc="This example has a .cfg populated with a typical set of options and parameters.  This .cfg file is a good starting point for many applications.  Dyanamic memory allocation and runtime create of is supported.  Unlike the 'Minimal' example, the single task is created at runtime using the Task_create() API." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_53.projectspec">
					<filter.ref ref.id="filter_1721420223921479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typical_TivaTM4C129XNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Typical (with separate config project)" desc="Same as the 'Typical' example except that the configuration project is a separate project from the app project.  The benefit of having a separate config project is that several applications can use the same configuration.  This helps save on build times and allows a team to share a common configuratin set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\com_ti_rtsc_sysbios_example_54.projectspec">
					<filter.ref ref.id="filter_1721420223921479"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="typicalSeparate_TivaTM4C129XNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XNCZAD"/>
						</attributes>
					</type>
				</content>
				<contents name="Generic Examples" desc="Generic SYS/BIOS Examples. These examples are not optimized for code and data memory usage and may not build on platforms with memory constraints." customPageType="genericNote">
				<filter id="filter_1721420224299525">
					<devices><device>ARM</device></devices>
					<search.tags>
					<tag>Tiva TM4C129XNCZAD</tag>
					<tag>Tiva C Series</tag>
					<tag>Generic Examples</tag>
					</search.tags>
				</filter>
				<content name="C++ Example (bigtime)" desc="In this program, C++ is used to create a real-time clock/calendar." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_55.projectspec">
					<filter.ref ref.id="filter_1721420224299525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="bigtime_TivaTM4C129XNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Clock Example" desc="The clock example shows how to use the ti.sysbios.knl.Clock module to create one-shot and periodic Clock Instances. Clock Instances are essentially functions that run after a certain number of Clock ticks." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_56.projectspec">
					<filter.ref ref.id="filter_1721420224299525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="clock_TivaTM4C129XNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Error Example" desc="This example shows how to use Error_Blocks to catch runtime errors. An Error_Block is passed to Task_create() and then checked for create failure. When no Error_Block is passed, the application will terminate when an error occurs. The error.cfg file shows how to plug an error hook." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_57.projectspec">
					<filter.ref ref.id="filter_1721420224299525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="error_TivaTM4C129XNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Event Example" desc="The event example shows how to use the ti.sysbios.knl.Event module. The ti.sysbios.knl.Event module solves the 'Wait on Multiple' problem. In this example a reader task waits on several events." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_58.projectspec">
					<filter.ref ref.id="filter_1721420224299525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="event_TivaTM4C129XNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Hello Example" desc="The hello example serves as a basic sanity check program for SYS/BIOS. It demonstrates how to print the string 'hello world' to stdout." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_59.projectspec">
					<filter.ref ref.id="filter_1721420224299525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="hello_TivaTM4C129XNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Log Example" desc="This module shows how to use Log_info(), Log_error() and Log_warning() in a simple application. It shows how to enable USER1 logs for the Task module in the cfg file." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_60.projectspec">
					<filter.ref ref.id="filter_1721420224299525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="log_TivaTM4C129XNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Memory Example" desc="This example shows the use of xdc.runtime.Memory module and different xdc.runtime.IHeap implementations to manage memory. A system heap is created statically using ti.sysbios.heaps.HeapMem." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_61.projectspec">
					<filter.ref ref.id="filter_1721420224299525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="memory_TivaTM4C129XNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Small Example" desc="This simple example uses the Clock module to periodically post a software interrupt (Swi), and increments counters.  The configuration disables non-essential and debug-related SYS/BIOS features to reduce the application memory footprint." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_64.projectspec">
					<filter.ref ref.id="filter_1721420224299525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="small_TivaTM4C129XNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Static Example" desc="The static example focuses on SYS/BIOS configuration. It shows how to use and configure various modules, create static Instances and modify Program level configuration parameters." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_65.projectspec">
					<filter.ref ref.id="filter_1721420224299525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="static_TivaTM4C129XNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Swi Example" desc="The swi example shows how to use the ti.sysbios.knl.Swi module. It demonstrates how the various Swi APIs work." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_66.projectspec">
					<filter.ref ref.id="filter_1721420224299525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="swi_TivaTM4C129XNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example" desc="This example shows the use of two tasks and one semaphore to protect data access." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_62.projectspec">
					<filter.ref ref.id="filter_1721420224299525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="task_TivaTM4C129XNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XNCZAD"/>
						</attributes>
					</type>
				</content>
				<content name="Task Mutex Example (separate config project)" desc="This example shows the use of two tasks and one semaphore to protect data access using a separate project for SYS/BIOS configuration. The benefit of having a separate config project is that several applications can reference the same SYS/BIOS configuration. This helps save on build times and allows a team to share a SYS/BIOS config set up by a system integrator." href="c:\ti\bios_6_35_01_29\resources\genericExamples\com_ti_rtsc_sysbios_example_63.projectspec">
					<filter.ref ref.id="filter_1721420224299525"/>
					<type>projectSpec
						<attributes>
							<attribute key="project.name" value="taskSeparate_TivaTM4C129XNCZAD"/>
							<attribute key="device.variant" value="Cortex M.TM4C129XNCZAD"/>
						</attributes>
					</type>
				</content>
				</contents>
		</contents>
	</contents>

</resource.explorer>
